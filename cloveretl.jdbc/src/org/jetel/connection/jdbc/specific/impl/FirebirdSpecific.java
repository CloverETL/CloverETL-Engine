/*
 * jETeL/CloverETL - Java based ETL application framework.
 * Copyright (c) Javlin, a.s. (info@cloveretl.com)
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.jetel.connection.jdbc.specific.impl;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType;
import org.jetel.connection.jdbc.specific.conn.FirebirdConnection;
import org.jetel.exception.JetelException;
import org.jetel.metadata.DataFieldMetadata;
import org.jetel.metadata.DataRecordMetadata;

/**
 * @author "Jan Kucera" (info@cloveretl.com)
 *         (c) Javlin, a.s. (www.cloveretl.com)
 *
 * @created Apr 22, 2011
 */
public class FirebirdSpecific extends AbstractJdbcSpecific {

	private static final FirebirdSpecific INSTANCE = new FirebirdSpecific();
	private static final String ORACLE_TYPES_CLASS_NAME =  "org.firebirdsql.jdbc.field";
	/** the SQL comments pattern conforming to the SQL standard */
	private static final Pattern COMMENTS_PATTERN = Pattern.compile("/\\*(?!\\+).*?\\*/", Pattern.DOTALL);
	
	private FirebirdSpecific() {
		super(AutoGeneratedKeysType.NONE);
	}

	public static FirebirdSpecific getInstance() {
		return INSTANCE;
	}
	
	@Override
	public Connection createSQLConnection(DBConnection dbConnection, OperationType operationType) throws JetelException {
		return new FirebirdConnection(dbConnection, operationType); 
	}

	public String sqlType2str(int sqlType) {
		switch(sqlType) {
			case Types.VARCHAR :
				return "VARCHAR";	
			case Types.BOOLEAN :
				return "CHAR(1)";
			case Types.TIMESTAMP :
				return "TIMESTAMP";
			case Types.INTEGER :
				return "INTEGER";
			case Types.NUMERIC :
				return "DOUBLE";
			case Types.BIGINT :
				return "INT64";
			case Types.VARBINARY :
			case Types.BINARY :
				return "CHAR";
		}
		return super.sqlType2str(sqlType);
	}
	
	/**
	 * for MySQL a database is a catalog AND a schema
	 */
	public ResultSet getTables(java.sql.Connection connection, String dbName) throws SQLException {
		return connection.getMetaData().getTables(null, null, "%", new String[] {"TABLE", "VIEW"}/*tableTypes*/); //fix by kokon - show only tables and views
	}
	
	
	
	@Override
	public String getTypesClassName() {
		return ORACLE_TYPES_CLASS_NAME;
	}

	@Override
	public Pattern getCommentsPattern() {
		return COMMENTS_PATTERN;
	}

	@Override
	public String quoteIdentifier(String identifier) {
		return ('"' + identifier + '"');
    }


	@Override
	public ArrayList<String> getSchemas(Connection connection) throws SQLException {
		ArrayList<String> schemas = new ArrayList<String>(1);
		schemas.add("Default");
		return schemas;
	}
	
	@Override
	public void optimizeResultSet(ResultSet resultSet,
			OperationType operationType) {

		switch (operationType){
		case READ:
			try {
				resultSet.setFetchDirection(ResultSet.FETCH_FORWARD);
				// SQLite driver MUST HAVE fetch size set to 0 - otherwise it limits number of results returned
				resultSet.setFetchSize(0);
			} catch(SQLException ex) {
				//TODO: for now, do nothing
			}
		}

	}

	public static void main(String[] args) throws ClassNotFoundException, SQLException {
		Class.forName("org.firebirdsql.jdbc.FBDriver");

		
		Connection connection = DriverManager.getConnection(
										"jdbc:firebirdsql:localhost/3050:C:\\Temp\\test.fdb", "sysdba", "masterkey");
		FirebirdSpecific firebird = FirebirdSpecific.getInstance();
		ResultSet rs = firebird.getTables(connection, null);
		while(rs.next()) {
			System.out.println(rs.getString(3));
		}
		rs.close();
		String query = firebird.compileSelectQuery4Table("Schema", "CUSTOMERS");
		System.out.println(query);
		List<String> schemas = firebird.getSchemas(connection);
		for(String schema : schemas) {
			System.out.println("Schema: "+schema);
			firebird.getTables(connection, schema);
			ResultSet resultSet = firebird.getTables(connection, null);
			while(resultSet.next()) {
				System.out.println(schema+"."+resultSet.getString(3));
			}
			resultSet.close();
		}
		ResultSetMetaData metadata = firebird.getColumns(connection,null, "CUSTOMERS");
		for(int i = 1; i <= metadata.getColumnCount(); i++) {
			System.out.println("Column: "+metadata.getColumnLabel(i));
		}
		ResultSet res = connection.createStatement().executeQuery("SELECT * FROM CUSTOMERS");
		firebird.optimizeResultSet(res, OperationType.READ);
		while(res.next()) {
			System.out.println(res.getObject(1));
			System.out.println(res.getObject(2));
		}
		connection.close();
		System.out.println("All done");
	}
}
