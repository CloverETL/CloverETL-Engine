/*
*    jETeL/Clover - Java based ETL application framework.
*    Copyright (C) 2002-04  David Pavlis <david_pavlis@hotmail.com>
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
*/
package org.jetel.connection.jdbc.specific.impl;

import java.sql.Connection;
import java.sql.Types;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.conn.MSSQLConnection;
import org.jetel.exception.JetelException;
import org.jetel.metadata.DataFieldMetadata;
import org.jetel.util.string.StringUtils;

/**
 * MS SQL 2005 specific behaviour.
 * 
 * This specific works on SQL Server 2005 and older primarily,
 * although it should work also on newer versions
 * 
 * @author Pavel Najvar (pavel.najvar@javlin.eu)
 *         (c) Javlin Consulting (www.javlinconsulting.cz)
 *
 * @created Mar 19, 2009
 */
public class MSSQLSpecific2005 extends AbstractJdbcSpecific {

	private static final MSSQLSpecific2005 INSTANCE = new MSSQLSpecific2005();
	
	protected MSSQLSpecific2005() {
		super(AutoGeneratedKeysType.SINGLE);
	}

	public static MSSQLSpecific2005 getInstance() {
		return INSTANCE;
	}

	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#createSQLConnection(org.jetel.connection.jdbc.DBConnection, org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType)
	 */
	@Override
	public Connection createSQLConnection(DBConnection connection, OperationType operationType) throws JetelException {
		return new MSSQLConnection(connection, operationType);
	}

	@Override
	public int jetelType2sql(DataFieldMetadata field) {
		switch (field.getType()) {
		case DataFieldMetadata.DATE_FIELD:
			return Types.TIMESTAMP;
		default:
			return super.jetelType2sql(field);
		}
	}

	public String sqlType2str(int sqlType) {
		switch(sqlType) {
		case Types.TIMESTAMP :
			return "DATETIME";
		case Types.BOOLEAN :
			return "TINYINT";
		case Types.INTEGER :
			return "INT";
		case Types.NUMERIC :
			return "FLOAT";
		}
		return super.sqlType2str(sqlType);
	}

	@Override
	public String jetelType2sqlDDL(DataFieldMetadata field) {
		switch(jetelType2sql(field)) {
		case Types.BOOLEAN :
			return "TINYINT(1)";
		}
		return super.jetelType2sqlDDL(field);
	}
    

	
    public String quoteIdentifier(String identifier) {
        return ('[' + identifier + ']');
    }

}
