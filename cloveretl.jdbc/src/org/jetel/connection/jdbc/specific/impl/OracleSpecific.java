/*
*    jETeL/Clover - Java based ETL application framework.
*    Copyright (C) 2002-04  David Pavlis <david_pavlis@hotmail.com>
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
*/
package org.jetel.connection.jdbc.specific.impl;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.regex.Pattern;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.conn.OracleConnection;
import org.jetel.exception.JetelException;
import org.jetel.metadata.DataFieldMetadata;

/**
 * Oracle specific behaviour.
 * 
 * @author Martin Zatopek (martin.zatopek@javlinconsulting.cz)
 *         (c) Javlin Consulting (www.javlinconsulting.cz)
 *
 * @created Jun 3, 2008
 */
public class OracleSpecific extends AbstractJdbcSpecific {

	/** the SQL comments pattern conforming to the SQL standard */
	private static final Pattern COMMENTS_PATTERN = Pattern.compile("--[^\r\n]*|/\\*(?!\\+).*?\\*/", Pattern.DOTALL);

	private static final String ORACLE_TYPES_CLASS_NAME = "oracle.jdbc.OracleTypes";

	private static final String ORACLE_RESULT_SET_PARAMETER_TYPE_FIELD = "CURSOR";

	private static final OracleSpecific INSTANCE = new OracleSpecific();
	
	protected OracleSpecific() {
		super(AutoGeneratedKeysType.MULTI);
	}

	public static OracleSpecific getInstance() {
		return INSTANCE;
	}

	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#createSQLConnection(org.jetel.connection.jdbc.DBConnection, org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType)
	 */
	@Override
	public Connection createSQLConnection(DBConnection dbConnection, OperationType operationType) throws JetelException {
		return new OracleConnection(dbConnection, operationType, getAutoKeyType());
	}

	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#jetelType2sql(org.jetel.metadata.DataFieldMetadata)
	 */
	public int jetelType2sql(DataFieldMetadata field){
		switch (field.getType()) {
		case DataFieldMetadata.DATE_FIELD:
			boolean isDate = field.isDateFormat();
			boolean isTime = field.isTimeFormat();
			if (isDate && !isTime)
				return Types.DATE;
			return Types.TIMESTAMP;
		}
		return super.jetelType2sql(field);
	}
    
	public String sqlType2str(int sqlType) {
		switch(sqlType) {
		case Types.BOOLEAN :
			return "SMALLINT";
		case Types.VARCHAR :
			return "VARCHAR2";
		case Types.NUMERIC :
		case Types.BIGINT :
			return "NUMBER";
		case Types.VARBINARY :
		case Types.BINARY :
			return "RAW";
		}
		return super.sqlType2str(sqlType);
	}

	@Override
	public String jetelType2sqlDDL(DataFieldMetadata field) {
		int type = jetelType2sql(field); 
		switch(type) {
		case Types.BOOLEAN :
			return sqlType2str(type);
		case Types.BIGINT :
			return sqlType2str(type) + "(11,0)";
		}
		return super.jetelType2sqlDDL(field);
	}
    

	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#getResultSetParameterTypeField()
	 */
	public String getResultSetParameterTypeField() {
		return ORACLE_RESULT_SET_PARAMETER_TYPE_FIELD;
	}
	
	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#getTypesClassName()
	 */
	public String getTypesClassName() {
		return ORACLE_TYPES_CLASS_NAME;
	}

	@Override
	public Pattern getCommentsPattern() {
		return COMMENTS_PATTERN;
	}

	@Override
	public ResultSet getTables(Connection connection, String dbName) throws SQLException {
		return connection.getMetaData().getTables(null, dbName, "%", new String[] {"TABLE", "VIEW" });
	}

	@Override
	public boolean isSchemaRequired() {
		return true;
	}
}
