/*
*    jETeL/Clover - Java based ETL application framework.
*    Copyright (C) 2002-04  David Pavlis <david_pavlis@hotmail.com>
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
*/
package org.jetel.connection.jdbc.specific.impl;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.conn.DefaultConnection;
import org.jetel.exception.JetelException;

/**
 * A JdbcSpecific for SQLite serverless database
 *  
 * @author Pavel Najvar (pavel.najvar@opensys.com)
 *         (c) OpenSys (www.opensys.com)
 *
 * @created Sep 2009
 */
public class SQLiteSpecific extends AbstractJdbcSpecific {

	protected SQLiteSpecific() {
		super(AutoGeneratedKeysType.NONE);
	}

	private static final SQLiteSpecific INSTANCE = new SQLiteSpecific();
	
	public static SQLiteSpecific getInstance() {
		return INSTANCE;
	}
	
	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.impl.AbstractJdbcSpecific#createSQLConnection(org.jetel.connection.jdbc.DBConnection, org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType)
	 */
	@Override
	public Connection createSQLConnection(DBConnection dbConnection, OperationType operationType) throws JetelException {
		return new DefaultConnection(dbConnection, operationType, getAutoKeyType());
	}

	@Override
	public ArrayList<String> getSchemas(java.sql.Connection connection)
			throws SQLException {
		
		Statement s = connection.createStatement();
		
		ResultSet rs = s.executeQuery("pragma database_list");
		ArrayList<String> dbList = new ArrayList<String>();
		String tmp;
		if (rs != null) while(rs.next()) {
			tmp = rs.getString(2) + " [" + rs.getString(3) + "]";
			dbList.add(tmp);
		}
		
		return dbList;
	}

	@Override
	public ResultSet getTables(java.sql.Connection connection, String dbName)
			throws SQLException {
		// TODO Auto-generated method stub
		
		Statement s = connection.createStatement();
		// -pnajvar
		// this is a bit weird, but the result set must have 3rd column the table name
		ResultSet rs = s.executeQuery("select tbl_name, tbl_name, tbl_name from sqlite_master order by tbl_name");
		return rs;
		
	}

	
	
}
