/*
 * jETeL/CloverETL - Java based ETL application framework.
 * Copyright (c) Javlin, a.s. (info@cloveretl.com)
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.jetel.connection.jdbc.specific.conn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.JdbcSpecific.AutoGeneratedKeysType;
import org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType;
import org.jetel.exception.JetelException;

/**
 * @author Agata Vackova (agata.vackova@javlinconsulting.cz) ; 
 * (c) JavlinConsulting s.r.o.
 *  www.javlinconsulting.cz
 *
 * @since Dec 19, 2008
 *
 */

public class SybaseConnection extends DefaultConnection {

	/**
	 * @param dbConnection
	 * @param operationType
	 * @param autoGeneratedKeysType
	 * @throws JetelException
	 */
	public SybaseConnection(DBConnection dbConnection,	OperationType operationType) throws JetelException {
		super(dbConnection, operationType, AutoGeneratedKeysType.NONE);
	}

	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.conn.DefaultConnection#prepareStatement(java.lang.String, int[])
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		logger.warn("Postgre driver doesn't support auto generated columns");
		return super.prepareStatement(sql, columnIndexes);
	}
	
	/* (non-Javadoc)
	 * @see org.jetel.connection.jdbc.specific.conn.DefaultConnection#prepareStatement(java.lang.String, java.lang.String[])
	 */
	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		logger.warn("Postgre driver doesn't support auto generated columns");
		return super.prepareStatement(sql, columnNames);
	}
	
	@Override
	protected void optimizeConnection(OperationType operationType) {
		switch (operationType) {
		case READ:
			try {
				connection.setAutoCommit(false);
				connection.setReadOnly(true);
				connection.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			} 
			break;
		case WRITE:
		case CALL:
			try {
				connection.setAutoCommit(false);
				connection.setReadOnly(false);
				connection.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			}
			break;
		case TRANSACTION:
			try {
				connection.setAutoCommit(true);
				connection.setReadOnly(false);
				connection.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			}
			break;
		}
	}
}
