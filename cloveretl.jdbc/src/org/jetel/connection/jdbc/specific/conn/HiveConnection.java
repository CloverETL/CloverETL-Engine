/*
 * jETeL/CloverETL - Java based ETL application framework.
 * Copyright (c) Javlin, a.s. (info@cloveretl.com)
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.jetel.connection.jdbc.specific.conn;

import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;
import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.JdbcSpecific.AutoGeneratedKeysType;
import org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType;
import org.jetel.exception.JetelException;

/**
 * Connection adapter to Apache Hive -- the data warehouse system for Hadoop.
 * 
 * Created and tested on version 0.8.1 of the Hive JDBC driver.
 *
 * @author tkramolis (info@cloveretl.com)
 *         (c) Javlin, a.s. (www.cloveretl.com)
 *
 * @created 26.10.2012
 */
public class HiveConnection extends DefaultConnection {
	
	private Logger logger = Logger.getLogger(HiveConnection.class);

	public HiveConnection(DBConnection dbConnection, OperationType operationType) throws JetelException {
		super(dbConnection, operationType, AutoGeneratedKeysType.NONE); // TODO what AutoGeneratedKeysType??
	}
	
	@Override
	public Statement createStatement() throws SQLException {
		return optimizeStatement(connection.createStatement());
	}

	@Override
	protected void optimizeConnection(OperationType operationType) throws Exception {
		// Don't do anything; The driver's HiveConnection isn't much customizable, it just throws SQLException("Method not supported") all the time
	}

	@Override
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		// Method not supported by the Hive JDBC driver
		if (!autoCommit) {
			throw new SQLException("Cannot disable Auto-commit on Hive connection");
		}
	}
	
	@Override
	public void setReadOnly(boolean readOnly) throws SQLException {
		// Method not supported by the Hive JDBC driver
		if (!readOnly) {
			logger.debug("Ignoring setReadOnly(false) method call. Hive connection cannot be set to read-only mode.");
		}
	}
	
}
