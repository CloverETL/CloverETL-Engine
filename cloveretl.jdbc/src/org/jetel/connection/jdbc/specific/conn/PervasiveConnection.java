/*
 * jETeL/CloverETL - Java based ETL application framework.
 * Copyright (c) Javlin, a.s. (info@cloveretl.com)
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.jetel.connection.jdbc.specific.conn;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.specific.JdbcSpecific.AutoGeneratedKeysType;
import org.jetel.connection.jdbc.specific.JdbcSpecific.OperationType;
import org.jetel.exception.JetelException;

/**
 * @author lkrejci (info@cloveretl.com)
 *         (c) Javlin, a.s. (www.cloveretl.com)
 *
 * @created 7 Jun 2011
 */
public class PervasiveConnection extends DefaultConnection {
	
	/**
	 * @param dbConnection
	 * @param operationType
	 * @param autoGeneratedKeysType
	 * @throws JetelException
	 */
	public PervasiveConnection(DBConnection dbConnection, OperationType operationType,
			AutoGeneratedKeysType autoGeneratedKeysType) throws JetelException {
		
		super(dbConnection, operationType, autoGeneratedKeysType);
	}

	@Override
	protected void optimizeConnection(OperationType operationType) {
		switch (operationType) {
		case READ:
			try {
				connection.setAutoCommit(false);
				connection.setReadOnly(true);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			}
			break;
		case WRITE:
		case CALL:
			try {
				connection.setAutoCommit(false);
				connection.setReadOnly(false);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			}
			break;

		case TRANSACTION:
			try {
				connection.setAutoCommit(true);
				connection.setReadOnly(false);
				connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			} catch (Exception ex) {
				logger.warn("Optimizing connection failed: " + ex.getMessage());
				logger.warn("Try to use another jdbc specific");
			}
			break;
		}
	}
	
	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		PreparedStatement statement;
		switch (operationType) {
		case READ:
			statement = connection.prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
			break;
		default:
			statement = connection.prepareStatement(sql);
		}
		optimizeStatement(statement);
		return statement;
	}

}
