<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Jul 28 14:48:33 CEST 2010" guiVersion="0.0.0.devel" id="1224141158838" licenseCode="Commercial Devel" licenseType="Commercial" modified="Wed Feb 24 11:10:06 CET 2016" modifiedBy="jansedlacek" name="CompanyChecks" revision="1.156" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="companyData" previewAttachmentCharset="ISO-8859-1" recordSize="469" type="delimited">
<Field name="ic" nullable="true" type="string"/>
<Field name="company" nullable="true" type="string"/>
<Field name="zip" nullable="true" type="string"/>
<Field name="city" nullable="true" type="string"/>
<Field name="district" nullable="true" type="string"/>
<Field delimiter="\r\n" name="street" nullable="true" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="companyDataScore" previewAttachmentCharset="ISO-8859-1" recordSize="469" type="delimited">
<Field name="ic" nullable="true" type="string"/>
<Field name="company" nullable="true" type="string"/>
<Field name="zip" nullable="true" type="string"/>
<Field name="city" nullable="true" type="string"/>
<Field name="district" nullable="true" type="string"/>
<Field delimiter=";" name="street" nullable="true" type="string"/>
<Field default="0" delimiter="\r\n" name="score" nullable="false" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record name="res" previewAttachmentCharset="ISO-8859-1" recordSize="469" type="fixed">
<Field name="ico" nullable="true" size="8" type="string"/>
<Field name="likv" size="1" type="string"/>
</Record>
</Metadata>
<Connection database="DERBY" dbURL="jdbc:derby://localhost:1527/${DATAIN_DIR}/companies.db" id="Connection0" jdbcSpecific="DERBY" name="Derby" password="app" type="JDBC" user="app"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="F9EB81" enabled="true" folded="false" fontSize="medium" height="232" id="Note9" textColor="000000" width="323" x="619" y="64">
<attr name="text"><![CDATA[h5. Before running this graph:
You need to start the embedded Derby database in order to run this graph. Please go to _Run -> External Tools_ and use the provided shortcuts to start/stop the database. (on first start you'll need to go to _External Tools Configuration/Program_).


You will find Derby distribution under [lib/derby|navigator://BasicExamples/lib/derby] in this project]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="DAD8C9" enabled="true" folded="false" fontSize="medium" height="232" id="Note13" textColor="000000" width="605" x="9" y="64">
<attr name="text"><![CDATA[h3. Company Liquidation Check
We have a customer database and every week we want to match our customers with a file we receive from a 3rd party that containing a list of all companies that are in liquidation. We validate our customer company IDs; match them and write the output to database tables for the following criteria:


* [Invalid customer company IDs|element://DB_OUTPUT_TABLE0]
* [Customers that are in liquidation|element://DB_OUTPUT_TABLE2]
* [Customers that are not in liquidation|element://DB_OUTPUT_TABLE3]
* [Customers where the liquidation status is unclear|element://DB_OUTPUT_TABLE1]
]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="325" id="Note1" textColor="000000" width="298" x="9" y="306">
<attr name="text"><![CDATA[h5. Phase 0 
h6. (see '0' in top left corner of the component) 
This runs in Phase 0 and deletes tables in Derby DB. Rest of graph runs in Phase 1 after Phase 0 completes]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="278" id="Note0" textColor="000000" width="234" x="492" y="306">
<attr name="text"><![CDATA[h5. Mapping
Mapping in the component uses the "star" notation: 

{noformat}$out.0.* = $in.0.*;{noformat}]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" enabled="true" folded="false" fontSize="medium" height="270" id="Note10" textColor="000000" width="253" x="491" y="589">
<attr name="text"><![CDATA[h5. Mapping
Mapping in the component uses the "star" notation: 
{noformat}$out.0.* = $in.0.*;{noformat}]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node dbConnection="Connection0" enabled="enabled" guiName="DBExecute" guiX="83" guiY="470" id="DB_EXECUTE0" type="DB_EXECUTE">
<attr name="sqlQuery"><![CDATA[DELETE FROM checksumfailures;
DELETE FROM validated;]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAIN_DIR}/companies.txt" guiName="Companies" guiX="337" guiY="462" id="DATA_READER0" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Load in Companies from our in-house database]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAIN_DIR}/res.txt" guiName="Company Status" guiX="337" guiY="761" id="DATA_READER1" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Read 'Companies in Liquidation' file]]></attr>
</Node>
<Node dbConnection="Connection0" dbTable="checksumfailures" enabled="enabled" guiName="Invalid Checksums" guiX="979" guiY="462" id="DB_OUTPUT_TABLE0" type="DB_OUTPUT_TABLE">
<attr name="guiDescription"><![CDATA[Write bad IDs to DB table]]></attr>
</Node>
<Node dbConnection="Connection0" enabled="enabled" guiName="Unknown Liq Status" guiX="963" guiY="673" id="DB_OUTPUT_TABLE1" type="DB_OUTPUT_TABLE">
<attr name="sqlQuery"><![CDATA[INSERT INTO UNSELECTEDIC (IC, COMPANY, ZIP, CITY, DISTRICT, STREET, SCORE)
VALUES ($ic, $company, $zip, $city, $district, $street, $score)]]></attr>
</Node>
<Node dbConnection="Connection0" dbTable="inliquidation" enabled="enabled" fieldMap="$ic:=ic;$company:=company;$zip:=zip;$city:=city;$district:=district;$street:=street;$score:=score;" guiName="In Liquidation" guiX="963" guiY="747" id="DB_OUTPUT_TABLE2" type="DB_OUTPUT_TABLE"/>
<Node dbConnection="Connection0" enabled="enabled" guiName="Operational" guiX="963" guiY="819" id="DB_OUTPUT_TABLE3" type="DB_OUTPUT_TABLE">
<attr name="sqlQuery"><![CDATA[INSERT INTO VALIDATED VALUES ($ic, $company, $zip, $city, $district, $street, $score)]]></attr>
</Node>
<Node enabled="enabled" guiName="Filter bad Checksums" guiX="760" guiY="462" id="EXT_FILTER0" type="EXT_FILTER">
<attr name="guiDescription"><![CDATA[Filter out any bad IDs]]></attr>
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.score > 0]]></attr>
</Node>
<Node ascendingInputs="true" enabled="enabled" guiName="Merge List" guiX="538" guiY="747" id="EXT_MERGE_JOIN0" joinKey="$ic;#$ico;#" joinType="leftOuter" type="EXT_MERGE_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	
	if(isEmpty($in.1.ico)) {
		$out.0.score = 1;
	}else
	if($in.1.likv == 'A') {
		$out.0.score = 3;  
	}else{
		$out.0.score = 0;  
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Merge it with our customer data]]></attr>
</Node>
<Node enabled="enabled" guiName="Partition Results" guiX="760" guiY="747" id="PARTITION0" partitionKey="score" ranges="&lt;1,1&gt;;&lt;3,3&gt;;&lt;0,0&gt;;" type="PARTITION">
<attr name="guiDescription"><![CDATA[Output each customer into one of the 3 DB tables on the right, depending on Liquidation status of the customer]]></attr>
</Node>
<Node enabled="enabled" guiName="Calculate Checksum" guiX="535" guiY="462" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	integer count = 0;
	
	for(integer i=0; i<7; i++) {
	  count +=  str2integer(charAt($in.0.ic,i)) * (8-i);  
	}
	
	string checkSumChar = charAt($in.0.ic, 7);
	integer mod = count % 11;
	
	integer checkSum = (11 - mod) % 10; 
	
	
	$out.0.* = $in.0.*;
	if(checkSum == str2integer(checkSumChar)) {
		$out.0.score = 0;
	}else{
		$out.0.score = 2;
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Validate Company ID of customer]]></attr>
</Node>
<Edge debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="REFORMAT0:0"/>
<Edge debugMode="true" fromNode="DATA_READER1:0" guiBendpoints="200:686|200:702" guiLocks="788|null|null" guiRouter="Manhattan" id="Edge5" inPort="Port 1 (slave)" metadata="Metadata2" outPort="Port 0 (output)" toNode="EXT_MERGE_JOIN0:1"/>
<Edge debugMode="true" fromNode="EXT_FILTER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (accepted)" persistedImplicitMetadata="Metadata1" toNode="DB_OUTPUT_TABLE0:0"/>
<Edge debugMode="true" fromNode="EXT_FILTER0:1" guiBendpoints="949:495|949:586|483:586|483:766" guiLocks="949|483|586" guiRouter="Manual" id="Edge3" inPort="Port 0 (driver)" outPort="Port 1 (rejected)" persistedImplicitMetadata="Metadata1" toNode="EXT_MERGE_JOIN0:0"/>
<Edge debugMode="false" fromNode="EXT_MERGE_JOIN0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="PARTITION0:0"/>
<Edge debugMode="true" fromNode="PARTITION0:0" guiBendpoints="66:0|66:2" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata1" toNode="DB_OUTPUT_TABLE1:0"/>
<Edge debugMode="true" fromNode="PARTITION0:1" guiBendpoints="700:699|700:774" guiLocks="1288|null|null" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 1 (out)" persistedImplicitMetadata="Metadata1" toNode="DB_OUTPUT_TABLE2:0"/>
<Edge debugMode="true" fromNode="PARTITION0:2" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 2 (out)" persistedImplicitMetadata="Metadata1" toNode="DB_OUTPUT_TABLE3:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_FILTER0:0"/>
</Phase>
</Graph>
