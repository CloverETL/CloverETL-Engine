<?xml version="1.0" encoding="UTF-8"?>
<Graph author="User" category="readers" created="Thu May 22 11:17:18 CEST 2014" guiVersion="4.1.0.M1" id="1400758283747" licenseCode="Commercial Devel" licenseType="Commercial" modified="Tue Apr 21 16:17:58 CEST 2015" modifiedBy="User" name="JIRA Search" nature="subgraph" revision="1.186" showComponentDetails="true">
<Global>
<inputPorts>
<singlePort connected="true" keepEdge="true" name="0" required="false"/>
</inputPorts>
<outputPorts>
<singlePort connected="false" keepEdge="true" name="0" required="false"/>
<singlePort connected="false" keepEdge="true" name="1" required="false"/>
</outputPorts>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_search" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="query" type="string"/>
</Record>
</Metadata>
<Metadata id="jira_search_metadata" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_search_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="jira_query" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" label="total" name="total_results" nullable="true" shift="0" size="0" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="search_params" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="query" type="string"/>
<Field name="session_name" type="string"/>
<Field name="session_value" type="string"/>
<Field name="start_at" type="string"/>
</Record>
</Metadata>
<MetadataGroup name="Implicit metadata" type="implicit">
<Metadata id="GET_PAGING_INFO_Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="search_params" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="query" type="string"/>
<Field name="session_name" type="string"/>
<Field name="session_value" type="string"/>
<Field name="start_at" trim="true" type="integer"/>
</Record>
</Metadata>
<Metadata id="LOGIN_Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_login" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="session_name" type="string"/>
<Field name="session_value" type="string"/>
<Field name="login_rest_response" type="string"/>
<Field name="login_rest_status_code" trim="true" type="integer"/>
<Field name="login_rest_error_message" type="string"/>
</Record>
</Metadata>
<Metadata id="RUN_SEARCH_REST_Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="search_params" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="query" type="string"/>
<Field name="session_name" type="string"/>
<Field name="session_value" type="string"/>
<Field name="start_at" trim="true" type="integer"/>
</Record>
</Metadata>
<Metadata id="RUN_SEARCH_REST_Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_search_result" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="issue_id" type="string"/>
<Field name="type" type="string"/>
<Field name="summary" type="string"/>
</Record>
</Metadata>
<Metadata id="GET_PAGING_INFO_Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_search_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="jira_query" type="string"/>
<Field label="startAt" name="start_at" trim="true" type="integer"/>
<Field label="maxResults" name="max_results" trim="true" type="integer"/>
<Field label="total" name="total_results" trim="true" type="integer"/>
</Record>
</Metadata>
<Metadata id="RUN_SEARCH_REST_Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="jira_search_metadata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="jira_query" type="string"/>
<Field label="startAt" name="start_at" trim="true" type="integer"/>
<Field label="maxResults" name="max_results" trim="true" type="integer"/>
<Field label="total" name="total_results" trim="true" type="integer"/>
</Record>
</Metadata>
</MetadataGroup>
<GraphParameters>
<GraphParameter label="User" name="USER" public="true" required="false"/>
<GraphParameter label="Password" name="PASSWORD" public="true" required="false" secure="true"/>
<GraphParameter label="JIRA Query" name="QUERY" public="true" required="false"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="191" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Description" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="300" x="-354" y="-249">
<attr name="text"><![CDATA[Searches JIRA. The subgraph has 2 modes:
- if an input port is connected, it searches via multiple JQL queries. The JQL queries are read from the input port. Sends the found issues to the 1. output port, and search metadata to the 2. output port.
- if the input port is not connected, the JQL query is read from a public parameter

In effect in subgraph is similar to many CloverETL readers - they can read their URL from a property or from their input.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node debugInput="true" guiName="DataGenerator" guiX="-691" guiY="145" id="DATA_GENERATOR" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.query = getParamValue("DEFAULT_QUERY");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enableWhenInputPort0IsDisconnected" guiName="GetJobInput" guiX="-371" guiY="295" id="GET_JOB_INPUT" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.query = getParamValue("QUERY");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node __PASSWORD="${PASSWORD}" __USER="${USER}" enabled="enabled" guiName="Login" guiX="-184" guiY="-34" id="LOGIN" jobURL="${SUBGRAPH_DIR}/impl/JIRALogin.sgrf" type="SUBGRAPH"/>
<Node guiName="SimpleCopy" guiX="17" guiY="-34" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node guiName="SimpleGather" guiX="-371" guiY="145" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="SubgraphInput" guiX="-483" guiY="-244" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="163" name="0"/>
<Port guiY="186" name="1"/>
</Node>
<Edge debugMode="true" fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata4" toNode="SUBGRAPH_INPUT:0"/>
<Edge debugMode="true" fromNode="GET_JOB_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge debugMode="true" fromNode="LOGIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="LOGIN_Metadata2" toNode="SIMPLE_COPY:0"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (slave)" outPort="Port 0 (out)" persistedImplicitMetadata="LOGIN_Metadata2" toNode="ADD_LOGIN_TOKEN1:1"/>
<Edge debugMode="true" fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 1 (slave)" outPort="Port 1 (out)" persistedImplicitMetadata="LOGIN_Metadata2" toNode="ADD_LOGIN_TOKEN:1"/>
<Edge debugMode="true" fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (master)" metadata="Metadata4" outPort="Port 0 (out)" toNode="ADD_LOGIN_TOKEN:0"/>
<Edge debugMode="true" fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata4" toNode="SIMPLE_GATHER:0"/>
</Phase>
<Phase number="1">
<Node guiName="Add login token" guiX="-184" guiY="145" id="ADD_LOGIN_TOKEN" type="CROSS_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.session_name = $in.1.session_name;
	$out.0.session_value = $in.1.session_value;
	$out.0.query = $in.0.query;
	$out.0.start_at = str2integer(getParamValue("DEFAULT_START_AT"));
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Add login token" guiX="636" guiY="145" id="ADD_LOGIN_TOKEN1" type="CROSS_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.session_name = $in.1.session_name;
	$out.0.session_value = $in.1.session_value;
	$out.0.start_at = $in.0.start_at;
	$out.0.query = $in.0.query;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Calculate pages" guiX="414" guiY="145" id="CALCULATE_PAGES" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.

integer page_size;
string query;

// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.
function integer count() {
	page_size = $in.0.max_results;
	query = $in.0.jira_query;
	
	integer total_results = $in.0.total_results;
	
	integer pages = total_results / page_size + 1;
	return pages;
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	$out.0.* = $out.0.*;
	$out.0.query = query;
	$out.0.start_at = idx * page_size;
	
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Get paging info" guiX="205" guiY="145" id="GET_PAGING_INFO" jobURL="${SUBGRAPH_DIR}/impl/JIRASearchREST.sgrf" type="SUBGRAPH"/>
<Node enabled="enabled" guiName="Only last search result" guiX="1050" guiY="250" id="ONLY_LAST_SEARCH_RESULT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if ($in.0.start_at + $in.0.max_results < $in.0.total_results) {
		return SKIP;
	}
	
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Run search REST" guiX="840" guiY="145" id="RUN_SEARCH_REST" jobURL="${SUBGRAPH_DIR}/impl/JIRASearchREST.sgrf" type="SUBGRAPH"/>
<Node guiName="Start at 0" guiX="17" guiY="145" id="START_AT_0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.start_at = 0;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SubgraphOutput" guiX="1238" guiY="-244" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="161" name="0"/>
<Port guiY="265" name="1"/>
<Port guiY="287" name="2"/>
</Node>
<Edge debugMode="true" fromNode="ADD_LOGIN_TOKEN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadataRef="#//Edge12" outPort="Port 0 (out)" persistedImplicitMetadata="GET_PAGING_INFO_Metadata5" toNode="START_AT_0:0"/>
<Edge debugMode="true" fromNode="ADD_LOGIN_TOKEN1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="RUN_SEARCH_REST_Metadata5" toNode="RUN_SEARCH_REST:0"/>
<Edge debugMode="true" fromNode="CALCULATE_PAGES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (master)" metadataRef="#//Edge4" outPort="Port 0 (out)" persistedImplicitMetadata="RUN_SEARCH_REST_Metadata5" toNode="ADD_LOGIN_TOKEN1:0"/>
<Edge debugMode="true" fromNode="GET_PAGING_INFO:1" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 1 (out)" persistedImplicitMetadata="GET_PAGING_INFO_Metadata1" toNode="CALCULATE_PAGES:0"/>
<Edge debugMode="true" fromNode="ONLY_LAST_SEARCH_RESULT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 1 (in)" metadata="jira_search_metadata" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge debugMode="true" fromNode="RUN_SEARCH_REST:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="RUN_SEARCH_REST_Metadata0" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge debugMode="true" fromNode="RUN_SEARCH_REST:1" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" outPort="Port 1 (out)" persistedImplicitMetadata="RUN_SEARCH_REST_Metadata1" toNode="ONLY_LAST_SEARCH_RESULT:0"/>
<Edge debugMode="true" fromNode="START_AT_0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="GET_PAGING_INFO_Metadata5" toNode="GET_PAGING_INFO:0"/>
</Phase>
</Graph>
