<?xml version="1.0" encoding="UTF-8"?>
<Graph author="dpavlis" created="Tue Jul 15 09:15:48 CEST 2014" guiVersion="0.0.0.devel" id="1405410961170" licenseCode="Commercial Devel" licenseType="Commercial" modified="Wed Feb 24 09:54:14 CET 2016" modifiedBy="jansedlacek" name="WordsFrequency" nature="subgraph" revision="1.10" showComponentDetails="true">
<Global>
<inputPorts>
<singlePort connected="true" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" name="0"/>
</outputPorts>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="recordName1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="text" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="wordOccurence" recordDelimiter="\n" type="delimited">
<Field name="word" type="string"/>
<Field name="count" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="words_stats" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="word" type="string"/>
</Record>
</Metadata>
<MetadataGroup name="Implicit metadata" type="implicit">
<Metadata com.cloveretl.profiler.engine.components.mapping.metrics="mapping.metrics" id="__dynamic_metadata_CALCULATE_FREQUENCIES_RunResults">
<Record com.cloveretl.profiler.engine.components.mapping.metrics="mapping.metrics" fieldDelimiter="," name="RunResults" recordDelimiter="\n" type="delimited">
<Field name="word__min_length" trim="true" type="integer"/>
<Field name="word__avg_length" trim="true" type="number"/>
<Field name="word__max_len" trim="true" type="integer"/>
<Field name="word__shortest_string" type="string"/>
<Field name="word__longest_string" type="string"/>
<Field containerType="map" name="word__freq_histogram" trim="true" type="long"/>
</Record>
</Metadata>
</MetadataGroup>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="F9EB81" enabled="true" folded="false" fontSize="medium" height="94" id="Note0" textColor="000000" width="788" x="308" y="42">
<attr name="text"><![CDATA[This subraph accepts records on input (any structure) with field (named "text") containing text/sentence(s). It tokenizes the text, remove stop words (i.e.commonly used words) and calculacets frequencies of "rare" words. The output is sorted descending based on frequencies.]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Calculate Frequencies" guiX="642" guiY="160" id="CALCULATE_FREQUENCIES" persistResults="false" type="PROFILER_PROBE">
<attr name="metrics"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<listOfFunctions>
    <metadataField name="word" type="string">
        <function name="min_length"/>
        <function name="avg_length"/>
        <function name="max_len"/>
        <function name="shortest_string"/>
        <function name="longest_string"/>
        <function name="freq_histogram" MaxUniqueValues="10000"/>
    </metadataField>
</listOfFunctions>
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.word__freq_histogram = $in.1.word__freq_histogram;
	$out.1.word__avg_length = $in.1.word__avg_length;
	$out.1.word__min_length = $in.1.word__min_length;
	$out.1.word__max_len = $in.1.word__max_len;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugInput="true" enabled="enabled" guiName="DebugInput" guiX="49" guiY="83" id="DEBUG_INPUT" recordsNumber="3" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

string[] texts=["RT @Chilis: Where are you watching #ArgentinavsGermany? We'll have the game on our big screens! http://t.co/kXhE2s0L",	
				"A sea of Argentinians. Clearly us Germans are outnumbered. #argentinavsgermany #GERARG #GERvsARG #worldcup #worl... http://t.co/sB2ioYHPqd",
				"RT @Cw700CP: The 2014 FIFA World Cup is over. But here's something I made in honor of the finals (LATE). #ArgentinaVSGermany http://t.co/9"];
integer count=0;


// Generates output record.
function integer generate() {
	$out.0.text=texts[count++];
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugOutput="true" enabled="enabled" guiName="DebugOutput" guiX="1264" guiY="160" id="DEBUG_OUTPUT" type="TRASH"/>
<Node enabled="enabled" guiName="Normalizer" guiX="848" guiY="160" id="NORMALIZER" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.

// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.

string[] words;

function integer count() {
	words = $in.0.word__freq_histogram.getKeys();
	return $in.0.word__freq_histogram.length();
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	$out.0.word = words[idx];
	$out.0.count = long2integer($in.0.word__freq_histogram[words[idx]]);
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Remove Stop Words" guiX="459" guiY="160" id="REMOVE_STOP_WORDS" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

map[string,boolean] stop_map;
string[] stop_words = ["a", "about", "above", "above", "across", "after", "afterwards", "again", "against", 
					"all", "almost", "alone", "along", "already", "also","although","always","am","among", 
					"amongst", "amoungst", "amount",  "an", "and", "another", "any","anyhow","anyone","anything",
					"anyway", "anywhere", "are", "around", "as",  "at", "back","be","became", "because","become","becomes", 
					"becoming", "been", "before", "beforehand", "behind", "being", "below", "beside", "besides", "between", 
					"beyond", "bill", "both", "bottom","but", "by", "call", "can", "cannot", "cant", "co", "con", "could", 
					"couldnt", "cry", "de", "describe", "detail", "do", "done", "down", "due", "during", "each", "eg", "eight", 
					"either", "eleven","else", "elsewhere", "empty", "enough", "etc", "even", "ever", "every", "everyone", "everything", 
					"everywhere", "except", "few", "fifteen", "fify", "fill", "find", "fire", "first", "five", "for", "former", "formerly", 
					"forty", "found", "four", "from", "front", "full", "further", "get", "give", "go", "had", "has", "hasnt", "have", "he", 
					"hence", "her", "here", "hereafter", "hereby", "herein", "hereupon", "hers", "herself", "him", "himself", "his", "how", 
					"however", "hundred", "ie", "if", "in", "inc", "indeed", "interest", "into", "is", "it", "its", "itself", "keep", "last", 
					"latter", "latterly", "least", "less", "ltd", "made", "many", "may", "me", "meanwhile", "might", "mill", "mine", "more", 
					"moreover", "most", "mostly", "move", "much", "must", "my", "myself", "name", "namely", "neither", "never", "nevertheless", 
					"next", "nine", "no", "nobody", "none", "noone", "nor", "not", "nothing", "now", "nowhere", "of", "off", "often", "on", "once", 
					"one", "only", "onto", "or", "other", "others", "otherwise", "our", "ours", "ourselves", "out", "over", "own","part", "per", "perhaps", 
					"please", "put", "rather", "re", "same", "see", "seem", "seemed", "seeming", "seems", "serious", "several", "she", "should", 
					"show", "side", "since", "sincere", "six", "sixty", "so", "some", "somehow", "someone", "something", "sometime", "sometimes", 
					"somewhere", "still", "such", "system", "take", "ten", "than", "that", "the", "their", "them", "themselves", "then", "thence", 
					"there", "thereafter", "thereby", "therefore", "therein", "thereupon", "these", "they", "thickv", "thin", "third", "this", "those", 
					"though", "three", "through", "throughout", "thru", "thus", "to", "together", "too", "top", "toward", "towards", "twelve", "twenty", 
					"two", "un", "under", "until", "up", "upon", "us", "very", "via", "was", "we", "well", "were", "what", "whatever", "when", "whence", 
					"whenever", "where", "whereafter", "whereas", "whereby", "wherein", "whereupon", "wherever", "whether", "which", "while", "whither", 
					"who", "whoever", "whole", "whom", "whose", "why", "will", "with", "within", "without", "would", "yet", "you", "your", "yours", "yourself", 
					"yourselves", "the"];


// Transforms input record into output record.
function integer transform() {
	if ($in.0.word. isBlank() || stop_map.containsKey(lowerCase($in.0.word))){
		return SKIP;
	} 	
	$out.0.word = $in.0.word;
	return ALL;
}

// Called during component initialization.
function boolean init() {
	//initialize stop words map - for faster search
	foreach(string word : stop_words){
		stop_map[word]=true;
	}	
	return true;
}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Sort by frequencies" guiX="991" guiY="160" id="SORT_BY_FREQUENCIES" sortInMemory="true" sortKey="count(d)" type="FAST_SORT"/>
<Node enabled="enabled" guiName="SubgraphInput" guiX="228" guiY="-2" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="100" name="0"/>
<Port guiY="138" name="1"/>
</Node>
<Node enabled="enabled" guiName="SubgraphOutput" guiX="1197" guiY="0" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="178" name="0"/>
<Port guiY="371" name="1"/>
</Node>
<Node enabled="enabled" guiName="Tokenize" guiX="308" guiY="160" id="TOKENIZE" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.

// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.

string[] words;

function integer count() {
	words = $in.0.text.split("(\\s)+");
	return words.length();
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	$out.0.word = replace(upperCase(words[idx]),"[^A-Z]","");
	return ALL;
	
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="false" fromNode="CALCULATE_FREQUENCIES:1" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 1 (results)" persistedImplicitMetadata="__dynamic_metadata_CALCULATE_FREQUENCIES_RunResults" toNode="NORMALIZER:0"/>
<Edge fromNode="DEBUG_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT:0"/>
<Edge debugMode="false" fromNode="NORMALIZER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SORT_BY_FREQUENCIES:0"/>
<Edge debugMode="false" fromNode="REMOVE_STOP_WORDS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="CALCULATE_FREQUENCIES:0"/>
<Edge debugMode="false" fromNode="SORT_BY_FREQUENCIES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge debugMode="false" fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata0" toNode="TOKENIZE:0"/>
<Edge debugMode="true" fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata2" toNode="DEBUG_OUTPUT:0"/>
<Edge debugMode="false" fromNode="TOKENIZE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="REMOVE_STOP_WORDS:0"/>
</Phase>
</Graph>
