<?xml version="1.0" encoding="UTF-8"?>
<Graph author="dpavlis" created="Thu Jul 24 10:15:43 CEST 2014" guiVersion="0.0.0.devel" id="1406195588253" licenseCode="Commercial Devel" licenseType="Commercial" modified="Wed Feb 24 10:58:13 CET 2016" modifiedBy="jansedlacek" name="AddressEnhancerAndGeocoder" nature="subgraph" revision="1.25" showComponentDetails="true">
<Global>
<inputPorts>
<singlePort connected="true" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" name="0"/>
</outputPorts>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="address" recordDelimiter="\n" type="delimited">
<Field name="address" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="addressdata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="address" type="string"/>
<Field name="lattitude" type="string"/>
<Field name="longtitude" type="string"/>
<Field name="street" type="string"/>
<Field name="stree_number" type="string"/>
<Field name="city" type="string"/>
<Field name="postalcode" type="string"/>
<Field name="state" type="string"/>
<Field name="country" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="debugInput1" recordDelimiter="\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="geodata" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="address" type="string"/>
<Field name="lattitude" type="string"/>
<Field name="longtitude" type="string"/>
<Field containerType="list" name="component_long" type="string"/>
<Field containerType="list" name="component_short" type="string"/>
<Field containerType="list" name="component_type" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record eofAsDelimiter="true" name="queryoutput" previewAttachmentCharset="ISO-8859-1" type="delimited">
<Field name="content" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="F9EB81" enabled="true" folded="false" fontSize="medium" height="189" id="Note0" textColor="000000" width="477" x="280" y="34">
<attr name="text"><![CDATA[This subraph uses Google's GEO coding api to parse input address into components, enhance and add geo location - longitude & lattitude.

The number of requests per day is limited to 2,500 (from particular IP address).

More info: [https://developers.google.com/maps/documentation/geocoding]]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node charset="UTF-8" enabled="enabled" guiName="Call GEO API" guiX="280" guiY="230" id="CALL_GEO_API" type="HTTP_CONNECTOR">
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.content = $in.1.content;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {

	$out.0.URL = "https://maps.googleapis.com/maps/api/geocode/json?address=" + escapeUrlFragment($in.0.address);

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugInput="true" enabled="enabled" guiName="DebugInput" guiX="30" guiY="100" id="DATA_GENERATOR0" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.address = "2111 Wilson, Arlington";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node charset="UTF-16" enabled="enabled" fileURL="port:$0.content:discrete" guiName="Parse Response" guiX="453" guiY="355" id="PARSE_RESPONSE" type="JSON_READER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!-- =========================== Context ================================ -->
<!-- Context element sets the "current node" in the JSON tree             --> 
<!-- for subsequent Mapping (or Context) operations.                      -->
<!--                                                                      -->
<!-- Parameters:                                                          -->
<!--   xpath: position in the JSON tree                                   -->
<!--   outPort: (optional) routes mapped data to specified output port    -->
<!--                                                                      -->
<!-- Valid "xpath" for root context:                                      -->
<!--   xpath="/root/object"  if root of JSON structure is an object       -->
<!--   xpath="/root/array"   if root of JSON structure is an array        -->
  
<Context xpath="/root/object/results" outPort="0">
  
  <!-- =========================== Mapping ================================ -->
  <!-- Mapping elements extract data from single JSON name/value pair       -->
  <!-- in the current node or its subtree.                                  --> 
  <!--                                                                      -->
  <!-- Parameters:                                                          -->
  <!--   xpath: extract value of a name/value pair for a specified name     -->
  <!--                                                                      -->
  <Mapping cloverField="address" xpath="formatted_x005faddress"/>
  <Mapping cloverField="lattitude" xpath="geometry/location/lat"/>
  <Mapping cloverField="longtitude" xpath="geometry/location/lng"/>
  <Mapping cloverField="component_long" xpath="address_x005fcomponents/long_x005fname[1]"/>
  <Mapping cloverField="component_short" xpath="address_x005fcomponents/short_x005fname[1]"/>
  <Mapping cloverField="component_type" xpath="address_x005fcomponents/types[1]"/>
  
  
 
</Context>
]]></attr>
</Node>
<Node enabled="enabled" guiName="Post Process" guiX="629" guiY="230" id="POST_PROCESS" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.address = $in.0.address;
	$out.0.lattitude = $in.0.lattitude;
	$out.0.longtitude = $in.0.longtitude;

	integer count=0;
	
	foreach(string comp: $in.0.component_type){
		switch(comp){
			case "street_number":
				$out.0.stree_number = $in.0.component_short[count];
				break;
			case "premise":
				break;
			case "route":
				$out.0.street = $in.0.component_short[count];
				break;
			case "locality":
				$out.0.city = $in.0.component_short[count];
				break;
			case "country":
				$out.0.country = $in.0.component_short[count];
				break;
			case "postal_code":
				$out.0.postalcode = $in.0.component_short[count];
				break;
			case "administrative_area_level_1":
				$out.0.state = $in.0.component_short[count];
				break;
		}
		count++;
	}

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SubgraphInput" guiX="200" guiY="10" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="118" name="0"/>
<Port guiY="188" name="1"/>
</Node>
<Node enabled="enabled" guiName="SubgraphOutput" guiX="800" guiY="10" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="118" name="0"/>
<Port guiY="188" name="1"/>
</Node>
<Node debugOutput="true" enabled="enabled" guiName="Trash" guiX="922" guiY="131" id="TRASH" type="TRASH"/>
<Edge debugMode="false" fromNode="CALL_GEO_API:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="PARSE_RESPONSE:0"/>
<Edge fromNode="DATA_GENERATOR0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT0:0"/>
<Edge debugMode="false" fromNode="PARSE_RESPONSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="POST_PROCESS:0"/>
<Edge debugMode="false" fromNode="POST_PROCESS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="SUBGRAPH_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata1" toNode="CALL_GEO_API:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata4" toNode="TRASH:0"/>
</Phase>
</Graph>
