<?xml version="1.0" encoding="UTF-8"?>
<Graph author="dpavlis" created="Thu Jul 10 09:29:34 CEST 2014" guiVersion="4.0.0.M2" id="1404980749010" licenseType="Evaluation" modified="Fri Jul 18 11:03:02 CEST 2014" modifiedBy="User" name="CloverTweets" nature="subgraph" revision="1.37" showComponentDetails="true">
<Global>
<Metadata id="Metadata1" previewAttachment="${DATATMP_DIR}/Edge6_Tweets.csv" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" label="Edge6_Tweets.csv" name="Edge6_Tweets_csv" previewAttachment="${DATATMP_DIR}/Edge6_Tweets.csv" previewAttachmentCharset="UTF-8" quoteChar="both" quotedStrings="false" skipSourceRows="0" type="delimited">
<Field eofAsDelimiter="true" name="text" type="string"/>
<Field name="date" type="string"/>
<Field name="user" type="string"/>
<Field delimiter="\n" name="id" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="KeywordsLookup" previewAttachmentCharset="ISO-8859-1" recordDelimiter="&amp;" type="delimited">
<Field name="keyword" type="string"/>
<Field name="positive" type="boolean"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="Tweets" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="tweet_text" type="string"/>
<Field name="created" type="string"/>
<Field name="author" type="string"/>
<Field name="id" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="unittestMetadata" recordDelimiter="\n" type="delimited">
<Field name="text" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<LookupTable charset="ISO-8859-1" id="LookupTable0" initialSize="512" key="keyword" metadata="Metadata0" name="KeyWordsLookup" type="simpleLookup">
<attr name="data"><![CDATA[good,true&best,true&splendid,true&awesome,true&love,true&loving,true&top,true&like,true&bad,false&worst,false&hate,false&awful,false&super,true&strong,true&excellent,true&fine,true&tall,true&weak,false&pity,false&terrible,false&horrible,false&problem,false&problems,false&issue,false&issues,false&disappointing,false&shame,false&lucky,true&not,false&fear,false&incredible,true&nice,true&wonderful,true&well,true&misery,false&poor,false&poorly,false&fault,false&faulty,false&joy,false&positive,true&positively,true&joyfully,true&]]></attr>
</LookupTable>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="121" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Comment" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="14" width="493" x="321" y="41">
<attr name="text"><![CDATA[Classify sentiment of input senteces/text. Classifies POSITIVE - out port 0, NEGATIVE - out port 1 and UNDECIDED - out port 2 sentiment.
Classification done based on internal lookup table with positive&negative words. Input text is tokenized to words and each word is checked against the lookup.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node debugInput="true" enabled="enabled" guiName="DataGenerator" guiX="34" guiY="193" id="DATA_GENERATOR" recordsNumber="5" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

string[] texts= ["What a classic final match between #ArgentinaVsGermany seen by the whole world in #WorldCup2014 #BRA thanks again for the wonderful FInal..",
				"Wooooo well done Argentina for winning the World Cup!!! #soproud #3stars #WorldCupFinal  #TweetLikeJadenSmith #Argentina #argentinavsgermany",
				"Not well played Germany #ArgentinavsGermany #Brazil2014 #Brazil2014Final",
				"Misery. Oh the sweet joy seeing the misery of the Argentinians and Argentina fans. #argentinavsgermany #GERARG #... http://t.co/FmkgDrpaVg",
				"Extra time goal gives Germany fourth World Cup http://t.co/uRENEAQ08p #FIFA2014 #ArgentinavsGermany"];

integer count=0;

// Generates output record.
function integer generate() {
	$out.0.text = texts[count++];
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugOutput="true" enabled="enabled" guiName="DebugOutput" guiX="984" guiY="154" id="DEBUG_OUTPUT" type="TRASH"/>
<Node debugOutput="true" enabled="enabled" guiName="DebugOutput" guiX="984" guiY="224" id="DEBUG_OUTPUT1" type="TRASH"/>
<Node debugOutput="true" enabled="enabled" guiName="DebugOutput" guiX="984" guiY="294" id="DEBUG_OUTPUT2" type="TRASH"/>
<Node enabled="enabled" guiName="Reformat" guiX="504" guiY="187" id="REFORMAT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
KeywordsLookup keywordRec;
boolean negate=false;

// Transforms input record into output record.
function integer transform() {
		
	string[] words = $in.0.text.split("(\\s)+");
	foreach(string word:words){
		boolean positive;
		string search=lowerCase(word);
		if (search.in(["no","not"])){
			negate=true;
			continue;
		}
		keywordRec=lookup(KeyWordsLookup).get(search);
		if (keywordRec == null){
			negate=false;
			continue;
		}
		if (negate ? not keywordRec.positive : keywordRec.positive){
			$out.0.*=$in.0.*;
			negate=false;
			return 0;
		}else { //negative
			$out.1.*=$in.0.*;
			negate=false;
			return 1;
		}
	}
	$out.2.*=$in.0.*;
	negate=false;
	return 2; //undecided
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SubgraphInput" guiX="228" guiY="10" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="211" name="0"/>
<Port guiY="242" name="1"/>
</Node>
<Node enabled="enabled" guiName="SubgraphOutput" guiX="870" guiY="10" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="199" name="0"/>
<Port guiY="269" name="1"/>
<Port guiY="312" name="2"/>
<Port guiY="382" name="3"/>
</Node>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT:0"/>
<Edge debugMode="false" fromNode="REFORMAT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge debugMode="false" fromNode="REFORMAT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (in)" outPort="Port 1 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge debugMode="false" fromNode="REFORMAT:2" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 2 (in)" outPort="Port 2 (out)" toNode="SUBGRAPH_OUTPUT:2"/>
<Edge debugMode="false" fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="REFORMAT:0"/>
<Edge debugMode="true" fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEBUG_OUTPUT:0"/>
<Edge debugMode="true" fromNode="SUBGRAPH_OUTPUT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="DEBUG_OUTPUT1:0"/>
<Edge debugMode="true" fromNode="SUBGRAPH_OUTPUT:2" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 2 (out)" toNode="DEBUG_OUTPUT2:0"/>
</Phase>
</Graph>
