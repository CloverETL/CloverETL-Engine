<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Pavel" created="Thu Oct 04 11:41:15 CEST 2012" guiVersion="0.0.0.devel" id="1349357018755" licenseCode="Commercial Devel" licenseType="Commercial" modified="Tue Feb 23 13:43:45 CET 2016" modifiedBy="jansedlacek" name="graphIntroduction" revision="1.49" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachment="${DATAIN_DIR}/delimited/addressbook.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," label="addressbook.csv" name="addressbook_csv" previewAttachment="${DATAIN_DIR}/delimited/addressbook.csv" previewAttachmentCharset="ISO-8859-1" quoteChar="both" quotedStrings="false" recordDelimiter="\n" skipSourceRows="1" type="delimited">
<Field name="firstname" type="string"/>
<Field name="lastname" type="string"/>
<Field name="address" type="string"/>
<Field name="city" type="string"/>
<Field name="zip" type="string"/>
<Field name="email" type="string"/>
<Field name="phone" type="string"/>
<Field eofAsDelimiter="false" name="fax" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="addressbook_short" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="name" type="string"/>
<Field name="city" type="string"/>
<Field name="email" type="string"/>
<Field name="phone" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="DAD8C9" backgroundColorB="96" backgroundColorG="255" backgroundColorR="96" folded="false" fontSize="medium" height="92" id="Note2" textColor="444444" width="1018" x="3" y="5">
<attr name="text"><![CDATA[h3. Welcome to CloverETL
This simple example [reads|element://READ_FILE] a [CSV text file|open://BasicExamples/data-in/addressbook.csv], performs some basic transformations on it, and [outputs|element://WRITE_AS_EXCEL] the result into an Excel spreadsheet.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="F9EB81" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" folded="false" fontSize="medium" height="154" id="Note3" textColor="444444" width="266" x="755" y="102">
<attr name="text"><![CDATA[h4. See results in Navigator
After running a graph, you can see results in project: [BasicExamples|navigator://BasicExamples]

[data-out/addressbook_short.xlsx|open://BasicExamples/data-out/addressbook_short.xlsx]]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" backgroundColorB="192" backgroundColorG="192" backgroundColorR="192" folded="false" fontSize="medium" height="272" id="Note4" textColor="444444" width="644" x="3" y="261">
<attr name="text"><![CDATA[h3. Transformation graph in a nutshell

Data flows from *Readers* (green), through *Transformers* (yellow) into *Writers* (blue). Check the Palette to the right to see what's available.

*Edges* between components have metadata assigned to them - a sort of description for the data. _Double-click_ any edge to see its metadata. Metadata help components to work with the data - readers use it to parse data, transformation components use it for configuring keys, mappings etc. and writers take metadata into accout when formatting the output.

Notice the small bugs on the edges - these indicate that debug mode is on for those edges. You can check [Data Inspector|view://com.cloveretl.gui.debugDataView] view to see what data came through the edge. But, you need to run the transformation first. Warning - always turn debug mode off when moving to production - it's a priceless help for development but kills performance in production.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" fontSize="medium" height="272" id="Note0" textColor="444444" width="368" x="653" y="261">
<attr name="text"><![CDATA[h3. Where to go next?
You can check other examples that show


- [Joining and Aggregating|open://BasicExamples/graph/JoiningAggregating.grf]
- [Accessing a Database|open://BasicExamples/graph/DatabaseAccess.grf]
- [Processing of a JSON files|open://BasicExamples/graph/JSONProcessing.grf]

or start creating your own project using File -> New -> CloverETL Project]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/addressbook.csv" guiName="Read file" guiX="3" guiY="130" id="READ_FILE" quotedStrings="true" type="DATA_READER">
<attr name="guiDescription"><![CDATA[CSV data]]></attr>
</Node>
<Node enabled="enabled" guiName="Reformat" guiX="410" guiY="130" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.name = $in.0.firstname+' '+$in.0.lastname;
	$out.0.city = $in.0.city;
	$out.0.email = $in.0.email;
	$out.0.phone = $in.0.phone;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Select only some fields, concatenate name]]></attr>
</Node>
<Node enabled="enabled" guiName="Sort by city, name" guiX="201" guiY="130" id="SORT_BY_CITY_NAME" sortKey="city(a);lastname(a)" type="FAST_SORT">
<attr name="guiDescription"><![CDATA[Simple ascending sort by two fields]]></attr>
</Node>
<Node enabled="enabled" existingSheetsActions="DO_NOTHING" fileURL="${DATAOUT_DIR}/addressbook_short.xlsx" guiName="Write as Excel" guiX="615" guiY="130" id="WRITE_AS_EXCEL" sheet="Sheet0" templateFileURL="${DATAIN_DIR}/templates/addressbook_template.xlsx" type="SPREADSHEET_WRITER" writeMode="OVERWRITE_SHEET_IN_MEMORY">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<mapping>
    <globalAttributes>
        <orientation>VERTICAL</orientation>
        <step>1</step>
        <writeHeader>false</writeHeader>
    </globalAttributes>
    <defaultSkip>0</defaultSkip>
    <headerGroups>
        <headerGroup skip="0">
            <cloverField>name</cloverField>
            <headerRanges>
                <headerRange begin="A3"/>
            </headerRanges>
        </headerGroup>
        <headerGroup skip="0">
            <cloverField>city</cloverField>
            <headerRanges>
                <headerRange begin="B3"/>
            </headerRanges>
        </headerGroup>
        <headerGroup skip="0">
            <cloverField>email</cloverField>
            <headerRanges>
                <headerRange begin="C3"/>
            </headerRanges>
        </headerGroup>
        <headerGroup skip="0">
            <cloverField>phone</cloverField>
            <headerRanges>
                <headerRange begin="D3"/>
            </headerRanges>
        </headerGroup>
    </headerGroups>
</mapping>
]]></attr>
<attr name="guiDescription"><![CDATA[Use default behavior]]></attr>
</Node>
<Edge debugMode="true" fromNode="READ_FILE:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="SORT_BY_CITY_NAME:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (input)" metadata="Metadata1" outPort="Port 0 (out)" toNode="WRITE_AS_EXCEL:0"/>
<Edge debugMode="false" fromNode="SORT_BY_CITY_NAME:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata0" toNode="REFORMAT1:0"/>
</Phase>
</Graph>
