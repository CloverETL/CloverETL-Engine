<?xml version="1.0" encoding="UTF-8"?>
<Graph author="lucie" created="Wed Jul 28 10:10:37 CEST 2010" guiVersion="4.0.0.M1" id="1280331230946" licenseType="Commercial" modified="Tue Mar 25 14:38:30 CET 2014" modifiedBy="User" name="CreatingFixedMixedCust" revision="1.123" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/customers_fixed.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/customers.fmt" id="Metadata1"/>
<GraphParameters>
<GraphParameter name="sample" value="0.1"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="0" backgroundColorG="196" backgroundColorR="255" enabled="true" folded="false" height="63" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="This graph demonstrates raising an error!" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="758" x="18" y="5">
<attr name="text"><![CDATA[When trying to find an error in your graph you can use various debugging tools...]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="326" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="100 records only" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="160" x="18" y="84">
<attr name="text"><![CDATA[To avoid printing hundreds of useless messages, we are reading just the first 100 records.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="464" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="SimpleCopy" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="168" x="210" y="84">
<attr name="text"><![CDATA[component can - apart from making an identical copy - slightly change the input records.











The structure of I/O metadata remains the same except for a field/record property (a record type here)

Note the difference between input and output 
metadata!]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="230" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Output from transform" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="177" x="605" y="85">
<attr name="text"><![CDATA[A random number of fixed length records selected from the input file randomly.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="229" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="printErr()" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="183" x="399" y="84">
<attr name="text"><![CDATA[Prints out a user defined message to the error output ,  optionaly including the origin of the error message]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="170" id="Note5" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="printLog()" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="183" x="399" y="297">
<attr name="text"><![CDATA[Prints a debug message to the standard logger - best used on the Server!

Moreover, you can specify the log level (debug, info, warn, error, fatal) where the message appears.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="224" id="Note6" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Note on interrupting the graph run" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="312" x="487" y="721">
<attr name="text"><![CDATA[Correct records are written in a file till a bad record appears and the raised error stops the graph executing]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="225" id="Note7" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="File with incorrect records" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="184" x="37" y="721">
<attr name="text"><![CDATA[The file is read, all the records are sent out to the next component]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="225" id="Note8" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Using raiseErr()" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="155" x="265" y="721">
<attr name="text"><![CDATA[Check the data and throw an error that causes the graph to fail]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="150" id="Note9" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Debugging data on edges, Debug properties" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="927" x="18" y="553">
<attr name="text"><![CDATA[You can inspect data flowing through edges. Just right click the edge you want to inspect and select Enable Debug - you will see a small bug icon. After running the graph, you can right-click the debugged edge and use View data to see the actual data that went through the edge. Moreover, you can set filters on both the edge (keeping just the data that correspond with the filter) or on View data - just filter your view on the stored debug data

We have already switched some of the edges to Debug mode for you - look for the bug icon.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="0" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="265" id="Note10" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="THIS GRAPH IS DESIGNED TO FAIL" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="294" x="795" y="5">
<attr name="text"><![CDATA[Demonstrates trying to find a fault in your graph, and how you can use various debugging tools to output error messages.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region1.csv" guiName="read delimited" guiX="31" guiY="246" id="DATA_READER0" numRecords="100" skipFirstLine="true" type="DATA_READER">
<attr name="guiDescription"><![CDATA[100 records only]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATATMP_DIR}/CustomersFixed.txt" guiName="random records" guiX="624" guiY="191" id="DATA_WRITER0" outputFieldNames="false" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Output from transform]]></attr>
</Node>
<Node enabled="enabled" guiName="print messages" guiX="426" guiY="209" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
 integer counter =0;
// Transforms input record into output record.
function integer transform() {

	counter++;
	boolean location = false;
	double random_number = random();
	printErr(counter + ": random() function returns random_number = " + random_number + " representing customerID = " + $customerID, location);
	if (random_number < ${sample}) {
	printLog(info,"You get record number " + counter);
		$0.* =$0.*;
		return 0;
// random records are sent to output port 0
	}
	else $1.*=$0.*;
	return 1;
// the other records are sent to output port 1	
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="convert to fixed" guiX="219" guiY="213" id="SIMPLE_COPY0" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="the other records" guiX="624" guiY="348" id="TRASH0" type="TRASH"/>
<Edge debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="SIMPLE_COPY0:0"/>
<Edge debugFilterExpression="$0.gender == &quot;M&quot;" debugLastRecords="false" debugMaxRecords="25" debugMode="false" debugSampleData="false" fromNode="REFORMAT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
<Edge debugFilterExpression="$0.income &lt; 30000 AND $0.gender=='F'" debugLastRecords="true" debugMaxRecords="100" debugMode="true" debugSampleData="true" fromNode="REFORMAT0:1" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="TRASH0:0"/>
<Edge debugFilterExpression="$0.age&gt; 25 AND $0.age&lt; 35 " debugLastRecords="false" debugMaxRecords="33" debugMode="true" debugSampleData="true" fromNode="SIMPLE_COPY0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
</Phase>
<Phase number="1">
<Node dataPolicy="lenient" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region_BAD.csv" guiName="read bad records" guiX="55" guiY="827" id="DATA_READER1" trim="false" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Reads file with incorrect records]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATATMP_DIR}/CustomersFixedCorrect.txt" guiName="incomplete file" guiX="579" guiY="827" id="DATA_WRITER1" outputFieldNames="true" type="DATA_WRITER">
<attr name="guiDescription"><![CDATA[Writes correct records to a file]]></attr>
</Node>
<Node enabled="enabled" guiName="raise error" guiX="278" guiY="827" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
integer count=0;
// Transforms input record into output record.
function integer transform() {
	count++;
	$0.customerID = $0.customerid;
	$0.firstname = $0.firstname;
	$0.lastname = $0.lastname;
	$0.address1 = $0.address1;
	$0.address2 = $0.address2;
	$0.city = $0.city;
	$0.state = $0.state;
	$0.zip = $0.zip;
	$0.country = $0.country;
	$0.region = $0.region;
	$0.email = $0.email;
	$0.phone = $0.phone;
	$0.creditcardtype = $0.creditcardtype;
	$0.creditcard = $0.creditcard;
	$0.creditcardexpiration = $0.creditcardexpiration;
	$0.username = $0.username;
	$0.password = $0.password;
	$0.age = $0.age;
	$0.income = $0.income;
	if (($0.gender != "M") && ($0.gender != "F"))
	raiseError($0.gender + " is not a valid gender. Go to record No. " + count + " and replace with 'M' or 'F'.");
	else $0.gender = $0.gender;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="DATA_READER1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="REFORMAT1:0"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DATA_WRITER1:0"/>
</Phase>
</Graph>
