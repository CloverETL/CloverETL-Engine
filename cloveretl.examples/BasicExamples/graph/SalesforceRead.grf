<?xml version="1.0" encoding="UTF-8"?>
<Graph author="User" created="Mon Aug 01 17:12:08 CEST 2016" guiVersion="4.3.0" id="1470069189046" licenseCode="CLP1DJAVLI21013179BY" name="best-accounts" showComponentDetails="true">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="Account" recordDelimiter="\n" type="delimited">
<Field delimiter="," name="Name" type="string"/>
<Field eofAsDelimiter="true" name="Id" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="AccountStats" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="ID" type="string"/>
<Field name="Name" type="string"/>
<Field name="WonAmount" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="AccountWithOpportunity" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="AccountID" type="string"/>
<Field delimiter="," name="AccountName" type="string"/>
<Field delimiter="," name="OpportunityName" type="string"/>
<Field delimiter="," length="18" name="Amount" scale="2" trim="true" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="Opportunity" recordDelimiter="\n" type="delimited">
<Field delimiter="," name="Name" type="string"/>
<Field delimiter="," length="18" name="Amount" scale="2" trim="true" type="decimal"/>
<Field delimiter="," name="AccountId" type="string"/>
<Field eofAsDelimiter="true" name="IsWon" trim="true" type="boolean"/>
</Record>
</Metadata>
<Connection config="${CONN_DIR}/My Salesforce.cfg" id="MY_SALESFORCE" type="SALESFORCE"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="DAD8C9" folded="false" fontSize="medium" height="122" id="Note2" textColor="444444" width="919" x="531" y="27">
<attr name="text"><![CDATA[h3. Reading from Salesforce
This example demonstrates reading from Salesforce using the SalesforceBulkReader components. We read [Opportunities|element://OPPORTUNITIES] and [Accounts|element://ACCOUNTS] to get the information about Accounts with the highest total value of won Opportunities.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="228" id="Note0" textColor="444444" width="256" x="531" y="295">
<attr name="text"><![CDATA[h3. Reading from Salesforce

The SalesforceBulkReader component is used to read from Salesforce. 

It uses a Salesforce connection for credentials and connection configuration.

A SOQL query defines what data are returned and an output mapping maps them to output metadata.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="162" id="Note1" textColor="444444" width="218" x="1232" y="182">
<attr name="text"><![CDATA[h3. Joining

By joining Opportunities with Accounts on the Account IDs we get the data necessary to calculate the best accounts.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="DEF4AB" folded="false" fontSize="medium" height="222" id="Note7" textColor="444444" width="486" x="24" y="27">
<attr name="text"><![CDATA[h3. Connect to Salesforce

This graph needs a connection to Salesforce. If you don't have a Salesforce username, password and security token, follow these steps:


# create an account in [Salesforce|https://login.salesforce.com/]
# get your security token (in Salesforce go to "Your Account Name" > My Settings > Personal > Reset My Security Token) - this will send the token to your email
# enter your username, password and security token in the [Salesforce connection|element://MY_SALESFORCE]]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Accounts" guiX="831" guiY="295" id="ACCOUNTS" sfConnection="MY_SALESFORCE" type="SALESFORCE_BULK_READER">
<attr name="soqlQuery"><![CDATA[SELECT Name,Id From Account]]></attr>
</Node>
<Node existingSheetsActions="DO_NOTHING" fileURL="${DATAOUT_DIR}/salesforce/best_accounts.xlsx" guiName="Best accounts" guiX="1322" guiY="448" id="BEST_ACCOUNTS" makeDirs="true" type="SPREADSHEET_WRITER" writeMode="CREATE_FILE_IN_MEMORY"/>
<Node guiName="ExtHashJoin" guiX="1068" guiY="182" id="EXT_HASH_JOIN" joinKey="$AccountId=$Id" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.AccountID = $in.1.Id;
	$out.0.AccountName = $in.1.Name;
	$out.0.OpportunityName = $in.0.Name;
	$out.0.Amount = $in.0.Amount;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Opportunities" guiX="531" guiY="182" id="OPPORTUNITIES" sfConnection="MY_SALESFORCE" type="SALESFORCE_BULK_READER">
<attr name="soqlQuery"><![CDATA[SELECT Name,Amount,AccountId,IsWon From Opportunity]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.Name = $in.0.Name;
	$out.0.Amount = $in.0.Amount;
	$out.0.AccountId = $in.0.AccountId;
	$out.0.IsWon = $in.0.IsWon;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Sort by amounts" guiX="1074" guiY="448" id="SORT_BY_AMOUNTS" sortKey="WonAmount(d)" type="EXT_SORT"/>
<Node aggregateKey="AccountID" guiName="Sum amounts" guiX="831" guiY="448" id="SUM_AMOUNTS" mapping="$ID:=$AccountID;$Name:=first($AccountName);$WonAmount:=sum($Amount);" sorted="false" type="AGGREGATE"/>
<Node guiName="Won" guiX="831" guiY="182" id="WON" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.IsWon == true]]></attr>
</Node>
<Edge debugMode="true" fromNode="ACCOUNTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN:1"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN:0" guiBendpoints="773:79|773:285|370:285|370:345" guiLocks="1212|809|405" guiRouter="Manual" id="Edge5" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUM_AMOUNTS:0"/>
<Edge debugMode="true" fromNode="OPPORTUNITIES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="WON:0"/>
<Edge debugMode="true" fromNode="SORT_BY_AMOUNTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (input)" outPort="Port 0 (out)" persistedImplicitMetadata="Metadata3" toNode="BEST_ACCOUNTS:0"/>
<Edge debugMode="true" fromNode="SUM_AMOUNTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="SORT_BY_AMOUNTS:0"/>
<Edge debugMode="true" fromNode="WON:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (driver)" outPort="Port 0 (accepted)" persistedImplicitMetadata="Metadata1" toNode="EXT_HASH_JOIN:0"/>
</Phase>
</Graph>
