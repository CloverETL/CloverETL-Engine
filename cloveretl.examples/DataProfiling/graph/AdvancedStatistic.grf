<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Dec 09 11:23:30 GMT+01:00 2009" guiVersion="0.0.0.devel" id="1260358279137" licenseCode="Commercial Devel" licenseType="Evaluation Devel" modified="Mon Oct 10 12:43:04 CEST 2011" modifiedBy="avackova" name="BasicStatistic1" revision="1.292" showComponentDetails="true">
<Global>
<Metadata fileURL="${metadata}" id="Metadata0"/>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="data" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="type" type="string"/>
<Field name="valueBoolean" type="boolean"/>
<Field name="valueByte" type="byte"/>
<Field name="valueDate" type="date"/>
<Field name="valueNumber" type="number"/>
<Field name="valueString" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="dataHistogram" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="type" type="string"/>
<Field name="valueBoolean" type="boolean"/>
<Field name="valueByte" type="byte"/>
<Field name="valueDate" type="date"/>
<Field name="valueNumber" type="number"/>
<Field name="valueString" type="string"/>
<Field name="count" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="dataHistogramOutput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="type" type="string"/>
<Field name="value" type="string"/>
<Field name="count" type="integer"/>
<Field name="countGraphic" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="dataProfile" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="type" type="string"/>
<Field name="count" type="long"/>
<Field name="countNotNull" type="long"/>
<Field name="countUnique" type="long"/>
<Field name="minDate" type="date"/>
<Field name="minNumber" type="number"/>
<Field name="minString" type="string"/>
<Field name="maxDate" type="date"/>
<Field name="maxNumber" type="number"/>
<Field name="maxString" type="string"/>
<Field name="avgNumber" type="number"/>
<Field name="medianDate" type="date"/>
<Field name="medianNumber" type="number"/>
<Field name="medianString" type="string"/>
<Field name="modusBoolean" type="boolean"/>
<Field name="modusByte" type="byte"/>
<Field name="modusDate" type="date"/>
<Field name="modusNumber" type="number"/>
<Field name="modusString" type="string"/>
<Field name="updated" type="boolean"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="dataProfileOutput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="type" type="string"/>
<Field name="count" type="long"/>
<Field name="countNotNull" type="long"/>
<Field name="countUnique" type="long"/>
<Field name="min" type="string"/>
<Field name="max" type="string"/>
<Field name="avgNumber" type="number"/>
<Field name="median" type="string"/>
<Field name="modus" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter name="HISTOGRAM_THRESHOLD" value="25"/>
<GraphParameter name="NOT_STATISTIC_FIELDS"/>
<GraphParameter name="STATISTIC_FIELDS"/>
<GraphParameter name="output_file" value="${DATAOUT_DIR}/histogram.html"/>
<GraphParameterFile fileURL="parameters.prm"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="240" backgroundColorG="150" backgroundColorR="222" folded="false" height="259" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Advanced statistic - description" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="363" x="-127" y="131">
<attr name="text"><![CDATA[This graph finds statistic for input data file:
- number of records in data file
- number of not null values for each data field
- number of unique values for each data field
- minimum value
- maximum value
- average value for numeric fields 
- median value
- modus value
It also finds frequency counts for fields with not many (< ${HISTOGRAM_THRESHOLD}) unique values.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="192" backgroundColorG="255" backgroundColorR="255" folded="false" height="361" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Advanced statistic - parameters" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="625" x="737" y="-44">
<attr name="text"><![CDATA[DataProfiling project contains (as usuall CloverDesigner project) workspace.prm file, that stores project structure. It contains also parameters.prm file, which defines parameters shared by BasicStatistic and AdvancedStatistic graphs:
DATE_FORMAT - format for parsing dates in final output
READER_TYPE - both graphs are prepared for reading various types of data. This example is configured for reading data from all sheets (sheetName=*) of xls file. The project contains the flat file also; to read this file, change READER_TYPE to DATA_READER. For some other Readers it is necessry to set additional attributes, eg. sqlQuery and dbConnection for DBInputTable.
WRITER_TYPE - both graphs are prepared for writing results in various formats. This example is configured, to create the data statistic as simple html page. Changing WRITER_TYPE to XLS_WRITER results in creating xls file. To write statistic to flate file, change WRITER_TYPE to DATA_WRITER, for printing it out to console set it to TRASH.
charset - data encoding - all Readers and Writers in both graphs use the same charset
input_file - data file for analysis (attached two example files: ${DATAIN_DIR}/ORDERS.xls and ${DATAIN_DIR}/employees.list.dat)
metadata - shared metadata corresponding to input file (for above example files use ${META_DIR}/orders.fmt and ${META_DIR}/employees.fmt respectively)
This graph has its own parameters also:
HISTOGRAM_THRESHOLD - only fields with number of unique values smaller than this threshold are processed in the Pahse 1 (creating frequency counts)
STATISTIC_FIELDS - filter for creating statistic for selected fields only. If empty, statistic is created for all fields except fields listed in NOT_STATISTIC_FIELDS parameter. Field names can be separated by :;| {colon, semicolon, pipe}
NOT_STATISTIC_FIELDS - filter for excluding fields from statistic. If empty, statistic is created for fields listed in STATISTIC_FIELDS parameter or for all fields. Field names can be separated by :;| {colon, semicolon, pipe}
output_file - output file for statistic]]></attr>
</Note>
<Note alignment="1" backgroundColorB="192" backgroundColorG="255" backgroundColorR="255" folded="false" height="202" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Creating statistic" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="160" x="321" y="128">
<attr name="text"><![CDATA[Aggregate components, for each group of records (defined by original field name), calculate number of records in data file, number of not null and unique values, minimum, maximum, median and modus value. For numeric fields average value is calculated also.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="192" backgroundColorG="255" backgroundColorR="255" folded="false" height="154" id="Note5" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Statistic unificaton" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="275" x="737" y="433">
<attr name="text"><![CDATA[Simple Gather and Reformat components gather all statistic to one stream and convert various data types to their string representation.
Reformat also stores fields for further processing in the graph dictionary . There will be processed only fields, with number of unique values smaller the HISTOGRAM_THRESHOLD in the phase number 1.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="192" backgroundColorG="255" backgroundColorR="255" folded="false" height="146" id="Note8" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Creating &#10;histograms" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="174" x="288" y="671">
<attr name="text"><![CDATA[Aggregate components count frequencies for fields, that have been choosen on the end of phase 0.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="192" backgroundColorG="255" backgroundColorR="255" folded="false" height="88" id="Note9" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Histogram unificaton" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="275" x="737" y="628">
<attr name="text"><![CDATA[Simple Gather and Reformat components gather all histograms to one stream and convert various data types to their string representation.]]></attr>
</Note>
<Dictionary>
<Entry input="false" name="histFields" output="false" type="string"/>
<Entry input="false" name="count" output="false" type="string"/>
</Dictionary>
</Global>
<Phase number="0">
<Node aggregateKey="fieldName" enabled="enabled" equalNULL="true" guiName="Boolean Aggregate" guiX="522" guiY="22" id="AGGREGATE0" mapping="$fieldName:=$fieldName;$type:=first($type);$count:=count();$countNotNull:=countnonnull($valueBoolean);$countUnique:=countunique($valueBoolean);$modusBoolean:=modus($valueBoolean);" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName" enabled="enabled" equalNULL="true" guiName="Byte Aggregate" guiX="522" guiY="276" id="AGGREGATE1" mapping="$fieldName:=$fieldName;$type:=first($type);$count:=count();$countNotNull:=countnonnull($valueByte);$countUnique:=countunique($valueByte);$modusByte:=modus($valueByte);" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName" enabled="enabled" equalNULL="true" guiName="Date Aggregate" guiX="522" guiY="102" id="AGGREGATE2" mapping="$fieldName:=$fieldName;$type:=first($type);$count:=count();$countNotNull:=countnonnull($valueDate);$countUnique:=countunique($valueDate);$minDate:=min($valueDate);$maxDate:=max($valueDate);$medianDate:=median($valueDate);$modusDate:=modus($valueDate);" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName" enabled="enabled" equalNULL="true" guiName="Number Aggregate" guiX="522" guiY="361" id="AGGREGATE3" mapping="$fieldName:=$fieldName;$type:=first($type);$count:=count();$countNotNull:=countnonnull($valueNumber);$countUnique:=countunique($valueNumber);$minNumber:=min($valueNumber);$maxNumber:=max($valueNumber);$avgNumber:=avg($valueNumber);$medianNumber:=median($valueNumber);$modusNumber:=modus($valueNumber);" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName" enabled="enabled" equalNULL="true" guiName="String Aggregate" guiX="522" guiY="184" id="AGGREGATE4" mapping="$fieldName:=$fieldName;$type:=first($type);$count:=count();$countNotNull:=countnonnull($valueString);$countUnique:=countunique($valueString);$minString:=min($valueString);$maxString:=max($valueString);$medianString:=median($valueString);$modusString:=modus($valueString);" sorted="false" type="AGGREGATE"/>
<Node enabled="enabled" guiName="DataReader" guiX="-132" guiY="22" id="DATA_READER1" type="${READER_TYPE}">
<attr name="fileURL"><![CDATA[${input_file}]]></attr>
<attr name="startRow"><![CDATA[2]]></attr>
<attr name="sheetName"><![CDATA[*]]></attr>
<attr name="charset"><![CDATA[${charset}]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtSort" guiX="1041" guiY="329" id="EXT_SORT1" sortKey="fieldName(a)" type="EXT_SORT"/>
<Node enabled="enabled" errorLog="${DATATMP_DIR}/stat_skipped.log" guiName="Normalizer" guiX="13" guiY="22" id="NORMALIZER0" normalizeURL="${TRANS_DIR}/DataNormalizer1.java" type="NORMALIZER">
<attr name="guiDescription"><![CDATA[ Creates "normalized" records from each input record. Such "normalized" record contains information about each input field: its original name, type and value. Depending on the type only one output field's value is fulfilled.
This components serves also as a filter if STATISTIC_FIELDS or NOT_STATISTIC_FIELDS parameter is not empty.]]></attr>
</Node>
<Node enabled="enabled" guiName="TypePartition" guiX="342" guiY="22" id="PARTITION0" partitionKey="type" type="PARTITION">
<attr name="partitionSource"><![CDATA[//#CTL2
// This transformation partitions input records into multiple output ports.
import '${TRANS_DIR}/types.ctl';

map[string, integer] portMap; 

// Returns the number of the output port where the input record will be sent.
function integer getOutputPort() {
	return portMap[$type];
}

// Called during component initialization, partitionCount is the number of output ports.
 function void init(integer partitionCount) {
 	portMap[DATE] = 1;
 	portMap[DECIMAL] = 4;
  	portMap[INTEGER] = 4;
  	portMap[LONG] = 4;
  	portMap[NUMBER] = 4;
  	portMap[BOOLEAN] = 0;
  	portMap[BYTE] = 3;
  	portMap[CBYTE] = 3;
  	portMap[STRING] = 2;
 }
]]></attr>
<attr name="guiDescription"><![CDATA[Partitions data depending on the value type, so Aggregate components work with not empty records.]]></attr>
</Node>
<Node enabled="enabled" guiName="Simplification" guiX="882" guiY="329" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import '${TRANS_DIR}/types.ctl';

string histFields = "";
integer count = -1;

function string modus(string type){
	if (type == DATE) {
		return date2str($modusDate,'${DATE_FORMAT}');
	}
	if (type == DECIMAL) {
		return num2str($modusNumber);
	}
	if (type == INTEGER) {
		return num2str($modusNumber);
	}
	if (type == LONG) {
		return num2str($modusNumber);
	}
	if (type == NUMBER) {
		return num2str($modusNumber);
	}
	if (type == BOOLEAN) {
		return toString($modusBoolean);
	}
	if (type == BYTE) {
		return byte2str($modusByte, null);
	}
	if (type == CBYTE) {
		return byte2str($modusByte, null);
	}
	if (type == STRING) {
		return $modusString;
	}
	return null;
}

// Transforms input record into output record.
function integer transform() {
	if (count == -1) {//remember number of records, always the same
		count = long2integer($count); 
	}
	if ($countUnique < ${HISTOGRAM_THRESHOLD}) {
		histFields = concat(histFields, $fieldName, ';');
	}
	$fieldName = $fieldName;
	$type = $type;
	$count = count;
	$countNotNull = $countNotNull;
	$countUnique = $countUnique;
	$min = iif($type == STRING, $minString, 
				iif($type == DATE, date2str($minDate,'${DATE_FORMAT}'), 
								   num2str($minNumber)));
	$max = iif($type == STRING, $maxString, 
				iif($type == DATE, date2str($maxDate,'${DATE_FORMAT}'), 
								   num2str($maxNumber)));
	$avgNumber = $avgNumber;
	$median = iif($type == STRING, $medianString, 
				iif($type == DATE, date2str($medianDate,'${DATE_FORMAT}'), 
								   num2str($medianNumber)));
	$modus = modus($type);
	return ALL;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
 function void finished() {
 	dictionary.histFields = histFields;
 	dictionary.count = num2str(count);
 }
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="168" guiY="22" id="SIMPLE_COPY0" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleGather" guiX="737" guiY="329" id="SIMPLE_GATHER0" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="DataWriter" guiX="1204" guiY="329" id="STRUCTURE_WRITER0" type="${WRITER_TYPE}">
<attr name="sheetName"><![CDATA[Statistic]]></attr>
<attr name="debugPrint"><![CDATA[true]]></attr>
<attr name="charset"><![CDATA[${charset}]]></attr>
<attr name="guiDescription"><![CDATA[Data statistic can be stored in an output file of any type or be printed out to console. This example is configured to create a simple html page, that contains tables with statistic. Changing WRITER_TYPE to XLS_WRITER results in creating xls file with data statistic in "Statistic" sheet (the next phase will add the next sheet to the file). To print out statistic on the console set WRITER_TYPE to TRASH.]]></attr>
<attr name="fileURL"><![CDATA[${output_file}]]></attr>
<attr name="header"><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=ISO-8859-1">
	<TITLE>Advanced data statistic for ${input_file}</TITLE>
</HEAD>
<BODY LANG="en-GB">
<H1>Advanced data statistic and histograms for ${input_file}</H1>
<H2>Statistic</H2>
<TABLE BORDER=1 BORDERCOLOR="#000000">
	<TR>
		<TH>
			Field name
		</TH>
		<TH>
			Field type
		</TH>
		<TH>
			min
		</TH>
		<TH>
			max
		</TH>
		<TH>
			average number
		</TH>
		<TH>
			count
		</TH>
		<TH>
			count not null
		</TH>
		<TH>
			count unique
		</TH>
		<TH>
			median
		</TH>
		<TH>
			modus
		</TH>
	</TR>]]></attr>
<attr name="namesRow"><![CDATA[1]]></attr>
<attr name="footer"><![CDATA[</TABLE>
]]></attr>
<attr name="mask"><![CDATA[	<TR>
		<TD>
			$fieldName
		</TD>
		<TD ALIGN=CENTER>
			$type
		</TD>
		<TD>
			$min
		</TD>
		<TD>
			$max
		</TD>
		<TD>
			$avgNumber
		</TD>
		<TD >
			$count
		</TD>
		<TD >
			$countNotNull
		</TD>
		<TD >
			$countUnique
		</TD>
		<TD >
			$median
		</TD>
		<TD >
			$modus
		</TD>
	</TR>]]></attr>
</Node>
<Edge fromNode="AGGREGATE0:0" guiBendpoints="730:42|730:348" guiLocks="730|null|null" guiRouter="Manual" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_GATHER0:0"/>
<Edge fromNode="AGGREGATE1:0" guiBendpoints="699:296|699:384" guiLocks="699|null|null" guiRouter="Manual" id="Edge9" inPort="Port 3 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_GATHER0:3"/>
<Edge fromNode="AGGREGATE2:0" guiBendpoints="720:122|720:360" guiLocks="720|685|null" guiRouter="Manual" id="Edge10" inPort="Port 1 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_GATHER0:1"/>
<Edge fromNode="AGGREGATE3:0" guiBendpoints="695:381|695:396" guiLocks="695|null|null" guiRouter="Manual" id="Edge11" inPort="Port 4 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_GATHER0:4"/>
<Edge fromNode="AGGREGATE4:0" guiBendpoints="709:204|709:372" guiLocks="709|null|null" guiRouter="Manual" id="Edge12" inPort="Port 2 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SIMPLE_GATHER0:2"/>
<Edge fromNode="DATA_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="NORMALIZER0:0"/>
<Edge fromNode="EXT_SORT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="STRUCTURE_WRITER0:0"/>
<Edge fromNode="NORMALIZER0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="SIMPLE_COPY0:0"/>
<Edge fromNode="PARTITION0:0" guiBendpoints="514:34|514:42" guiLocks="514|null|null" guiRouter="Manual" id="Edge15" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="AGGREGATE0:0"/>
<Edge fromNode="PARTITION0:1" guiBendpoints="510:46|510:122" guiLocks="510|null|null" guiRouter="Manual" id="Edge17" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="AGGREGATE2:0"/>
<Edge fromNode="PARTITION0:2" guiBendpoints="503:58|503:204" guiLocks="503|null|null" guiRouter="Manual" id="Edge19" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 2 (out)" toNode="AGGREGATE4:0"/>
<Edge fromNode="PARTITION0:3" guiBendpoints="493:70|493:296" guiLocks="493|null|null" guiRouter="Manual" id="Edge16" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 3 (out)" toNode="AGGREGATE1:0"/>
<Edge fromNode="PARTITION0:4" guiBendpoints="485:82|485:381" guiLocks="485|509|null" guiRouter="Manual" id="Edge24" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 4 (out)" toNode="AGGREGATE3:0"/>
<Edge debugMode="false" fromNode="REFORMAT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="EXT_SORT1:0"/>
<Edge fromNode="SIMPLE_COPY0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge25" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="PARTITION0:0"/>
<Edge debugMode="false" fromNode="SIMPLE_COPY0:1" guiBendpoints="" guiRouter="Manhattan" id="Edge26" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="REFORMAT1:0"/>
<Edge fromNode="SIMPLE_GATHER0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
</Phase>
<Phase number="1">
<Node aggregateKey="fieldName;valueBoolean" enabled="enabled" equalNULL="true" guiName="Boolean Aggregate" guiX="522" guiY="451" id="AGGREGATE10" mapping="$fieldName:=$fieldName;$type:=first($type);$valueBoolean:=$valueBoolean;$count:=count();" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName;valueString" enabled="enabled" equalNULL="true" guiName="String Aggregate" guiX="522" guiY="592" id="AGGREGATE6" mapping="$fieldName:=$fieldName;$type:=first($type);$valueString:=$valueString;$count:=count();" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName;valueNumber" enabled="enabled" equalNULL="true" guiName="Number Aggregate" guiX="522" guiY="751" id="AGGREGATE7" mapping="$fieldName:=$fieldName;$type:=first($type);$valueNumber:=$valueNumber;$count:=count();" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName;valueDate" enabled="enabled" equalNULL="true" guiName="Date Aggregate" guiX="522" guiY="523" id="AGGREGATE8" mapping="$fieldName:=$fieldName;$type:=first($type);$valueDate:=$valueDate;$count:=count();" sorted="false" type="AGGREGATE"/>
<Node aggregateKey="fieldName;valueByte" enabled="enabled" equalNULL="true" guiName="Byte Aggregate" guiX="522" guiY="668" id="AGGREGATE9" mapping="$fieldName:=$fieldName;$type:=first($type);$valueByte:=$valueByte;$count:=count();" sorted="false" type="AGGREGATE"/>
<Node enabled="enabled" guiName="ExtSort" guiX="1041" guiY="733" id="EXT_SORT0" sortKey="fieldName(a);value(a)" type="EXT_SORT"/>
<Node enabled="enabled" errorLog="${DATATMP_DIR}/skipped.log" guiName="Histogram filter" guiX="287" guiY="559" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import '${TRANS_DIR}/types.ctl';

string[] histFields = null;
boolean initialized = false;
map[string, integer] portMap;
integer port;

function void initInternal(){
	histFields = split(dictionary.histFields,';');
	initialized = true;
}

function void map0(){
	$0.*= $0.*;
}

function void map1(){
	$1.*= $0.*;
}

function void map2(){
	$2.*= $0.*;
}

function void map3(){
	$3.*= $0.*;
}

function void map4(){
	$4.*= $0.*;
}

// Transforms input record into output record.
function integer transform() {
	if (!initialized) {
		initInternal();
	}
	if (!(containsValue(histFields, $0.fieldName))) return SKIP;
	port = portMap[$type];
	switch (port) {
		case 0:map0();
		case 1:map1();
		case 2:map2();
		case 3:map3();
		case 4:map4();
	}
	return port;
}

// Called to return a user-defined error message when an error occurs.
 function string getMessage() {
 	return "Field " + $fieldName + "is not among histogram fields";
 }

// Called during component initialization.
 function void init() {
  	portMap[DATE] = 1;
 	portMap[DECIMAL] = 4;
  	portMap[INTEGER] = 4;
  	portMap[LONG] = 4;
  	portMap[NUMBER] = 4;
  	portMap[BOOLEAN] = 0;
  	portMap[BYTE] = 3;
  	portMap[CBYTE] = 3;
  	portMap[STRING] = 2;
 }

// Called after the component finishes.
// function finished() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Filters values, for which frequency counts will be calculated. It also serves as a type partition like in Phase 0.]]></attr>
</Node>
<Node enabled="enabled" guiName="Simplification" guiX="882" guiY="733" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import '${TRANS_DIR}/types.ctl';

string histFields = "";
string max="####################################################################################################";
string fillerChar = "\u00b7";
string filler ='';
integer l = length(max);
boolean initialized = false;
long countAll;
integer percentLenght;

function string to_string(string type){
	if (type == DATE) {
		return iif(isnull($valueDate), '', date2str($valueDate,'${DATE_FORMAT}'));
	}
	if (type == DECIMAL) {
		return iif(isnull($valueNumber), '', num2str($valueNumber));
	}
	if (type == INTEGER) {
		return iif(isnull($valueNumber), '', num2str($valueNumber));
	}
	if (type == LONG) {
		return iif(isnull($valueNumber), '', num2str($valueNumber));
	}
	if (type == NUMBER) {
		return iif(isnull($valueNumber), '', num2str($valueNumber));
	}
	if (type == BOOLEAN) {
		return toString($valueBoolean);
	}
	if (type == BYTE) {
		return byte2str($valueByte, null);
	}
	if (type == CBYTE) {
		return byte2str($valueByte, null);
	}
	if (type == STRING) {
		return $valueString;
	}
	return null;
}

function void initInternal(){
	integer i;	
	for (i;i<l;i++){
		filler = concat(filler,fillerChar);
	}
	countAll = str2long(dictionary.count);
	initialized = true;
}

// Transforms input record into output record.
function integer transform() {
	if (!initialized){
		initInternal();
	}
	percentLenght = long2integer($count*l/countAll);
	$fieldName = $fieldName;
	$type = $type;
	$count = $count;
	$value = to_string($type);
	$countGraphic = concat(substring(max,0,percentLenght), substring(filler,percentLenght,l-percentLenght));
	return ALL;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() { }
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleGather" guiX="737" guiY="733" id="SIMPLE_GATHER1" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="DataWriter" guiX="1187" guiY="733" id="STRUCTURE_WRITER1" type="${WRITER_TYPE}">
<attr name="sheetName"><![CDATA[Histogram]]></attr>
<attr name="debugPrint"><![CDATA[true]]></attr>
<attr name="append"><![CDATA[true]]></attr>
<attr name="guiDescription"><![CDATA[Appends histograms to statistic created in the previous phase. 
As a STRUCTURE_WRITER it creates the table with histograms and closes html page. If changed to XLS_WRITER, it creates "Histogram" sheet and inserts it to existing xls file.]]></attr>
<attr name="charset"><![CDATA[${charset}]]></attr>
<attr name="fileURL"><![CDATA[${output_file}]]></attr>
<attr name="header"><![CDATA[
<H2>Histograms</H2>
<TABLE BORDER=1 BORDERCOLOR="#000000">
	<TR>
		<TH>
			Field name
		</TH>
		<TH>
			Field type
		</TH>
		<TH>
			value
		</TH>
		<TH>
			count
		</TH>
		<TH>
			count %
		</TH>
	</TR>]]></attr>
<attr name="namesRow"><![CDATA[1]]></attr>
<attr name="footer"><![CDATA[</TABLE>
</BODY>
</HTML>]]></attr>
<attr name="mask"><![CDATA[	<TR>
		<TD>
			$fieldName
		</TD>
		<TD ALIGN=CENTER>
			$type
		</TD>
		<TD>
			$value
		</TD>
		<TD>
			$count
		</TD>
		<TD ><font face="monospace">
			$countGraphic
			</font>
		</TD>
	</TR>]]></attr>
</Node>
<Edge fromNode="AGGREGATE10:0" guiBendpoints="725:471|725:743" guiLocks="725|null|null" guiRouter="Manual" id="Edge34" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:0"/>
<Edge fromNode="AGGREGATE6:0" guiBendpoints="701:612|701:767" guiLocks="701|null|null" guiRouter="Manual" id="Edge36" inPort="Port 2 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:2"/>
<Edge fromNode="AGGREGATE7:0" guiBendpoints="" guiRouter="Manhattan" id="Edge38" inPort="Port 4 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:4"/>
<Edge fromNode="AGGREGATE8:0" guiBendpoints="711:543|711:755" guiLocks="711|null|null" guiRouter="Manual" id="Edge35" inPort="Port 1 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:1"/>
<Edge fromNode="AGGREGATE9:0" guiBendpoints="693:688|693:779" guiLocks="693|null|null" guiRouter="Manual" id="Edge37" inPort="Port 3 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:3"/>
<Edge fromNode="EXT_SORT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="STRUCTURE_WRITER1:0"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge27" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="AGGREGATE10:0"/>
<Edge fromNode="REFORMAT1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge28" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="AGGREGATE8:0"/>
<Edge fromNode="REFORMAT1:2" guiBendpoints="" guiRouter="Manhattan" id="Edge29" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 2 (out)" toNode="AGGREGATE6:0"/>
<Edge fromNode="REFORMAT1:3" guiBendpoints="" guiRouter="Manhattan" id="Edge30" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 3 (out)" toNode="AGGREGATE9:0"/>
<Edge fromNode="REFORMAT1:4" guiBendpoints="" guiRouter="Manhattan" id="Edge31" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 4 (out)" toNode="AGGREGATE7:0"/>
<Edge fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge33" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="EXT_SORT0:0"/>
<Edge fromNode="SIMPLE_GATHER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge32" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="REFORMAT2:0"/>
</Phase>
</Graph>
