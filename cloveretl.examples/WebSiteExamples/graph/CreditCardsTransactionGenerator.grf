<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Aug 11 14:00:36 CEST 2010" guiVersion="0.0.0.devel" id="1281530379010" licenseType="Evaluation Devel" modified="Thu Apr 28 14:42:39 CEST 2011" modifiedBy="avackova" name="TransactionGenerator" revision="1.18" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/Transactions.fmt" id="Metadata0"/>
<Property id="GraphParameter0" name="NUMBER_OF_TRANSACTIONS" value="1000000"/>
<Property fileURL="workspace.prm" id="GraphParameter1"/>
<Note alignment="1" backgroundColorB="145" backgroundColorG="253" backgroundColorR="249" folded="false" height="292" id="Note13" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Credit Cards Transaction Generator" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="495" x="20" y="11">
<attr name="text"><![CDATA[
This graph generates a large amount of input data for CreditCards graph. The number of generated transactions is defined by NUMBER_OF_TRANSACTION parameter. By default it generates 1,000,000 records. Existing data file (transactions.cvs) is overridden by the new one generated with this graph]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="64" guiName="DataGenerator" guiWidth="137" guiX="91" guiY="194" id="DATA_GENERATOR0" recordsNumber="${NUMBER_OF_TRANSACTIONS}" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2
integer tr_number = 1;
number amount;
// Generates output record.
function integer generate() {
	$TransactionId = tr_number++;
	$CustomerId = randomInteger(0,50000);
	amount = abs(randomGaussian() + 1)*800;
	//we want some transactions be really higher, than all others
	if (random() > 0.7) {
		amount = amount * 10;
		if (random() > 0.8) {
			amount = amount * 10;
		}
	}
	$Amount =   amount;
	$CurrencyId = randomInteger(0,34);
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/transactions.csv" guiHeight="98" guiName="transactions.csv" guiWidth="144" guiX="306" guiY="194" id="DATA_WRITER1" type="DATA_WRITER"/>
<Edge fromNode="DATA_GENERATOR0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DATA_WRITER1:0"/>
</Phase>
</Graph>
