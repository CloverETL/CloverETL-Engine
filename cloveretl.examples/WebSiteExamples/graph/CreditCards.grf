<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Jul 21 09:24:12 CEST 2010" guiVersion="0.0.0.devel" id="1279697274740" licenseType="Evaluation Devel" modified="Mon Oct 10 12:16:45 CEST 2011" modifiedBy="avackova" name="CreditCards" revision="1.101" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/Transactions.fmt" id="Metadata6"/>
<Metadata id="Metadata7" previewAttachment="${DATAIN_DIR}/customers.csv" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="Customers" previewAttachment="${DATAIN_DIR}/customers.csv" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" skipFirstLine="true" type="delimited">
<Field name="Id" type="integer"/>
<Field name="LastName" type="string"/>
<Field name="FirstName" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="rates" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="currency" type="string"/>
<Field length="10" name="rate" scale="5" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="rates_with_id" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="currency" type="string"/>
<Field length="10" name="rate" scale="5" type="decimal"/>
<Field name="id" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="transaction_joined" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="customer_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="customer_last_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="customer_first_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="transaction_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" length="12" name="amount" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" name="currency" nullable="true" shift="0" size="0" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="transaction_with_currency" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="customer_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" name="customer_last_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="customer_first_name" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="transaction_id" nullable="true" shift="0" size="0" type="integer"/>
<Field eofAsDelimiter="false" length="12" name="amount" nullable="true" scale="2" shift="0" size="0" type="decimal"/>
<Field eofAsDelimiter="false" name="currency" nullable="true" shift="0" size="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="transactions_only" recordDelimiter="\n" type="delimited">
<Field name="id" type="integer"/>
<Field name="amount" type="decimal"/>
<Field name="currency_id" type="integer"/>
</Record>
</Metadata>
<Property id="GraphParameter0" name="RATES_FILE" value="http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"/>
<Property fileURL="workspace.prm" id="GraphParameter1"/>
<Note alignment="1" backgroundColorB="145" backgroundColorG="253" backgroundColorR="249" folded="false" height="285" id="Note13" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Credit Card Fraud Detection" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="495" x="736" y="-150">
<attr name="text"><![CDATA[
 This graph shows how credit card transactions are checked to detect suspicious transactions. The following steps are performed

    *      Customer transactions are read in
    *      These are merged with customer details from another source
    *      Current exchange rates are fetched from a banking web page in the web
    *      All transactions are then rebased to a base currency
    *      The transaction is then split into 3 output streams a) bad or missing customer numbers b) incorrect currency data c) suspiciously high transactions
    *      Each output stream is written to an HTML web page with the output data correcly populating the page using an HTML template

]]></attr>
</Note>
<Note alignment="1" backgroundColorB="145" backgroundColorG="253" backgroundColorR="249" folded="false" height="263" id="Note14" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Related Points of Interest" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="272" x="957" y="140">
<attr name="text"><![CDATA[    
*      HTML data written using the "Structured Data Writer" component
    *      Will process 1 million transactions merged with 50,000 customers in 12 seconds (on a MacBook Pro laptop)
    *      CTL used to perform small customized coding within the data transformation in one component
    *      Demonstrates sorting, joining, filtering, mapping and data aggregation
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="0" backgroundColorG="255" backgroundColorR="255" folded="false" height="107" id="Note16" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Note 1: Read before running the graph" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="702" x="21" y="-151">
<attr name="text"><![CDATA[Rates Reader reads data from internet. If you don't have your computer connected to internet, you can read eurofxref-daily.xml placed in data-in directory. To do that, set parameter RATES_FILE to ${DATAIN_DIR}/eurofxref-daily.xml]]></attr>
</Note>
<Note alignment="1" backgroundColorB="0" backgroundColorG="255" backgroundColorR="255" folded="false" height="107" id="Note17" textColorB="0" textColorG="0" textColorR="0" textFontSize="10" title="Note 2: Read before running the graph" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="12" width="702" x="25" y="-33">
<attr name="text"><![CDATA[Transaction's file (transactions.cvs) placed in data-in directory contains 40,000 records only. If you want to run the graph for more data, you can easily create it with CreditCardsTransactionGenerator graph.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node aggregateKey="customer_id" enabled="enabled" guiHeight="101" guiName="SumByCustomer" guiWidth="149" guiX="247" guiY="737" id="AGGREGATE0" mapping="$customer_id:=$customer_id;$customer_last_name:=first($customer_last_name);$customer_first_name:=first($customer_first_name);$amount:=sum($amount);$currency:=&quot;â‚¬&quot;;" type="AGGREGATE">
<attr name="guiDescription"><![CDATA[This function aggregates by summing all transactions for each customer]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/transactions.csv" guiHeight="101" guiName="Transactions" guiWidth="128" guiX="35" guiY="99" id="DATA_READER0" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Customer transactions loaded]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/customers.csv" guiHeight="101" guiName="Customers" guiWidth="128" guiX="35" guiY="248" id="DATA_READER1" type="DATA_READER">
<attr name="guiDescription"><![CDATA[50'000 customers loaded]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="Amount&gt;400k" guiWidth="129" guiX="489" guiY="737" id="EXT_FILTER0" type="EXT_FILTER">
<attr name="guiDescription"><![CDATA[We filter out customers whose total transactions are more then 400k]]></attr>
<attr name="filterExpression"><![CDATA[$0.amount > 400000]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="ConvertCurrency" guiWidth="152" guiX="739" guiY="271" id="EXT_HASH_JOIN0" joinKey="$currency=$id" joinType="leftOuter" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.customer_id = $0.customer_id;
	$0.customer_last_name = $0.customer_last_name;
	$0.customer_first_name = $0.customer_first_name;
	$0.transaction_id = $0.transaction_id;
	$0.amount = $0.amount  / $1.rate : $amount;
	$0.currency = nvl($1.currency,toString($0.currency));

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Rebase curriencies to one base currency]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="MatchCustomer" guiWidth="144" guiX="494" guiY="152" id="EXT_MERGE_JOIN0" joinKey="$CustomerId(a)#$Id(a);" joinType="leftOuter" type="EXT_MERGE_JOIN">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.transaction_id = $0.TransactionId;
	$0.customer_id = $1.Id;
	$0.amount = $0.Amount;
	$0.currency = $0.CurrencyId;
	$0.customer_last_name = $1.LastName;
	$0.customer_first_name = $1.FirstName;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Merge transactions with customers]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="FastSort" guiWidth="128" guiX="251" guiY="99" id="FAST_SORT0" sortKey="CustomerId(a)" type="FAST_SORT">
<attr name="guiDescription"><![CDATA[Sort transactions by customer ]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="FastSort" guiWidth="128" guiX="697" guiY="737" id="FAST_SORT1" sortKey="amount(d)" type="FAST_SORT">
<attr name="guiDescription"><![CDATA[Sort those customers in order of transaction totals]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="Partition" guiWidth="128" guiX="31" guiY="711" id="PARTITION0" type="PARTITION">
<attr name="partitionSource"><![CDATA[//#CTL2
// This transformation partitions input records into multiple output ports.

// Returns the number of the output port where the input record will be sent.
function integer getOutputPort() {
	if (isnull($customer_id)) return 0;
	if (isNumber($currency)) return 1;
  return 2;
}

// Called during component initialization, partitionCount is the number of output ports.
// function void init(integer partitionCount) {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources.
// All resources allocated within this method should be released by the postExecute() method.
// function void preExecute() {}

// Called only if getOutputPort() throws an exception.
// function integer getOutputPortOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Here, we split the transactions into 3 separate streams]]></attr>
</Node>
<Node enabled="enabled" guiHeight="69" guiName="Reformat" guiWidth="128" guiX="495" guiY="315" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
integer counter = 1;
// Transforms input record into output record.
function integer transform() {
	$0.currency = $0.currency;
	$0.rate = $0.rate;
	$0.id = counter++;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="69" guiName="Reformat" guiWidth="128" guiX="488" guiY="525" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	 $0.* = $0.*;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/risky-customer.html" footer="&lt;/table&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" guiHeight="85" guiName="risky-customers.html" guiWidth="181" guiX="886" guiY="737" header="&lt;html&gt;&#13;&#10;&lt;body&gt;&#13;&#10;&lt;h3&gt;Customers with suspicious transaction total (over EUR 400 000) &lt;/h3&gt;&#13;&#10;&lt;table cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;&gt;&#13;&#10;&lt;tr&gt;&#13;&#10;&lt;th&gt;Customer&lt;/th&gt;&#13;&#10;&lt;th&gt;Amount&lt;/th&gt;&#13;&#10;&lt;th&gt;Currency&lt;/th&gt;&#13;&#10;&lt;th&gt;Full Name&lt;/th&gt;&#13;&#10;&lt;/tr&gt;&#13;&#10;" id="STRUCTURE_WRITER1" mask="&lt;tr&gt;&#13;&#10;&lt;td&gt;$customer_id&lt;/td&gt;&#13;&#10;&lt;td&gt;$amount&lt;/td&gt;&#13;&#10;&lt;td&gt;$currency&lt;/td&gt;&#13;&#10;&lt;td&gt;$customer_first_name $customer_last_name&lt;/td&gt;&#13;&#10;&lt;/tr&gt;" type="STRUCTURE_WRITER">
<attr name="guiDescription"><![CDATA[Risky customers]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/missing-customer.html" footer="&lt;/table&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" guiHeight="101" guiName="missing-customer" guiWidth="155" guiX="886" guiY="518" header="&lt;html&gt;&#10;&lt;body&gt;&#10;&lt;h3&gt;Transactions with missing customer&lt;/h3&gt;&#10;&lt;table cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; border=&quot;1&quot;&gt;&#10;&lt;tr&gt;&#10;&lt;th&gt;Transaction&lt;/th&gt;&#10;&lt;th&gt;Amount&lt;/th&gt;&#10;&lt;th&gt;Currency&lt;/th&gt;&#10;&lt;/tr&gt;" id="STRUCTURE_WRITER2" mask="&lt;tr&gt;&#10;&lt;td&gt;$transaction_id&lt;/td&gt;&#10;&lt;td&gt;$amount&lt;/td&gt;&#10;&lt;td&gt;$currency&lt;/td&gt;&#10;&lt;/tr&gt;" type="STRUCTURE_WRITER">
<attr name="guiDescription"><![CDATA[Ttransactions with bad customer IDs]]></attr>
</Node>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/missing-currency.html" footer="&lt;/table&gt;&#13;&#10;&lt;/body&gt;&#13;&#10;&lt;/html&gt;" guiHeight="85" guiName="missing-currency.html" guiWidth="186" guiX="886" guiY="630" header="&lt;html&gt;&#13;&#10;&lt;body&gt;&#13;&#10;&lt;h3&gt;Transactions with missing currency&lt;/h3&gt;&#13;&#10;&lt;table cellpadding=&quot;5&quot; cellspacing=&quot;0&quot;  border=&quot;1&quot;&gt;&#13;&#10;&lt;tr&gt;&#13;&#10;&lt;th&gt;Transaction&lt;/th&gt;&#13;&#10;&lt;th&gt;Customer&lt;/th&gt;&#13;&#10;&lt;th&gt;Amount&lt;/th&gt;&#13;&#10;&lt;th&gt;Currency&lt;/th&gt;&#13;&#10;&lt;th&gt;Full Name&lt;/th&gt;&#13;&#10;&lt;/tr&gt;&#13;&#10;" id="STRUCTURE_WRITER3" mask="&lt;tr&gt;&#13;&#10;&lt;td&gt;$transaction_id&lt;/td&gt;&#13;&#10;&lt;td&gt;$customer_id&lt;/id&gt;&#13;&#10;&lt;td&gt;$amount&lt;/td&gt;&#13;&#10;&lt;td&gt;$currency&lt;/td&gt;&#13;&#10;&lt;td&gt;$customer_first_name $customer_last_name&lt;/td&gt;&#13;&#10;&lt;/tr&gt;" type="STRUCTURE_WRITER">
<attr name="guiDescription"><![CDATA[Unsupported currency]]></attr>
</Node>
<Node enabled="enabled" guiHeight="101" guiName="Rates Reader" guiWidth="128" guiX="36" guiY="399" id="XML_EXTRACT0" sourceUri="${RATES_FILE}" type="XML_EXTRACT" useNestedNodes="true">
<attr name="mapping"><![CDATA[<Mappings>
  <Mapping element="gesmes:Envelope">
    <Mapping element="Cube">
     <Mapping element="Cube">
        <Mapping element="Cube" outPort="0"/>
      </Mapping>
    </Mapping>
  </Mapping>
</Mappings>]]></attr>
<attr name="guiDescription"><![CDATA[Load exchange rates from web as xml]]></attr>
</Node>
<Edge debugMode="true" fromNode="AGGREGATE0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="EXT_FILTER0:0"/>
<Edge debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata6" outPort="Port 0 (output)" toNode="FAST_SORT0:0"/>
<Edge debugMode="false" fromNode="DATA_READER1:0" guiBendpoints="401:268|401:188" guiLocks="401|null|null" guiRouter="Manual" id="Edge3" inPort="Port 1 (slave)" metadata="Metadata7" outPort="Port 0 (output)" toNode="EXT_MERGE_JOIN0:1"/>
<Edge debugMode="false" fromNode="EXT_FILTER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (accepted)" toNode="FAST_SORT1:0"/>
<Edge debugMode="true" fromNode="EXT_HASH_JOIN0:0" guiBendpoints="899:289|899:510|23:510|23:727" guiLocks="899|23|510" guiRouter="Manual" id="Edge6" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="PARTITION0:0"/>
<Edge debugMode="true" fromNode="EXT_MERGE_JOIN0:0" guiBendpoints="39:0|39:119" guiLocks="null|null|null" guiRouter="Manual" id="Edge2" inPort="Port 0 (driver)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN0:0"/>
<Edge debugMode="true" fromNode="FAST_SORT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (driver)" metadata="Metadata6" outPort="Port 0 (out)" toNode="EXT_MERGE_JOIN0:0"/>
<Edge debugMode="false" fromNode="FAST_SORT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (Body port)" metadata="Metadata3" outPort="Port 0 (out)" toNode="STRUCTURE_WRITER1:0"/>
<Edge debugMode="true" fromNode="PARTITION0:0" guiBendpoints="191:727|191:545" guiLocks="191|null|null" guiRouter="Manual" id="Edge7" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="REFORMAT1:0"/>
<Edge debugMode="false" fromNode="PARTITION0:1" guiBendpoints="229:743|229:648" guiLocks="229|null|null" guiRouter="Manual" id="Edge9" inPort="Port 0 (Body port)" metadata="Metadata3" outPort="Port 1 (out)" toNode="STRUCTURE_WRITER3:0"/>
<Edge debugMode="true" fromNode="PARTITION0:2" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 2 (out)" toNode="AGGREGATE0:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge5" inPort="Port 1 (slave)" metadata="Metadata4" outPort="Port 0 (out)" toNode="EXT_HASH_JOIN0:1"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (Body port)" metadata="Metadata3" outPort="Port 0 (out)" toNode="STRUCTURE_WRITER2:0"/>
<Edge debugMode="true" fromNode="XML_EXTRACT0:0" guiBendpoints="17:0|17:-104|363:-104|363:-69" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
</Phase>
</Graph>
