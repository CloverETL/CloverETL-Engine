<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Jaro" created="Fri Jul 20 16:07:43 CEST 2012" guiVersion="4.0.0.M1" id="1342794061574" licenseType="Commercial" modified="Tue Mar 25 13:54:20 CET 2014" modifiedBy="User" name="profile_incoming" revision="1.36" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/employees.fmt" id="Metadata0"/>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="profiling_results" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field delimiter=";" eofAsDelimiter="false" name="inputRecordCount" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="firstName__null_cnt" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="lastName__null_cnt" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="sex__null_cnt" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="birthDate__null_cnt" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="hireDate__null_cnt" nullable="true" shift="0" type="long"/>
<Field delimiter=";" eofAsDelimiter="false" name="salary__null_cnt" nullable="true" shift="0" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="profilingError" recordDelimiter="\r\n" type="delimited">
<Field name="errorMessage" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter name="INCOMING_PATH" value="${DATAIN_DIR}/05-ErrorHandling-DataQualityFirewall/employees.csv"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="101" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Description" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="439" x="20" y="20">
<attr name="text"><![CDATA[
1. Profiles the specified file (set via INCOMING_PATH parameter), fails if the data do not meet expected criteria.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Check profiling results" guiX="489" guiY="274" id="CHECK_PROFILING_RESULTS" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if (!isNullCountValid($in.0.firstName__null_cnt)) {
		$out.0.errorMessage = "firstName null count too high";
		return ALL;
	}
	if (!isNullCountValid($in.0.lastName__null_cnt)) {
		$out.0.errorMessage = "lastName null count too high";
		return ALL;
	}
	if (!isNullCountValid($in.0.sex__null_cnt)) {
		$out.0.errorMessage = "sex null count too high";
		return ALL;
	}
	if (!isNullCountValid($in.0.birthDate__null_cnt)) {
		$out.0.errorMessage = "bithDate null count too high";
		return ALL;
	}
	if (!isNullCountValid($in.0.hireDate__null_cnt)) {
		$out.0.errorMessage = "hireDate null count too high";
		return ALL;
	}
	if (!isNullCountValid($in.0.salary__null_cnt)) {
		$out.0.errorMessage = "salary null count too high";
		return ALL;
	}

	return SKIP;
}

function boolean isNullCountValid(number nullCount) {
	number nullRatio = nullCount / $in.0.inputRecordCount;
	printLog(info,"null ratio: " + nullRatio);
	if (nullRatio > 0.2) {
		return false;
	}
	return true;
}
// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${INCOMING_PATH}" guiName="UniversalDataReader" guiX="20" guiY="166" id="DATA_READER0" maxErrorCount="50" type="DATA_READER"/>
<Node enabled="enabled" guiName="Fail for bad data" guiX="712" guiY="274" id="FAIL_FOR_BAD_DATA1" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="ProfilerProbe" guiX="253" guiY="170" id="PROFILER_PROBE0" persistResults="false" type="PROFILER_PROBE">
<attr name="metrics"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<listOfFunctions>
    <metadataField type="string" name="firstName">
        <function name="null_cnt" BlanksAsNulls="false"/>
    </metadataField>
    <metadataField type="string" name="lastName">
        <function name="null_cnt" BlanksAsNulls="false"/>
    </metadataField>
    <metadataField type="string" name="sex">
        <function name="null_cnt" BlanksAsNulls="false"/>
    </metadataField>
    <metadataField type="date" name="birthDate">
        <function name="null_cnt"/>
    </metadataField>
    <metadataField type="string" name="hireDate">
        <function name="null_cnt" BlanksAsNulls="false"/>
    </metadataField>
    <metadataField type="number" name="salary">
        <function name="null_cnt"/>
    </metadataField>
</listOfFunctions>
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.inputRecordCount = $in.0.inputRecordCount;
	$out.1.firstName__null_cnt = $in.1.firstName__null_cnt;
	$out.1.lastName__null_cnt = $in.1.lastName__null_cnt;
	$out.1.sex__null_cnt = $in.1.sex__null_cnt;
	$out.1.birthDate__null_cnt = $in.1.birthDate__null_cnt;
	$out.1.hireDate__null_cnt = $in.1.hireDate__null_cnt;
	$out.1.salary__null_cnt = $in.1.salary__null_cnt;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Trash" guiX="489" guiY="172" id="TRASH0" type="TRASH"/>
<Edge debugMode="true" fromNode="CHECK_PROFILING_RESULTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="FAIL_FOR_BAD_DATA1:0"/>
<Edge debugMode="true" fromNode="DATA_READER0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="PROFILER_PROBE0:0"/>
<Edge debugMode="true" fromNode="PROFILER_PROBE0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (copy of input)" toNode="TRASH0:0"/>
<Edge debugMode="true" fromNode="PROFILER_PROBE0:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (results)" toNode="CHECK_PROFILING_RESULTS:0"/>
</Phase>
</Graph>
