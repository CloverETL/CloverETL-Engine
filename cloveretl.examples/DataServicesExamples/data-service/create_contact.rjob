<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jansedlacek" created="Fri Sep 01 15:41:50 CEST 2017" guiVersion="0.0.0.devel" id="1504279075080" licenseCode="CLP1DJAVLI15742443BY" name="contact_post" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/contact</UrlPath>
<EndpointName>Create contact</EndpointName>
<RequestMethod name="POST"/>
<RequestMethod name="PUT"/>
<RequestParameter id="RestJobParameter0" location="query" name="first-name" required="false" type="string"/>
<RequestParameter id="RestJobParameter1" location="query" name="last-name" required="false" type="string"/>
<RequestParameter id="RestJobParameter2" location="query" name="phone" type="string"/>
<RequestParameter id="RestJobParameter3" location="query" name="email" type="string"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Job failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>201</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata fileURL="${META_DIR}/contact.fmt" id="Metadata1"/>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="requestEcho" recordDelimiter="\n" type="delimited">
<Field name="requestBody" type="string"/>
<Field name="requestClientIpAddress" type="string"/>
<Field name="requestContentType" type="string"/>
<Field name="requestEncoding" type="string"/>
<Field name="requestHeaders" type="string"/>
<Field name="requestMethod" type="string"/>
<Field name="requestParameters" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="296" id="Note0" textColor="444444" width="640" x="210" y="280">
<attr name="text"><![CDATA[h3. Processing HTML form submission

This endpoint processes data submitted via HTML form. See function _createContact()_ in [index.html|open://DataServicesExamples/html/index.html]. Values from form fields coming as HTTP parameters are converted to records serialized into JSON file that serves as simple contact 'database'.


h3. Highlights
* This endpoint accepts *POST* method and uses 4 input HTTP parameters. 
*  All input parameters are declared as optional. We perform validation in graph in order to provide meaningful error messages to the user; we use [Validator|element://VALIDATE_SUBMITTED_DATA] for quick check
* If data is invalid, we simply report first incoming validation error and set error code to *HTTP 400*. We set the error code and error in the [Fail|element://HTTP_400] component
* On success, the service returns (as recommended by REST standard) status code *201 Created*. The code 201 is configured in _[Endpoint Configuration|action://com.cloveretl.gui/com.cloveretl.gui.actions.ChangeGraphEditorTabAction?index=0]_, overriding the default success code *200 OK*
]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Create contact" guiX="722" guiY="53" id="CREATE_CONTACT" jobURL="${SUBGRAPH_DIR}/createContact.sgrf" type="SUBGRAPH"/>
<Node guiName="HTTP 400" guiX="722" guiY="183" id="HTTP_400" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	setResponseStatus(400);
	setResponseBody($in.0.validationMessage);
	
	$out.0.errorMessage = $in.0.validationMessage;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Input" guiX="48" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="CUSTOM" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT">
<attr name="noTopLevelArray"><![CDATA[false]]></attr>
<attr name="noMetadataName"><![CDATA[false]]></attr>
</Node>
<Node guiName="Validate submitted data" guiX="364" guiY="53" id="VALIDATE_SUBMITTED_DATA" type="VALIDATOR">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.recordNo = $in.1.recordNo;
	$out.1.validationMessage = $in.1.validationMessage;
	$out.1.ruleStatusCode = $in.1.ruleStatusCode;
	$out.1.ruleName = $in.1.ruleName;
	$out.1.ruleType = $in.1.ruleType;
	$out.1.rulePath = $in.1.rulePath;
	$out.1.validatedFieldNames = $in.1.validatedFieldNames;
	$out.1.validatedValues = $in.1.validatedValues;
	$out.1.ruleParameters = $in.1.ruleParameters;
	$out.1.validationDate = $in.1.validationDate;
	$out.1.componentID = $in.1.componentID;
	$out.1.componentName = $in.1.componentName;
	$out.1.graphURL = $in.1.graphURL;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="rules"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<group conjunction="AND" description="" enabled="true" errorMessage="" errorMessageProducer="RULES" lazyEvaluation="true" name="All rules" statusCode="">
    <children>
        <nonEmptySubset count="1" customRejectMessage="Either First or Last name must be populated" description="" enabled="true" goal="NONEMPTY" inputField="firstName,lastName" name="Either First or Last name must be populated" outputField="" trimInput="true"/>
        <group conjunction="AND" description="" enabled="true" errorMessage="" errorMessageProducer="RULES" lazyEvaluation="true" name="Group" statusCode="">
            <children>
                <email acceptEmpty="false" allowGroupAddresses="false" allowNoTLD="false" customRejectMessage="Entered email is invalid" description="" enabled="true" inputField="email" name="Email is valid" outputField="" plainAddress="false" trimInput="true">
                    <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
                </email>
                <patternMatch acceptEmpty="false" customRejectMessage="Invalid phone number. Use format 999-999-999." description="" enabled="true" ignoreCase="false" inputField="phone" name="Relaxed phone number validation" outputField="" trimInput="false">
                    <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
                    <pattern>[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9]</pattern>
                </patternMatch>
            </children>
            <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
            <imports/>
        </group>
        <copyAllByName customRejectMessage="" description="" enabled="true" inputField="" name="Copy all fields by name" outputField=""/>
    </children>
    <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
    <imports/>
</group>
]]></attr>
</Node>
<Edge fromNode="RESTJOB_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="VALIDATE_SUBMITTED_DATA:0"/>
<Edge fromNode="VALIDATE_SUBMITTED_DATA:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (valid)" toNode="CREATE_CONTACT:0"/>
<Edge fromNode="VALIDATE_SUBMITTED_DATA:1" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 1 (invalid)" toNode="HTTP_400:0"/>
</Phase>
</Graph>
