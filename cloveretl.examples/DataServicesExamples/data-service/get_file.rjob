<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jansedlacek" created="Thu Aug 31 14:44:51 CEST 2017" guiVersion="0.0.0.devel" id="1504183627516" licenseCode="CLP1DJAVLI15742443BY" name="html" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/html/{filename}</UrlPath>
<EndpointName>Get static file</EndpointName>
<RequestMethod name="GET"/>
<RequestParameter id="RestJobParameter0" location="url_path" name="filename" required="true" type="string"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Job failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="376" id="Note0" textColor="444444" width="654" x="206" y="131">
<attr name="text"><![CDATA[h2. Serving files

h4. Description
The job serves HTML and CSS resources which (as correct HTTP headers are set) are then displayed in browser.


h4. Highlights
* Job sets response HTTP header *Content-Type* so that web page is correctly displayed by your browser
* The job *returns any file based on incoming HTTP parameter*.  We use it to return HTML, CSS, PNG and JavaScript files.
* Notice _${filename}_ parameter in output setting in _[Endpoint Configuration|action://com.cloveretl.gui/com.cloveretl.gui.actions.ChangeGraphEditorTabAction?index=0]_. It is automatically resolved using value from HTTP request.
* This job uses *static file response*. Notice _<file>_ output setting in _[Endpoint Configuration|action://com.cloveretl.gui/com.cloveretl.gui.actions.ChangeGraphEditorTabAction?index=0]_.

The job accepts only *GET* requests and uses one *required* input parameter _filename_ as Path parameter.


]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Input" guiX="80" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" encoding="UTF-8" fileURL="${PROJECT}/html/${filename}" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="FILE" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT">
<attr name="noTopLevelArray"><![CDATA[false]]></attr>
<attr name="noMetadataName"><![CDATA[false]]></attr>
</Node>
<Node guiName="GetJobInput" guiX="280" guiY="10" id="RequestParametersValidator" restJobInput="true" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2
// Transforms input record into output record.
function integer transform() {
	if (isEmpty(getRequestParameter("filename"))) { 
		raiseError("Missing required request parameter: 'filename'");
	}
	return ALL;
}]]></attr>
</Node>
<Node guiName="Set response Content-Type" guiX="383" guiY="19" id="SET_RESPONSE_CONTENT_TYPE" type="SET_JOB_OUTPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if (endsWith(getParamValue("filename"), ".css")) {
		setResponseContentType("text/css");
	} else if (endsWith(getParamValue("filename"), ".png")) {
		setResponseContentType("image/png");
	} else if (endsWith(getParamValue("filename"), ".js")) {
		setResponseContentType("text/javascript");	
	} else {
		setResponseContentType("text/html");
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
</Phase>
</Graph>
