<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jansedlacek" created="Thu Aug 31 14:44:51 CEST 2017" guiVersion="0.0.0.devel" id="1504183627516" licenseCode="CLP1DJAVLI15742443BY" name="html" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/html/{filename}</UrlPath>
<EndpointName>Get html</EndpointName>
<RequestMethod name="GET"/>
<RequestParameter id="RestJobParameter0" location="url_path" name="filename" required="true" type="string"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Job failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata id="Metadata1">
<Record eofAsDelimiter="true" fieldDelimiter="|" name="fileContent" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="data" size="1" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="requestEcho" recordDelimiter="\n" type="delimited">
<Field name="requestBody" type="string"/>
<Field name="requestClientIpAddress" type="string"/>
<Field name="requestContentType" type="string"/>
<Field name="requestEncoding" type="string"/>
<Field name="requestHeaders" type="string"/>
<Field name="requestMethod" type="string"/>
<Field name="requestParameters" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="370" id="Note0" textColor="444444" width="640" x="226" y="269">
<attr name="text"><![CDATA[h2. Serving HTML/CSS files

h4. Description
The job serves HTML and CSS resources which (as correct HTTP headers are set) are then displayed in browser.


h4. Highlights
* Job sets response HTTP header *Content-Type* so that web page is correctly displayed by your browser
* The job *returns any file based on incming HTTP parameter*.  We use it to return both HTML & CSS files.
* Notice _${filename}_ parameter in Reader URL. It is automatically resolved using value from HTTP request
* This job uses *custom response serialization*. Notice _response:body_ in Writer URL and _<custom>_ output setting in Endpoint configuration.

The job accepts only *GET* requests and uses one *required* input parameter _filename_, passed in URL path.


*Temporary:* _We will simplify the approach for serving static files in  4.7-M2 to allow services send file as response without need to implement any graph logic. In M1 it is necessary to use the combination of Reader and Writer to serve static file as service response._

]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Input" guiX="80" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="CUSTOM" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT">
<attr name="noTopLevelArray"><![CDATA[false]]></attr>
<attr name="noMetadataName"><![CDATA[false]]></attr>
</Node>
<Node guiName="GetJobInput" guiX="280" guiY="10" id="RequestParametersValidator" restJobInput="true" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2
// Transforms input record into output record.
function integer transform() {
	if (isEmpty(getRequestParameter("filename"))) { 
		raiseError("Missing required request parameter: 'filename'");
	}
	return ALL;
}]]></attr>
</Node>
<Node guiName="Set response Content-Type" guiX="233" guiY="32" id="SET_RESPONSE_CONTENT_TYPE" type="SET_JOB_OUTPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if (endsWith(getParamValue("filename"), ".css")) {
		setResponseContentType("text/css");
	} else if (endsWith(getParamValue("filename"), ".png")) {
		setResponseContentType("image/png");
	} else {
		setResponseContentType("text/html");
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
</Phase>
<Phase number="1">
<Node fileURL="${PROJECT}/html/${filename}" guiName="Read requested static file" guiX="233" guiY="134" id="READ_REQUESTED_STATIC_FILE" type="FLAT_FILE_READER">
<attr name="guiDescription"><![CDATA[using ${filename} parameter]]></attr>
</Node>
<Node fileURL="response:body" guiName="Write file content to response body" guiX="577" guiY="134" id="WRITE_FILE_CONTENT_TO_RESPONSE_BODY" type="FLAT_FILE_WRITER"/>
<Edge fromNode="READ_REQUESTED_STATIC_FILE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="WRITE_FILE_CONTENT_TO_RESPONSE_BODY:0"/>
</Phase>
</Graph>
