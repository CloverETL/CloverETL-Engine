<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jansedlacek" created="Fri Sep 01 15:41:50 CEST 2017" guiVersion="0.0.0.devel" id="1504277175444" licenseCode="CLP1DJAVLI15742443BY" name="contact_vcard_post" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/contact/vcard</UrlPath>
<Description>This endpoint handles importing contact submitted in VCARD format.  &#13;
</Description>
<EndpointName>Import contact using VCARD</EndpointName>
<RequestMethod name="POST"/>
<RequestMethod name="PUT"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Import from VCARD failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="ContentType" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="contentType" type="string"/>
<Field name="contentLength" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record eofAsDelimiter="true" fieldDelimiter="|" name="rows" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field delimiter=":" name="header" type="string"/>
<Field name="value" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="237" id="Note0" textColor="444444" width="844" x="190" y="287">
<attr name="text"><![CDATA[h3. Import VCARD contact

This endpoint handles importing contact submitted via text field  in VCARD format.  


h4. Highlights
* Job uses no incoming parameters: VCARD data is coming in the body of HTTP request instead
* To read the data coming in HTTP request body, we use *request:body* in URL of standard [Reader|element://PARSE_INPUT_PAYLOAD]

* The endpoint accepts both *PUT* and *POST* methods. JavaScript in [index.html|open://DataServicesExamples/html/index.html] uses only the PUT method, see function _importVcard()_




]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Content-Type is invalid (415)" guiX="590" guiY="107" id="CONTENT_TYPE_IS_INVALID_415" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	setResponseStatus(415);
	setResponseBody($in.0.validationMessage);
	
	$out.0.errorMessage = $in.0.validationMessage;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Request body is empty (400)" guiX="840" guiY="107" id="CONTENT_TYPE_IS_INVALID_HTTP_1" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	setResponseStatus(400);
	setResponseBody($in.0.validationMessage);
	
	$out.0.errorMessage = $in.0.validationMessage;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Content-Type is valid" guiX="881" guiY="27" id="CONTENT_TYPE_IS_VALID1" type="SUCCESS"/>
<Node guiName="Get Content-Type value" guiX="184" guiY="27" id="GET_CONTENT_TYPE_VALUE1" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.contentType = getRequestHeader("content-type");
	$out.0.contentLength = str2integer(getRequestHeader("content-length"));

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Input" guiX="70" guiY="27" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="1064" guiY="27" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="JSON" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT">
<attr name="noTopLevelArray"><![CDATA[false]]></attr>
<attr name="noMetadataName"><![CDATA[false]]></attr>
</Node>
<Node guiName="Validate content-type" guiX="405" guiY="27" id="VALIDATE_CONTENT_TYPE" type="VALIDATOR">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.recordNo = $in.1.recordNo;
	$out.1.validationMessage = $in.1.validationMessage;
	$out.1.ruleStatusCode = $in.1.ruleStatusCode;
	$out.1.ruleName = $in.1.ruleName;
	$out.1.ruleType = $in.1.ruleType;
	$out.1.rulePath = $in.1.rulePath;
	$out.1.validatedFieldNames = $in.1.validatedFieldNames;
	$out.1.validatedValues = $in.1.validatedValues;
	$out.1.ruleParameters = $in.1.ruleParameters;
	$out.1.validationDate = $in.1.validationDate;
	$out.1.componentID = $in.1.componentID;
	$out.1.componentName = $in.1.componentName;
	$out.1.graphURL = $in.1.graphURL;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="rules"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<group conjunction="AND" description="" enabled="true" errorMessage="" errorMessageProducer="RULES" lazyEvaluation="true" name="All rules" statusCode="">
    <children>
        <copyAllByName customRejectMessage="" description="" enabled="true" inputField="" name="Copy all fields by name" outputField=""/>
        <patternMatch acceptEmpty="false" customRejectMessage="Wrong Content-Type header value, expected 'text/vcard'." description="" enabled="true" ignoreCase="true" inputField="contentType" name="Pattern Match" outputField="" trimInput="false">
            <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
            <pattern>text/vcard</pattern>
        </patternMatch>
    </children>
    <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
    <imports/>
</group>
]]></attr>
</Node>
<Node guiName="Validate request body" guiX="628" guiY="27" id="VALIDATE_REQUEST_BODY" type="VALIDATOR">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.recordNo = $in.1.recordNo;
	$out.1.validationMessage = $in.1.validationMessage;
	$out.1.ruleStatusCode = $in.1.ruleStatusCode;
	$out.1.ruleName = $in.1.ruleName;
	$out.1.ruleType = $in.1.ruleType;
	$out.1.rulePath = $in.1.rulePath;
	$out.1.validatedFieldNames = $in.1.validatedFieldNames;
	$out.1.validatedValues = $in.1.validatedValues;
	$out.1.ruleParameters = $in.1.ruleParameters;
	$out.1.validationDate = $in.1.validationDate;
	$out.1.componentID = $in.1.componentID;
	$out.1.componentName = $in.1.componentName;
	$out.1.graphURL = $in.1.graphURL;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="rules"><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<group conjunction="AND" description="" enabled="true" errorMessage="" errorMessageProducer="RULES" lazyEvaluation="true" name="All rules" statusCode="">
    <children>
        <copyAllByName customRejectMessage="" description="" enabled="true" inputField="" name="Copy all fields by name" outputField=""/>
        <comparison acceptEmpty="false" customRejectMessage="VCARD is empty." description="" enabled="true" inputField="contentLength" name="Comparison" operator="G" outputField="" useType="DEFAULT" value="0">
            <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
        </comparison>
    </children>
    <languageSetting dateFormat="" locale="" numberFormat="" timezone=""/>
    <imports/>
</group>
]]></attr>
</Node>
<Edge fromNode="GET_CONTENT_TYPE_VALUE1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="VALIDATE_CONTENT_TYPE:0"/>
<Edge fromNode="VALIDATE_CONTENT_TYPE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (valid)" toNode="VALIDATE_REQUEST_BODY:0"/>
<Edge fromNode="VALIDATE_CONTENT_TYPE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 1 (invalid)" toNode="CONTENT_TYPE_IS_INVALID_415:0"/>
<Edge fromNode="VALIDATE_REQUEST_BODY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 0 (valid)" toNode="CONTENT_TYPE_IS_VALID1:0"/>
<Edge fromNode="VALIDATE_REQUEST_BODY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 1 (invalid)" toNode="CONTENT_TYPE_IS_INVALID_HTTP_1:0"/>
</Phase>
<Phase number="1">
<Node guiName="Convert to contact" guiX="411" guiY="188" id="CONVERT_TO_CONTACT" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2
// This transformation defines the way in which multiple input records 
// (with the same key) are denormalized into one output record. 

// This function is called for each input record from a group of records
// with the same key.
string firstName = null;
string lastName = null;
string phone = null;
string email = null;

function integer append() {
	if(startsWith($in.0.header,"EMAIL")) {
	  email = $in.0.value;
	}
	if(startsWith($in.0.header,"TEL")) {
	  phone = $in.0.value;
	}
	if(startsWith($in.0.header,"FN")) {
		string fn = trim($in.0.value);
		integer pos = indexOf(fn, " ");
		if (pos < 0) {
			firstName = "";
			lastName = fn;
		} else {
			firstName = trim(substring(fn, 0, pos));
			lastName = trim(substring(fn, pos+1));
		}
	}
	return OK;
}

// This function is called once after the append() function was called for all records
// of a group of input records defined by the key.
// It creates a single output record for the whole group.
function integer transform() {
	$out.0.first_name = firstName;
	$out.0.last_name = lastName;
	$out.0.email = email;
	$out.0.phone = phone;
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if append() throws an exception.
// function integer appendOnError(string errorMessage, string stackTrace) {
// }

// Called only if transform() throws an exception.
//function integer transformOnError(string errorMessage, string stackTrace) {
//}

// Called after transform() to return the resources that have been used to their initial state
// so that next group of records with different key may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Create contact" guiX="906" guiY="188" id="CREATE_CONTACT" jobURL="${SUBGRAPH_DIR}/createContact.sgrf" type="SUBGRAPH"/>
<Node dataPolicy="lenient" fileURL="request:body" guiName="Parse input payload" guiX="190" guiY="188" id="PARSE_INPUT_PAYLOAD" type="FLAT_FILE_READER"/>
<Node guiName="Validate submitted data" guiX="623" guiY="188" id="VALIDATE_SUBMITTED_DATA1" jobURL="${SUBGRAPH_DIR}/validateSubmittedData.sgrf" type="SUBGRAPH"/>
<Edge fromNode="CONVERT_TO_CONTACT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="VALIDATE_SUBMITTED_DATA1:0"/>
<Edge fromNode="PARSE_INPUT_PAYLOAD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="CONVERT_TO_CONTACT:0"/>
<Edge fromNode="VALIDATE_SUBMITTED_DATA1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="CREATE_CONTACT:0"/>
</Phase>
</Graph>
