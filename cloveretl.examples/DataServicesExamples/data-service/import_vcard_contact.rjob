<?xml version="1.0" encoding="UTF-8"?>
<Graph author="jansedlacek" created="Fri Sep 01 15:41:50 CEST 2017" guiVersion="0.0.0.devel" id="1504277175444" licenseCode="CLP1DJAVLI15742443BY" name="contact_vcard_post" nature="restJob" showComponentDetails="true">
<Global>
<EndpointSettings>
<UrlPath>/contact/vcard</UrlPath>
<EndpointName>Import contact using VCARD</EndpointName>
<RequestMethod name="POST"/>
<RequestMethod name="PUT"/>
</EndpointSettings>
<RestJobResponseStatus>
<JobError>
<ReasonPhrase>Import from VCARD failed</ReasonPhrase>
<StatusCode>500</StatusCode>
</JobError>
<Success>
<StatusCode>200</StatusCode>
</Success>
<ValidationError>
<ReasonPhrase>Request validation failed</ReasonPhrase>
<StatusCode>400</StatusCode>
</ValidationError>
</RestJobResponseStatus>
<Metadata fileURL="${META_DIR}/contact.fmt" id="Metadata2"/>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="requestEcho" recordDelimiter="\n" type="delimited">
<Field name="requestBody" type="string"/>
<Field name="requestClientIpAddress" type="string"/>
<Field name="requestContentType" type="string"/>
<Field name="requestEncoding" type="string"/>
<Field name="requestHeaders" type="string"/>
<Field name="requestMethod" type="string"/>
<Field name="requestParameters" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record eofAsDelimiter="true" fieldDelimiter="|" name="rows" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field delimiter=":" name="header" type="string"/>
<Field name="value" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="293" id="Note0" textColor="444444" width="640" x="217" y="186">
<attr name="text"><![CDATA[h3. Import VCARD contact

This endpoint handles importing contact submitted via text field  in VCARD format.  


h4. Highlights
* Job uses no incoming parameters: VCARD data is coming in the body of HTTP request instead
* To read the data coming in HTTP request body, we use *request:body* in URL of standard [Reader|element://PARSE_INPUT_PAYLOAD]

* The endpoint accepts both *PUT* and *POST* methods. JavaScript in [index.html|open://DataServicesExamples/html/index.html] uses only the PUT method, see function _importVcard()_




]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Convert to contact" guiX="453" guiY="65" id="CONVERT_TO_CONTACT" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2
// This transformation defines the way in which multiple input records 
// (with the same key) are denormalized into one output record. 

// This function is called for each input record from a group of records
// with the same key.
string firstName = null;
string lastName = null;
string phone = null;
string email = null;

function integer append() {
	if(startsWith($in.0.header,"EMAIL")) {
	  email = $in.0.value;
	}
	if(startsWith($in.0.header,"TEL")) {
	  phone = $in.0.value;
	}
	if(startsWith($in.0.header,"FN")) {
		string[] parts = split($in.0.value, " ");
		firstName = parts[0];
		lastName = parts[1];
	}
	return OK;
}

// This function is called once after the append() function was called for all records
// of a group of input records defined by the key.
// It creates a single output record for the whole group.
function integer transform() {
	$out.0.firstName = firstName;
	$out.0.lastName = lastName;
	$out.0.email = email;
	$out.0.phone = phone;
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if append() throws an exception.
// function integer appendOnError(string errorMessage, string stackTrace) {
// }

// Called only if transform() throws an exception.
//function integer transformOnError(string errorMessage, string stackTrace) {
//}

// Called after transform() to return the resources that have been used to their initial state
// so that next group of records with different key may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Create contact" guiX="670" guiY="65" id="CREATE_CONTACT" jobURL="${SUBGRAPH_DIR}/createContact.sgrf" type="SUBGRAPH"/>
<Node dataPolicy="lenient" fileURL="request:body" guiName="Parse input payload" guiX="242" guiY="65" id="PARSE_INPUT_PAYLOAD" type="FLAT_FILE_READER"/>
<Node guiName="Input" guiX="80" guiY="10" id="RESTJOB_INPUT0" restJobInput="true" type="RESTJOB_INPUT"/>
<Node attachment="false" guiName="Output" guiX="900" guiY="10" id="RESTJOB_OUTPUT0" metadataName="true" responseFormat="JSON" restJobOutput="true" topLevelArray="true" type="RESTJOB_OUTPUT">
<attr name="noTopLevelArray"><![CDATA[false]]></attr>
<attr name="noMetadataName"><![CDATA[false]]></attr>
</Node>
<Edge fromNode="CONVERT_TO_CONTACT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="CREATE_CONTACT:0"/>
<Edge fromNode="PARSE_INPUT_PAYLOAD:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" toNode="CONVERT_TO_CONTACT:0"/>
</Phase>
</Graph>
