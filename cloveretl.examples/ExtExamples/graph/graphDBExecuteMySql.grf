<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Tue Dec 04 10:38:50 CET 2007" guiVersion="0.0.0.devel" id="1196767470169" licenseType="Evaluation Devel" modified="Wed Mar 10 10:00:56 CET 2010" modifiedBy="cloveruser" name="TestingDB2" revision="1.236">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter=";" name="customers" recordDelimiter="\n" recordSize="-1" type="delimited">
<Field name="klient_id" nullable="true" shift="0" skipFirstLine="false" type="integer"/>
<Field name="prijmeni" nullable="true" shift="0" skipFirstLine="false" type="string"/>
<Field name="jmeno" nullable="true" shift="0" skipFirstLine="false" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field auto_filling="ErrCode" name="errCode" type="integer"/>
<Field auto_filling="ErrText" name="errMess" type="string"/>
</Record>
</Metadata>
<Connection dbConfig="${CONN_DIR}/mysql.cfg" id="Connection0" type="JDBC"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Sequence cached="100" fileURL="${SEQ_DIR}/id.seq" id="Sequence0" name="id" start="1" step="1" type="SIMPLE_SEQUENCE"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="357" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of the DBExecute Component" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="534" x="28" y="205">
<attr name="text"><![CDATA[
This graph shows how a DBExecute component can be used to define a procedure in one phase and to call it in another. 

In phase 0, a procedure is created. It is stored in database. During the first graph run, the procedure is created. During all other runs, it already exists and an error code with the error message is sent to Trash connected to the optional second output port of DBExecute.  

However, this error does not prevent the successful graph execution as the Error actions attribute is set to MIN_INT=CONTINUE. That ensures that graph may continue even when an error occurs.

In addition, the definition of the procedure is written to Console (Print statements is true).

In phase 1, DataGenerator uses a sequence to generate client ID-s for this procedure that is subsequently called in the DBExecute of the phase 1. This sequence is always reset in the init() function of DataGenerator transformation. The generated ids are used to select last names and first names stored in the database table specified in phase 0. This DBExecute only includes a call of the previously defined stored procedure. The Call as stored procedure attribute must be set to true, otherwise, the graph would fail.

Both the input parameters and the fields for the result output set are specified.

]]></attr>
</Note>
</Global>
<Phase number="0">
<Node dbConnection="Connection0" enabled="enabled" errorActions="MIN_INT=CONTINUE;" guiHeight="0" guiName="Procedure creation" guiWidth="0" guiX="26" guiY="21" id="DB_EXECUTE1" printStatements="true" sqlQuery="CREATE PROCEDURE find_client(IN param INT)&#10;BEGIN&#10;&#9;select * from customers where klient_id = param;&#10;END;" sqlStatementDelimiter="#" type="DB_EXECUTE"/>
<Node debugPrint="true" enabled="enabled" guiHeight="0" guiName="Error info" guiWidth="0" guiX="215" guiY="17" id="TRASH0" type="TRASH"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="DB_EXECUTE1:1" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 1 (error output)" toNode="TRASH0:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiHeight="0" guiName="Client ID-s" guiWidth="0" guiX="26" guiY="112" id="DATA_GENERATOR0" recordsNumber="1000" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#TL

// Generates output record.
function generate() {
	$0.klient_id := sequence(Sequence0).next;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
 function init() {
 	sequence(Sequence0).reset;
 }

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/foundClients.txt" guiHeight="0" guiName="Procedure output" guiWidth="0" guiX="398" guiY="112" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node callStatement="true" dbConnection="Connection0" enabled="enabled" guiHeight="0" guiName="Procedure call" guiWidth="0" guiX="214" guiY="112" id="DB_EXECUTE2" inParameters="1:=$klient_id;" outputFields="klient_id;prijmeni;jmeno" sqlQuery="{call find_client(?)}" type="DB_EXECUTE"/>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_GENERATOR0:0" guiBendpoints="" id="Edge5" inPort="Port 0 (input parameters)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DB_EXECUTE2:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="DB_EXECUTE2:0" guiBendpoints="" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (procedure output)" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
