<?xml version="1.0" encoding="UTF-8"?>
<Graph author="lucie" created="Mon Jul 26 05:37:30 CEST 2010" guiVersion="0.0.0.devel" id="1280121426438" licenseType="Evaluation Devel" modified="Tue Aug 03 11:53:18 CEST 2010" modifiedBy="lucie" name="graphWritingTextData" revision="1.37">
<Global>
<Metadata fileURL="${META_DIR}/customers_short.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/customers.fmt" id="Metadata0"/>
<Property id="GraphParameter0" name="FULL_FILE" value="5555"/>
<Property fileURL="workspace.prm" id="GraphParameter1"/>
<Note alignment="1" backgroundColorB="0" backgroundColorG="196" backgroundColorR="255" folded="false" height="78" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="12" title="New note" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="1" width="685" x="48" y="7">
<attr name="text"><![CDATA[We want to gather all customers from the same state into one file. Instead of two big files with customer data create smaller ones with the given number of records each. ]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="85" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="225" x="256" y="348">
<attr name="text"><![CDATA[Note the difference how SimpleGather and Concatenate component put data from various inputs together]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="73" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Parameters" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="201" x="604" y="348">
<attr name="text"><![CDATA[The number of records per file is stored in FULL_FILE parameter.]]></attr>
</Note>
<Dictionary>
<Entry dictval.key="value" id="DictionaryEntry0" input="true" name="num_files" output="true" type="integer"/>
<Entry id="DictionaryEntry1" input="true" name="num_rec" output="true" type="integer"/>
</Dictionary>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="0" guiName="Concatenate" guiWidth="0" guiX="192" guiY="444" id="CONCATENATE0" type="CONCATENATE"/>
<Node charset="utf-8" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region1.csv" guiHeight="0" guiName="UTF-8" guiWidth="0" guiX="24" guiY="384" id="DATA_READER0" type="DATA_READER"/>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region2.csv" guiHeight="0" guiName="UTF-8" guiWidth="0" guiX="24" guiY="468" id="DATA_READER1" type="DATA_READER"/>
<Node charset="windows-1250" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region1.csv" guiHeight="0" guiName="windows-1250" guiWidth="0" guiX="24" guiY="216" id="DATA_READER2" type="DATA_READER"/>
<Node charset="windows-1250" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region2.csv" guiHeight="0" guiName="windows-1250" guiWidth="0" guiX="24" guiY="300" id="DATA_READER3" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_region1.csv" guiHeight="0" guiName="ISO-8859-1" guiWidth="0" guiX="24" guiY="108" id="DATA_READER4" type="DATA_READER"/>
<Node charset="ISO-8859-1" enabled="enabled" fileURL="${DATAOUT_DIR}/customers/#.txt" guiHeight="0" guiName="division by state" guiWidth="0" guiX="624" guiY="108" id="DATA_WRITER0" makeDirs="true" outputFieldNames="true" partitionFileTag="keyNameFileTag" partitionKey="state" type="DATA_WRITER"/>
<Node charset="windows-1250" enabled="enabled" fileURL="${DATAOUT_DIR}/delimited/customers$.txt" guiHeight="0" guiName="by records per file" guiWidth="0" guiX="624" guiY="240" id="DATA_WRITER1" partitionFileTag="numberFileTag" recordsPerFile="${FULL_FILE}" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="ExtSort" guiWidth="0" guiX="354" guiY="452" id="EXT_SORT0" sortKey="lastname(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="521" guiY="452" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
integer fileNumber = 1;
integer counter = 0;
// Transforms input record into output record.
function integer transform() {
	$0.customerid = $0.customerid;
	$0.firstname = $0.firstname;
	$0.lastname = $0.lastname;
	$0.address1 = $0.address1;
	$0.address2 = $0.address2;
	$0.city = $0.city;
	$0.state = $0.state;
	$0.zip = $0.zip;
	$0.country = $0.country;
	$0.region = $0.region;
	$0.email = $0.email;
	$0.phone = $0.phone;
	$0.creditcardtype = $0.creditcardtype;
	$0.creditcard = $0.creditcard;
	$0.creditcardexpiration = $0.creditcardexpiration;
	$0.username = $0.username;
	$0.password = $0.password;
	$0.age = $0.age;
	$0.income = $0.income;
	$0.gender = $0.gender;

   if (counter == ${FULL_FILE}){
      counter = 1;
      fileNumber++;
   }else{
      counter++;
   }
	return 0;
}
function void postExecute() {
   dictionary.num_files = fileNumber;
   dictionary.num_rec = counter;
}
// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="252" guiY="108" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.customerid = $0.customerid;
	$0.firstname = $0.firstname;
	$0.lastname = $0.lastname;
	$0.city = $0.city;
	$0.state = $0.state;
	$0.country = $0.country;
	$0.username = $0.username;
	$0.password = $0.password;
	$0.age = $0.age;
	$0.income = $0.income;
	$0.gender = $0.gender;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="SimpleGather" guiWidth="0" guiX="252" guiY="252" id="SIMPLE_GATHER0" type="SIMPLE_GATHER"/>
<Node append="false" enabled="enabled" fileURL="${DATAOUT_DIR}/others/customers$.xml" footer="&lt;/dataset&gt;" guiHeight="0" guiName="by records per file" guiWidth="0" guiX="690" guiY="444" header="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;dataset&gt;" id="STRUCTURE_WRITER0" mask="&lt; customers&gt;&#10;&#9;&lt;customerID&gt;$customerID&lt;/customerID&gt;&#10;&#9;&lt;firstname&gt;$firstname&lt;/firstname&gt;&#10;&#9;&lt;lastname&gt;$lastname&lt;/lastname&gt;&#10;&#9;&lt;address1&gt;$address1&lt;/address1&gt;&#10;&#9;&lt;address2&gt;$address2&lt;/address2&gt;&#10;&#9;&lt;city&gt;$city&lt;/city&gt;&#10;&#9;&lt;state&gt;$state&lt;/state&gt;&#10;&#9;&lt;zip&gt;$zip&lt;/zip&gt;&#10;&#9;&lt;country&gt;$country&lt;/country&gt;&#10;&#9;&lt;region&gt;$region&lt;/region&gt;&#10;&#9;&lt;email&gt;$email&lt;/email&gt;&#10;&#9;&lt;phone&gt;$phone&lt;/phone&gt;&#10;&#9;&lt;creditcardtype&gt;$creditcardtype&lt;/creditcardtype&gt;&#10;&#9;&lt;creditcard&gt;$creditcard&lt;/creditcard&gt;&#10;&#9;&lt;creditcardexpiration&gt;$creditcardexpiration&lt;/creditcardexpiration&gt;&#10;&#9;&lt;username&gt;$username&lt;/username&gt;&#10;&#9;&lt;password&gt;$password&lt;/password&gt;&#10;&#9;&lt;age&gt;$age&lt;/age&gt;&#10;&#9;&lt;income&gt;$income&lt;/income&gt;&#10;&#9;&lt;gender&gt;$gender&lt;/gender&gt;&#10;&lt;/customers&gt;&#10;" recordsPerFile="${FULL_FILE}" type="STRUCTURE_WRITER"/>
<Edge debugMode="true" fromNode="CONCATENATE0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_SORT0:0"/>
<Edge fromNode="DATA_READER0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="CONCATENATE0:0"/>
<Edge fromNode="DATA_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="CONCATENATE0:1"/>
<Edge fromNode="DATA_READER2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="SIMPLE_GATHER0:0"/>
<Edge fromNode="DATA_READER3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="SIMPLE_GATHER0:1"/>
<Edge fromNode="DATA_READER4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="REFORMAT1:0"/>
<Edge fromNode="EXT_SORT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
<Edge fromNode="REFORMAT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (Body port)" metadata="Metadata0" outPort="Port 0 (out)" toNode="STRUCTURE_WRITER0:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
<Edge debugMode="true" fromNode="SIMPLE_GATHER0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DATA_WRITER1:0"/>
</Phase>
</Graph>
