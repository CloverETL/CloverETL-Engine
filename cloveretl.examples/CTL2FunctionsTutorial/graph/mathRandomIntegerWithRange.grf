<?xml version="1.0" encoding="UTF-8"?>
<Graph author="milos_kovalcik" created="Thu Dec 18 12:51:41 CET 2008" guiVersion="0.0.0.devel" id="1229624844609" licenseType="Evaluation Devel" modified="Mon Jul 12 11:51:12 CEST 2010" modifiedBy="cloveruser" name="mathRandomIntegerWithRange" revision="1.42">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="random_intWithRangeInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="MinimumValue" type="integer"/>
<Field name="MaximumValue" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="random_intWithRangeOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Minimum" type="integer"/>
<Field name="Maximum" type="integer"/>
<Field name="Function" type="string"/>
<Field name="Result" type="integer"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="141" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="integer randomInteger(integer Minimum, integer Maximum)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="442" x="41" y="28">
<attr name="text"><![CDATA[
The randomInteger(integer, integer) function accepts two argument of integer data types and returns a random integer value greater than or equal to Minimum and less than or equal to Maximum.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="0" guiName="DataGenerator" guiWidth="0" guiX="44" guiY="202" id="DATA_GENERATOR0" recordsNumber="10" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
function void preExecute() {
     setRandomSeed(10);
}

// Generates output record.
function integer generate() {
	$0.Minimum = 0;
	$0.Maximum = 100;
	$0.Function = "randomInteger($0.MinimumValue,$0.MaximumValue)";
	$0.Result = randomInteger(0,100);

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/mathRandomIntegerWithRangeOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="354" guiY="202" id="DATA_WRITER0" type="DATA_WRITER"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="DATA_GENERATOR0:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
