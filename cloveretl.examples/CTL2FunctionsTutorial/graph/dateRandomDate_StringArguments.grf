<?xml version="1.0" encoding="UTF-8"?>
<Graph author="milos_kovalcik" created="Fri Dec 19 12:59:32 CET 2008" guiVersion="0.0.0.devel" id="1229697305234" licenseType="Evaluation Devel" modified="Tue Jul 13 14:57:54 CEST 2010" modifiedBy="cloveruser" name="dateRandomDate_StringArguments" revision="1.64">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="random_dateInput" recordDelimiter="\r\n" type="delimited">
<Field name="StartDate" type="string"/>
<Field name="EndDate" type="string"/>
<Field name="Pattern" type="string"/>
<Field name="Locale" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="random_dateOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field format="yyyy-MM-dd" name="StartDate" type="string"/>
<Field format="yyyy-MM-dd" name="EndDate" type="string"/>
<Field name="Pattern" type="string"/>
<Field name="Locale" type="string"/>
<Field name="FunctionWithLocale" type="string"/>
<Field name="RandomDateWithLocale" type="date"/>
<Field name="FunctionWithoutLocale" type="string"/>
<Field locale="en.US" name="RandomDateWithoutLocale" type="date"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="196" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="date randomDate(string startDate, string endDate, string pattern, string locale)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="540" x="33" y="26">
<attr name="text"><![CDATA[
The randomDate(string, string, string, string) function accepts four string arguments and returns a random date between the dates corresponding to the first and the second arguments. 
These resulting dates are generated at random for different records and different fields. They can be different for both records and fields. The return value can also be equal to the date equivalent to the startDate and/or endDate strings. However, it cannot be any date before startDate nor after endDate.
Both the first and the second arguments are compared to the third, which serves as a pattern, and the resulting dates accept the form according to the locale specified as the fourth string.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/dateRandomDate_StringArguments.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="35" guiY="247" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/dateRandomDate_StringArgumentsOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="440" guiY="247" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="240" guiY="247" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
function void preExecute() {
     setRandomSeed(10);
}

// Transforms input record into output record.
function integer transform() {
	$0.StartDate = $0.StartDate;
	$0.EndDate = $0.EndDate;
	$0.Pattern = $0.Pattern;
	$0.Locale = $0.Locale;
	$0.FunctionWithLocale = "randomDate($0.StartDate,$0.EndDate,$0.Pattern,$0.Locale)";
	$0.RandomDateWithLocale = randomDate($0.StartDate,$0.EndDate,$0.Pattern,$0.Locale);
	$0.FunctionWithoutLocale = "randomDate($0.StartDate,$0.EndDate,$0.Pattern)";
	$0.RandomDateWithoutLocale = randomDate($0.StartDate,$0.EndDate,$0.Pattern);

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT1:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
