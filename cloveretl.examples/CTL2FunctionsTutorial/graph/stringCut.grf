<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Dec 18 10:28:44 CET 2008" guiVersion="0.0.0.devel" id="1229622309380" licenseType="Evaluation Devel" modified="Mon Jun 21 08:28:02 CEST 2010" modifiedBy="cloveruser" name="stringCut" revision="1.40">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="cutInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="Element0" type="integer"/>
<Field name="Element1" type="integer"/>
<Field name="Element2" type="integer"/>
<Field name="Element3" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="cutOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="List" type="string"/>
<Field name="Function" type="string"/>
<Field name="Result" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="213" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="string[] cut(string Arg, integer[] integerList)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="547" x="74" y="44">
<attr name="text"><![CDATA[
The cut(string, integer[]) function accepts two arguments: the first is string and the second is list of integers. The function returns a list of strings. 
The number of elements of the list specified as the second argument must be even. The integers serve as index (each number in the odd position) and length (each number in the even position). Substrings of the specified length are taken from the string specified as the first argument starting from the specified index (string is indexed starting from 0). The resulting substrings are returned as list of strings. 
For example, cut("somestringasanexample",[2,3,1,5]) returns ["mes","omest"].]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/stringCut.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="48" guiY="280" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/stringCutOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="452" guiY="280" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="244" guiY="280" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {

// Declarations.
integer[] lw;
string[] lofstrings;

// Creates a list from the even number of integer numbers. The first number within each pair means index, the second means how many characters will be taken for the substring.
// First pair of numbers. (First number and second number.)
push(lw,$0.Element0);
push(lw,$0.Element1);
// Second pair of numbers. (Third number and fourth number.)
push(lw,$0.Element2);
push(lw,$0.Element3);

// Creates a list of substrings. Each substring will be generated using one pair of integer numbers. Thus, two substrings will be created using four integer numbers. The new list of substrings will have two elements.
lofstrings=cut($0.Arg,lw);

// (We know that there are two elements of the list.)

// Concatenates the individual strings for printing.
$0.Arg = $0.Arg;
$0.List = concat("[",num2str(lw[0]),",",num2str(lw[1]),",",num2str(lw[2]),",",num2str(lw[3]),"]");
$0.Function = "cut($0.Arg,$0.List)";
$0.Result = concat("[",lofstrings[0],",",lofstrings[1],"]");
return 0;
}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="false" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
