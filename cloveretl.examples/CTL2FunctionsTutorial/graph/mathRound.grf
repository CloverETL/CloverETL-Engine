<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Mon Feb 23 11:29:37 CET 2009" guiVersion="0.0.0.devel" id="1235387325275" licenseType="Evaluation Devel" modified="Mon Jun 14 14:14:26 CEST 2010" modifiedBy="cloveruser" name="string2bits" revision="1.101">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="roundInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="32" name="Decimal" scale="3" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="roundOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="32" name="Decimal" scale="3" type="decimal"/>
<Field name="Function" type="string"/>
<Field name="Result" type="long"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="222" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="long round(decimal arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="640" x="52" y="-102">
<attr name="text"><![CDATA[
The round(decimal) function takes one decimal argument and rounds its value to a long. 

By default, decimal number has 8 significant digits, including 2 digits after the decimal dot. For this reason, we have set Decimals to 32 significant digits (Length == number of significant digits) and 3 digits after the decimal dot (Scale == digits after the decimal dot).

We can see how Clover rounds the non-integer fractions while preserving only the integer parts of decimal values.

As regards decimal numbers that are greater than maximum long number or less than minimum long, such truncations (of decimal greater than maximum positive long or less than minimum negative long) are meaningless. Graph should fail.



]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="100" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="long round(number arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="637" x="54" y="136">
<attr name="text"><![CDATA[
Another function with similar meaning is: long round(number arg).]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/mathRound.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="55" guiY="259" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/mathTruncOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="564" guiY="260" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="273" guiY="262" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.Decimal = $0.Decimal;
	$0.Function = "round($0.Decimal)";
	$0.Result = round($0.Decimal);

	return 0;
}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="true" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
