<?xml version="1.0" encoding="UTF-8"?>
<Graph author="milos_kovalcik" created="Wed Jan 21 09:06:38 CET 2009" guiVersion="0.0.0.devel" id="1232534199144" licenseType="Evaluation Devel" modified="Mon Jul 12 11:57:55 CEST 2010" modifiedBy="cloveruser" name="miscellaneousPrintLog" revision="1.29">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="messageForPrint_log" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Message" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="print_logOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Message" type="string"/>
<Field name="FunctionForDebugLogLevel" type="string"/>
<Field name="FunctionForInfoLogLevel" type="string"/>
<Field name="FunctionForWarnLogLevel" type="string"/>
<Field name="FunctionForErrorLogLevel" type="string"/>
<Field name="FunctionForFatalLogLevel" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="172" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="void printLog(string logLevel, anytype message)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="514" x="41" y="-2">
<attr name="text"><![CDATA[
The printLog(string, anytype) function accepts two arguments: the first is a string with the meaning of log level and the second is a message of any data type.
The first argument is one of the following: debug, info, warn, error, fatal. The log level must be specified as a constant in the function. It can be neither received through an edge nor defined as variable. 
The function takes the arguments and prints the message to stdout.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="118" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Example" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="517" x="42" y="189">
<attr name="text"><![CDATA[
Here we have used messages of string data type. 
However, we could also print a message of any other data type: integer, boolean, number, etc.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/miscellaneousPrintLog.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="30" guiY="326" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/miscellaneousPrintLog.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="435" guiY="326" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="235" guiY="326" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	printLog(debug,$0.Message);
	printLog(info,$0.Message);
	printLog(warn,$0.Message);
	printLog(error,$0.Message);
	printLog(fatal,$0.Message);
			
	$0.Message = $0.Message;
	$0.FunctionForDebugLogLevel = 'printLog(debug,$0.Message)';
	$0.FunctionForInfoLogLevel = 'printLog(info,$0.Message)';
	$0.FunctionForWarnLogLevel = 'printLog(warn,$0.Message)';
	$0.FunctionForErrorLogLevel = 'printLog(error,$0.Message)';
	$0.FunctionForFatalLogLevel = 'printLog(fatal,$0.Message)';
	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT1:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
