<?xml version="1.0" encoding="UTF-8"?>
<Graph author="milos_kovalcik" created="Fri Dec 19 12:59:32 CET 2008" guiVersion="0.0.0.devel" id="1229700397062" licenseType="Evaluation Devel" modified="Thu Jun 24 10:54:35 CEST 2010" modifiedBy="avackova" name="mathSetRandomSeed" revision="1.74">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="input" recordDelimiter="\n" type="delimited">
<Field name="data" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="setRandomSeedOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n\\|\n" type="delimited">
<Field auto_filling="source_name" name="FunctionRandomBoolean" type="string"/>
<Field auto_filling="default_value" default="true" name="RandomBoolean" type="boolean"/>
<Field auto_filling="source_name" name="FunctionRandom" type="string"/>
<Field auto_filling="source_name" name="FunctionRandomDate" type="string"/>
<Field auto_filling="source_timestamp" name="RandomDate" type="date"/>
<Field auto_filling="source_size" name="Random" type="decimal"/>
<Field auto_filling="source_name" name="FunctionRandomGaussian" type="string"/>
<Field auto_filling="graph_reader_row_count" name="RandomGaussian" type="decimal"/>
<Field auto_filling="source_name" name="FunctionRandomInteger" type="string"/>
<Field auto_filling="global_row_count" name="RandomInteger" type="integer"/>
<Field auto_filling="source_name" name="FunctionRandomLong" type="string"/>
<Field auto_filling="source_row_count" name="RandomLong" type="long"/>
<Field auto_filling="source_name" name="FunctionRandomString" type="string"/>
<Field name="RandomString" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="152" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="void setRandomSeed(long arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="484" x="79" y="55">
<attr name="text"><![CDATA[
The setRandomSeed(long) function generates a random seed for the functions that generate random values of any type. 
This function should be used in preExecute(). 
In such a case, the values generated by any random function remain unchanged during different runs of the graph and after reset of the graph as well.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/hack.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="109" guiY="240" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/mathSetRandomSeedOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="432" guiY="240" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="281" guiY="240" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.FunctionRandomBoolean = "randomBoolean()";
	$0.RandomBoolean = randomBoolean();
	$0.FunctionRandomDate = "randomDate(\"2010.01.01\",\"2010.12.31\",\"yyyy.MM.dd\")";
	$0.RandomDate = randomDate("2010.01.01","2010.12.31","yyyy.MM.dd");
	$0.FunctionRandom = "random()";
	$0.Random = random();
	$0.FunctionRandomGaussian = "randomGaussian()";
	$0.RandomGaussian = randomGaussian();
	$0.FunctionRandomInteger = "randomInteger(0,100)";
	$0.RandomInteger = randomInteger(0,100);
	$0.FunctionRandomLong = "randomLong(0,100)";
	$0.RandomLong = randomLong(0,100);
	$0.FunctionRandomString = "randomString(3,5)";
	$0.RandomString = randomString(3,5);
	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
function void preExecute() {
     setRandomSeed(1234567890);
}

// Called only if transform() throws an exception.
//function integer transformOnError(string errorMessage, string stackTrace) {
//}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
