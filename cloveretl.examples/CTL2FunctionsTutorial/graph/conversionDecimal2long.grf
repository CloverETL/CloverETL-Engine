<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Mon Feb 23 11:29:37 CET 2009" guiVersion="0.0.0.devel" id="1235387325275" licenseType="Evaluation Devel" modified="Fri Jun 18 18:03:32 CEST 2010" modifiedBy="cloveruser" name="conversionDecimal2long" revision="1.89">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="decimal2longInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="32" name="Decimal" scale="3" type="decimal"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="decimal2longOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="32" name="Decimal" scale="3" type="decimal"/>
<Field name="Function" type="string"/>
<Field name="Result" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="decimal2longWhetherBoolean" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="32" name="Decimal" scale="3" type="decimal"/>
<Field name="Function" type="string"/>
<Field name="Result" type="boolean"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="283" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="long decimal2long(decimal arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="695" x="51" y="-82">
<attr name="text"><![CDATA[
The decimal2long(decimal) function takes one decimal argument and converts it to a long value. 

By default, decimal number has 8 significant digits, including 2 digits after the decimal dot. For this reason, we have set Decimals to 32 significant digits (Length == number of significant digits) and 3 digits after the decimal dot (Scale == digits after the decimal dot).

We can see how Clover truncates the non-integer fractions while preserving only the integer parts of decimal values.

As regards decimal numbers that are greater than or equal to maximum nongs, all non-integer fractions are removed, but, e.g., (9223372036854775808) is converted to null automatically. 9223372036854775807 is preserved, but, e.g., 9239223372036854775809 goes to negative value and also other decimals greater than maximum long are converted in an unpredictable way. Such conversions (of decimal greater than maximum positive long or less than minimum negative long) are meaningless. Graph should fail.

On the other hand, any long can be mapped to a decimal without any restriction and loss of information.

The second Reformat is in the PassThrough mode. If you enable it, you can see how maximum long and minimum long are converted to null.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/conversionDecimal2long.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="55" guiY="259" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/conversionDecimal2longOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="629" guiY="258" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="273" guiY="262" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.Decimal = $0.Decimal;
	$0.Function = "decimal2long($0.Decimal)";
	$0.Result = decimal2long($0.Decimal);

	return 0;
}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Node enabled="passThrough" guiHeight="0" guiName="Whether is null" guiWidth="0" guiX="457" guiY="261" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.Decimal = $0.Decimal;
	$0.Function = $0.Function;
	$0.Result = isnull($0.Result);

	return 0;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="REFORMAT1:0"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
