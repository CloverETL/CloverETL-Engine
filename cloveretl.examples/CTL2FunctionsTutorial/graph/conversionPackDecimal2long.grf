<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Wed Jul 15 09:57:30 CEST 2009" guiVersion="0.0.0.devel" id="1247650020462" licenseCode="Commercial Devel" licenseType="Evaluation Devel" modified="Thu Apr 14 13:27:01 CEST 2011" modifiedBy="cloveruser" name="conversionLong2packDecimal" revision="1.40" showComponentDetails="false">
<Global>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="PackDecimal2LongInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="PackDecimal" nullable="true" shift="0" type="byte"/>
<Field eofAsDelimiter="false" name="PackDecimalHex" nullable="true" shift="0" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="PackDecimal2longOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" recordSize="-1" type="delimited">
<Field eofAsDelimiter="false" name="PackDecimal" nullable="true" shift="0" size="0" type="byte"/>
<Field eofAsDelimiter="false" name="PackDecimalHex" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="Function" nullable="true" shift="0" size="0" type="string"/>
<Field eofAsDelimiter="false" name="Result" nullable="true" shift="0" size="0" type="long"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="150" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="long packDecimal2long(byte arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="426" x="22" y="16">
<attr name="text"><![CDATA[
The packDecimal2long(byte) function takes an array of bytes and converts it to a long data type. 
The input is also displayed in its hexadecimal representation since some bytes are unprintable.
Its counterpart is the long2packDecimal(long) function.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node charset="ISO-8859-1" enabled="enabled" fileURL="${DATAIN_DIR}/conversionPackDecimal2long.txt" guiName="UniversalDataReader" guiX="26" guiY="197" id="DATA_READER1" type="DATA_READER"/>
<Node charset="ISO-8859-1" enabled="enabled" fileURL="${DATAOUT_DIR}/conversionPackDecimal2longOverview.txt" guiName="UniversalDataWriter" guiX="394" guiY="197" id="DATA_WRITER1" type="DATA_WRITER"/>
<Node enabled="enabled" guiName="Reformat" guiX="210" guiY="197" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.PackDecimalHex = $0.PackDecimalHex;
	$0.PackDecimal = $0.PackDecimal;
	$0.Function = "packDecimal2long($0.PackDecimal)";
	$0.Result = packDecimal2long($0.PackDecimal);

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="false" fromNode="DATA_READER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT1:0"/>
<Edge debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER1:0"/>
</Phase>
</Graph>
