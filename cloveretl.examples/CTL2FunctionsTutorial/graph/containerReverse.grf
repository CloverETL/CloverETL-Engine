<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Dec 18 10:28:44 CET 2008" guiVersion="0.0.0.devel" id="1229608164792" licenseType="Evaluation Devel" modified="Mon Jul 12 10:46:43 CEST 2010" modifiedBy="cloveruser" name="containerReverse" revision="1.73">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="forReverseInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="ListElement0" type="string"/>
<Field name="ListElement1" type="string"/>
<Field name="ListElement2" type="string"/>
<Field name="ListElement3" type="string"/>
<Field name="ListElement4" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="reverseOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="List" type="string"/>
<Field name="Function" type="string"/>
<Field name="ReturnValue" type="string"/>
<Field name="NewValueOfList" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="158" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Example" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="421" x="43" y="179">
<attr name="text"><![CDATA[
Here we use lists consisting of string elements. 
List consists of 5 elements. 
reverse(List) reverses the order of the list elements.
And after the function is executed, List consists of 5 resulting elements in reversed order.
The function returns this new value of List.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="140" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="elementtype[] remove(elementtype[] arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="420" x="44" y="27">
<attr name="text"><![CDATA[
The reverse(elementtype[]) function accepts one argument of list of any data type. It takes this argument, reverses the order of elements of the list and returns such new list. 
The list specified as the argument changes to this new value.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/containerReverse.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="40" guiY="349" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/containerReverseOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="432" guiY="349" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="242" guiY="349" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {

//Declarations.
string[] list1;

// Creates the original list.
push(list1,$0.ListElement0);
push(list1,$0.ListElement1);
push(list1,$0.ListElement2);
push(list1,$0.ListElement3);
push(list1,$0.ListElement4);

//Prints the original list, the return value of the function and the new value of the original list.
$0.List = toString(list1);
$0.Function = "reverse(list1)";
$0.ReturnValue = toString(reverse(list1));
$0.NewValueOfList = toString(list1);
return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
