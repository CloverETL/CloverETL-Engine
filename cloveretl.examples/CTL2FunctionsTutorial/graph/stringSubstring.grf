<?xml version="1.0" encoding="UTF-8"?>
<Graph author="milos_kovalcik" created="Thu Dec 18 12:51:41 CET 2008" guiVersion="0.0.0.devel" id="1229624844609" licenseType="Evaluation Devel" modified="Mon Jul 12 12:28:52 CEST 2010" modifiedBy="cloveruser" name="stringSubstring" revision="1.17">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="substringInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="FromIndex" type="integer"/>
<Field name="Length" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="substringOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="FromIndex" type="integer"/>
<Field name="Length" type="integer"/>
<Field name="Function" type="string"/>
<Field name="Result" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="168" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="string substring(string arg, integer fromIndex, integer length)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="501" x="27" y="27">
<attr name="text"><![CDATA[
The substring(string, integer, integer) function accepts three arguments: the first is string and the other two are integers. The function takes the arguments and returns a substring of the defined length obtained from the original string by getting the length number of characters starting from the index defined by the second argument. 
Strings are indexed starting from 0.
Thus, substring("text", 1, 2) returns "ex".]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/stringSubstring.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="29" guiY="222" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/stringSubstringOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="434" guiY="222" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="234" guiY="222" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.Arg = $0.Arg;
	$0.FromIndex = $0.FromIndex;
	$0.Length = $0.Length;
	$0.Function = "substring($0.Arg,$0.FromIndex,$0.Length)";
	$0.Result = substring($0.Arg,$0.FromIndex,$0.Length);

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT1:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT1:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
