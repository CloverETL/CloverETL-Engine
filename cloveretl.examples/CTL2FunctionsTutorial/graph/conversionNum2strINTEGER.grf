<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Mar 19 14:24:06 CET 2009" guiVersion="0.0.0.devel" id="1237480457206" licenseType="Evaluation Devel" modified="Mon Jul 12 11:13:30 CEST 2010" modifiedBy="cloveruser" name="conversionNum2strINTEGER" revision="1.43">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="num2strINTEGERInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Number" type="integer"/>
<Field name="Radix" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="num2strINTEGEROverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Number" type="integer"/>
<Field name="Radix" type="integer"/>
<Field name="Function" type="string"/>
<Field name="Result" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="100" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Example - integer data type" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="571" x="24" y="163">
<attr name="text"><![CDATA[
When working with integer data type, any integer number can be used as radix.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="133" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="string num2str(integer Arg, integer Radix)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="572" x="21" y="14">
<attr name="text"><![CDATA[
The num2str(integer, integer) function accepts two integer arguments.
It takes these two arguments and converts the first to its string representation in the radix based numeric system. 
]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/conversionNum2strINTEGER.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="28" guiY="290" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/conversionNum2stringINTEGEROverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="461" guiY="290" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="252" guiY="290" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.Number = $0.Number;
	$0.Radix = $0.Radix;
	$0.Function = "num2str($0.Number,$0.Radix)";
	$0.Result = num2str($0.Number,$0.Radix);

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
