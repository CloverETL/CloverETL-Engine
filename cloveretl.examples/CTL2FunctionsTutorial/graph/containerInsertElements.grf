<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Dec 18 10:28:44 CET 2008" guiVersion="0.0.0.devel" id="1229608164792" licenseType="Evaluation Devel" modified="Mon Jul 12 10:43:05 CEST 2010" modifiedBy="cloveruser" name="containerInsert" revision="1.100">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="forInsertElementsInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="ListElement0" type="string"/>
<Field name="ListElement1" type="string"/>
<Field name="ListElement2" type="string"/>
<Field name="ListElement3" type="string"/>
<Field name="Index" type="integer"/>
<Field name="NewElement1" type="string"/>
<Field name="NewElement2" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="insertElementsOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="List" type="string"/>
<Field name="Index" type="integer"/>
<Field name="NewElement1" type="string"/>
<Field name="NewElement2" type="string"/>
<Field name="Function" type="string"/>
<Field name="ReturnValue" type="string"/>
<Field name="NewValueOfList" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="179" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="elementtype[] insert(elementtype[] List1, integer Index, elementtype newelement1, elementtype ..., elementtype newelementN)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="815" x="77" y="10">
<attr name="text"><![CDATA[
The insert(elementtype[], integer, elementtype, ..., elementtype) function accepts unlimited number of arguments. 
The first argument is a list of any data type, the second is integer and all of the others are of the same data type as list elements.
The function inserts the new elements into the list into positions starting from that whose index is specified as the second argument.
The list changes to this new value and this list is also returned.
Positions in the list are indexed starting from 0.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="130" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Example" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="421" x="78" y="219">
<attr name="text"><![CDATA[
Here we use a list consisting of 4 string elements. 
We are inserting two new string element into the list starting from the specified positions. The resulting list has 6 elements. 
]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/containerInsertElements.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="78" guiY="377" id="DATA_READER0" type="DATA_READER" verbose="true"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/containerInsertElementsOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="470" guiY="377" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="280" guiY="377" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {

//Declarations.
string[] list1;
string[] list2;
boolean bool;

// Creates the original list1.
push(list1,$0.ListElement0);
push(list1,$0.ListElement1);
push(list1,$0.ListElement2);
push(list1,$0.ListElement3);

//Prints the original list, the position starting from which the elements are inserted into the list, two elements that should be inserted, the return value of the function and the new value of the list. 
$0.List = toString(list1);

//Inserts two new elements into the original list. list1 has been changed to its new value.
list2 = insert(list1,$0.Index,$0.NewElement1,$0.NewElement2);

$0.Index = $0.Index;
$0.NewElement1 = $0.NewElement1;
$0.NewElement2 = $0.NewElement2;
$0.Function = "insert(list1,$0.Index,$0.NewElement1,$0.NewElement2)";
$0.ReturnValue = toString(list2);
$0.NewValueOfList = toString(list1);
return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
