<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Mon Jan 26 14:04:02 CET 2009" guiVersion="0.0.0.devel" id="1232976969504" licenseType="Evaluation Devel" modified="Mon Jul 12 12:00:38 CEST 2010" modifiedBy="cloveruser" name="stringChop1Argument" revision="1.29">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record name="chop1ArgumentInput" previewAttachmentCharset="ISO-8859-1" type="delimited">
<Field delimiter=";" name="InputField1" type="string"/>
<Field delimiter="\r\n" name="InputField2" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="chop1ArgumentOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="InputField1" type="string"/>
<Field name="InputField2" type="string"/>
<Field name="FunctionForField1" type="string"/>
<Field name="OutputField1" type="string"/>
<Field name="OutputField2" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="139" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="string chop(string arg)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="495" x="30" y="19">
<attr name="text"><![CDATA[
The chop(string) function accepts one string argument. The function takes this argument, removes the line feed and the carriage return characters from the end of the string specified as the argument and returns the new string without these characters.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/stringChop1Argument.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="32" guiY="178" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/stringChop1ArgumentOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="448" guiY="178" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="236" guiY="178" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$0.InputField1 = $0.InputField1;
	$0.InputField2 = $0.InputField2;
	$0.FunctionForField1 = "chop($0.InputField1)";
	$0.OutputField1 = chop($0.InputField1);
	$0.OutputField2 = $0.InputField2;

	return 0;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="true" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
