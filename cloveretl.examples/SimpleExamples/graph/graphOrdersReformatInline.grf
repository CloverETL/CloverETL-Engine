<?xml version="1.0" encoding="UTF-8"?>
<Graph author="yanas" created="Wed Mar 07 09:01:26 CET 2007" description="This example illustrates usage of Reformat component with transformation&#10;code (class) inlined (saved with the graph itself). The source code&#10;is automatically compiled at runtime.&#10;For successfull compilation, tools.jar library must be part of CLASSPATH.&#10;" guiVersion="0.0.0.devel" id="1204549413620" licenseType="Evaluation Devel" modified="Fri Jun 10 16:08:35 CEST 2011" modifiedBy="avackova" name="Testing Reformat" revision="1.30" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/ordersInfo.fmt" id="Metadata1"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="246" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of Reformat" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="523" x="20" y="136">
<attr name="text"><![CDATA[
The graph demonstrates the use of Reformat. In this graph, transformation is defined using the Transform attribute and it is written in Java directly in the graph. It can be seen in the Source tab.

Transformation can also be written in the source code in Clover transformation language (graphOrdersTLReformat.grf).

It can also be written in an external file in Java or CTL. See graphOrdersReformatExternTransform.grf or graphOrdersTLReformatExtern.grf, respectively.

Also a compiled Java class can be used: graphOrdersReformat.grf.

All of these options are equivalent ways of defining the transformation. Most component allow to use the same 5 options. Only MultiLevelReader, JMSReader, JMSWriter, and JavaExecute do not allow the use of CTL.

]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="101" guiName="Orders" guiWidth="128" guiX="20" guiY="20" id="INPUT" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/orders.dat.out" guiHeight="101" guiName="Orders Transformed" guiWidth="173" guiX="370" guiY="20" id="OUTPUT" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="69" guiName="Reformat" guiWidth="128" guiX="195" guiY="20" id="REF" type="REFORMAT">
<attr name="transform"><![CDATA[
import org.jetel.component.DataRecordTransform;
import org.jetel.data.*;


public class ReformatOrdersInline extends DataRecordTransform{

	int counter=0;
	int field=0;

	public int transform(DataRecord[] source, DataRecord[] target){
		StringBuffer strBuf=new StringBuffer(80);
		if (source[0]==null){
		   System.err.println("NULL source[0]");
		}
		try{
			// let's concatenate shipping address into one long string
			strBuf.append(GetVal.getString(source[0],"ShipName")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipAddress")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCity")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCountry"));
			// mapping among source & target fields
			// some fields get assigned directly from source fields, some
			// are assigned from internall variables
			SetVal.setInt(target[0],"PRODUCTID",counter);
			SetVal.setInt(target[0],"ORDERID",GetVal.getInt(source[0],"OrderID"));
			SetVal.setString(target[0],"CUSTOMERID",GetVal.getString(source[0],"CustomerID"));
			SetVal.setString(target[0],"CUSTOMER",strBuf.toString());
			SetVal.setInt(target[0], "SHIPTIME", (int)( (GetVal.getDate(
					source[0], "RequiredDate").getTime() - GetVal.getDate(
					source[0], "ShippedDate").getTime())
					/ 1000 / 60 / 60 / 24));
		}catch(Exception ex){
		  ex.printStackTrace();
			errorMessage=ex.getMessage()+" ->occured with record :"+counter;
			return SKIP;
		}
		counter++;
			return ALL;
	}
}
]]></attr>
</Node>
<Edge fromNode="INPUT:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REF:0"/>
<Edge fromNode="REF:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="OUTPUT:0"/>
</Phase>
</Graph>
