<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Nov 22 10:24:41 CET 2006" description="This graph illustrates complex transformation. It reads data about orders made and&#10;combines them (joins) with data about which items were purchased. It then adds&#10;information about which company made particular order/bought particular item.&#10;It illustrates usage of DBFDataReader,Sort,MergeJoin,HashJoin,Filter.&#10;&#10;It also shows how to embed data transformation routine directly into transformation&#10;graph layou file (both joins have the transformations embedded - see below).&#10;&#10;Note: It is faster to reference record's fields by index as opposite to names - used&#10;in this example.&#10;" guiVersion="4.5.0.M1" id="1204544305665" licenseCode="Javlin-Internal-License" licenseType="Evaluation Devel" modified="Wed Sep 14 12:52:22 CEST 2011" modifiedBy="avackova" name="ComplexTransformation" revision="1.95" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/customers.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/incorrectRecords.fmt" id="Metadata4"/>
<Metadata fileURL="${META_DIR}/delimited/ordersInfo.fmt" id="Metadata3"/>
<Metadata fileURL="${META_DIR}/fixlen/odetailsDBF.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/fixlen/ordersDBF.fmt" id="Metadata2"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="ExtSort (ORDERID)" guiX="174" guiY="156" id="EXT_SORT_DETAILS" sortKey="ORDERID(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiName="ExtSort (ORDERID)" guiX="174" guiY="33" id="EXT_SORT_ORDERS" sortKey="ORDERID(a)" type="EXT_SORT"/>
<Node enabled="enabled" guiName="Filter &quot;N/A&quot; Customers" guiX="809" guiY="88" id="FILTER" type="EXT_FILTER">
<attr name="guiDescription"><![CDATA[Records without a customer name are rejected and records with a customer name are accepted.]]></attr>
<attr name="filterExpression"><![CDATA[//#CTL2
$CUSTOMER!="N/A"]]></attr>
</Node>
<Node charset="UTF-8" dataPolicy="controlled" enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers_delimited.txt" guiName="Customers (Controlled)" guiX="361" guiY="247" id="IN_CUSTOMERS" quotedStrings="true" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Customers who made the orders]]></attr>
</Node>
<Node charset="IBM850" enabled="enabled" fileURL="${DATAIN_DIR}/other/ODETAILS.DBF" guiName="Orders Details" guiX="8" guiY="156" id="IN_DETAILS" type="DBF_DATA_READER">
<attr name="guiDescription"><![CDATA[Information about individual items of each order (details)]]></attr>
</Node>
<Node charset="IBM850" enabled="enabled" fileURL="${DATAIN_DIR}/other/ORDERS.DBF" guiName="Orders General" guiX="8" guiY="33" id="IN_ORDERS" type="DBF_DATA_READER">
<attr name="guiDescription"><![CDATA[Information about the orders as a whole]]></attr>
</Node>
<Node ascendingInputs="true" enabled="enabled" guiName="Orders Complete Info" guiX="372" guiY="87" id="JOIN" joinKey="$ORDERID#$ORDERID;" joinType="leftOuter" type="EXT_MERGE_JOIN">
<attr name="transform"><![CDATA[
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.jetel.component.DataRecordTransform;
import org.jetel.data.*;
import org.jetel.exception.TransformException;

public class JoinOrdersDetailsInline extends  DataRecordTransform{

	long shiptime;
	SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");

	private double price_per_unit(double unit_price,double quantity,double discount){
	return (unit_price*quantity - discount)/quantity;
}
private long ship_time(Date ordered,Date shipped) throws TransformException{
	if (shipped.compareTo(ordered) < 1) throw new TransformException("Ship time can't be lower than order date");
	else return (shipped.getTime() - ordered.getTime())/(1000 * 60 * 60 * 24);
}

public int transform(DataRecord[] arg0, DataRecord[] arg1)
		throws TransformException {
	if (!arg0[0].getField("SHIPPEDDAT").isNull()) {
		try {
			shiptime = ship_time((Date)arg0[0].getField("ORDERDATE").getValue(), df.parse(arg0[0].getField("SHIPPEDDAT").toString()));
		} catch (ParseException e) {
			throw new TransformException(e.getMessage());
		}
	}else{
		shiptime = -1;
	}
	arg1[0].getField("ORDERID").setValue(arg0[0].getField("ORDERID"));
	arg1[0].getField("CUSTOMERID").setValue(arg0[0].getField("CUSTOMERID"));
	arg1[0].getField("PRODUCTID").setValue(arg0[1].getField("PRODUCTID"));
	arg1[0].getField("UNITPRICE").setValue(arg0[1].getField("UNITPRICE"));
	arg1[0].getField("QUANTITY").setValue(arg0[1].getField("QUANTITY"));
	arg1[0].getField("DISCOUNT").setValue(arg0[1].getField("DISCOUNT"));
	arg1[0].getField("PRICE_PER_UNIT").setValue(price_per_unit(
			(Double)arg0[1].getField("UNITPRICE").getValue(), 
			(Double)arg0[1].getField("QUANTITY").getValue(), 
			(Double)arg0[1].getField("DISCOUNT").getValue()));
	arg1[0].getField("SHIPTIME").setValue(shiptime);
	return ALL;
}
}
]]></attr>
<attr name="guiDescription"><![CDATA[joinType is set to "Left outer join" to process also Orders without Details. slaveDuplicates attribute is set to true as order may include multiple ordered items.]]></attr>
</Node>
<Node enabled="enabled" guiName="Orders and Customers" guiX="595" guiY="87" id="JOIN_CUSTOMER" joinKey="$CUSTOMERID=$CUSTOMERID" joinType="leftOuter" type="EXT_HASH_JOIN">
<attr name="transform"><![CDATA[import org.jetel.component.DataRecordTransform;
import org.jetel.data.*;

public class JoinCustomersInline extends  DataRecordTransform{

	Object companyName;

	public int transform(DataRecord[] source, DataRecord[] target){
		target[0].copyFieldsByPosition(source[0]);
		companyName = source[1].getField("CompanyName").getValue();
		target[0].getField("CUSTOMER").setValue(companyName != null ? companyName : "N/A");
		return ALL;
	}
}]]></attr>
<attr name="guiDescription"><![CDATA[joinType is set to "Left outer join" as we want to join also the orders without a customer. But customers without an order will be ignored and will not be sent to the output. slaveDuplicates attribute is set to "false" as customers are unique in the flat file.]]></attr>
</Node>
<Node enabled="enabled" guiName="Incorrect Customers" guiX="624" guiY="281" id="TRASH0" type="TRASH"/>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/joinedDBForders.out" guiName="Orders-Customers" guiX="1036" guiY="26" id="WRITER1" type="DATA_WRITER"/>
<Node charset="UTF-8" enabled="enabled" fileURL="${DATAOUT_DIR}/joinedDBFordersNA.out" guiName="Orders-N/ACustomers" guiX="1036" guiY="161" id="WRITER2" type="DATA_WRITER"/>
<Edge debugMode="true" fromNode="EXT_SORT_DETAILS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (slave)" metadata="Metadata1" outPort="Port 0 (out)" toNode="JOIN:1"/>
<Edge debugMode="true" fromNode="EXT_SORT_ORDERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (driver)" metadata="Metadata2" outPort="Port 0 (out)" toNode="JOIN:0"/>
<Edge debugMode="false" fromNode="FILTER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (accepted)" toNode="WRITER1:0"/>
<Edge debugMode="false" fromNode="FILTER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 1 (rejected)" toNode="WRITER2:0"/>
<Edge debugMode="false" fromNode="IN_CUSTOMERS:0" guiBendpoints="41:0|41:197" guiRouter="Manhattan" id="Edge15" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 0 (output)" toNode="JOIN_CUSTOMER:1"/>
<Edge debugMode="true" fromNode="IN_CUSTOMERS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 1 (logs)" toNode="TRASH0:0"/>
<Edge debugMode="false" fromNode="IN_DETAILS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_SORT_DETAILS:0"/>
<Edge debugMode="false" fromNode="IN_ORDERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="EXT_SORT_ORDERS:0"/>
<Edge debugMode="true" fromNode="JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (driver)" metadata="Metadata3" outPort="Port 0 (out)" toNode="JOIN_CUSTOMER:0"/>
<Edge debugMode="true" fromNode="JOIN_CUSTOMER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="FILTER:0"/>
</Phase>
</Graph>
