<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Fri Jan 12 15:46:21 CET 2007" description="This graph demonstrates usage of Node-level parameters" guiVersion="0.0.0.devel" id="1204549694917" licenseType="Evaluation Devel" modified="Fri Jun 10 16:12:42 CEST 2011" modifiedBy="avackova" name="Testing Simple Lookup with parameters" revision="1.33" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/employees.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/joinedOrders.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata2"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="412" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of the Reformat component" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="642" x="24" y="136">
<attr name="text"><![CDATA[
In this graph, Orders are joined with Employees on the EmployeeID field in the Reformat component. A lookup table is created in Reformat. It is filled there and used for join of Orders with Employees.

Orders data is received through the single input port. Employees data is added for join in Reformat itself.

The specified transformation performs Inner join. In other words, orders without corresponding employee are not sent to transform function. Nor the employees without corresponding order.

Transformation is defined in the Transform attribute. It is written in Java directly in the graph and can be seen in the Source tab.

This graph is an equivalent of others that give the same result. They are the following:

- graphJoinHash.grf (In it, the same transformation is defined using the Transform class attribute. It specifies compiled Java class performing the transformation.)

- graphJoinHashUsingTransformLanguage.grf (In it, the same transformation is defined using the Transform attribute. It is written in Clover transformation language directly in the graph and can be seen in the Source tab.)

- graphJoinData.grf (In it, the same transformation is defined using the ExtMergeJoin component instead of ExtHashJoin. Also there, the transformation is defined in the Transform class attribute. Unlike ExtHashJoin, ExtMergeJoin requires the inputs to be sorted.)

- graphParametrizedLookup.grf (In it, the same transformation is defined using the Reformat component instead of ExtHashJoin or ExtMergeJoin. Lookup table is defined in the Reformat and it is filled with values in that component. The transformation is defined in the Transform attribute. It is written in Java directly in the graph and can be seen in the Source tab. The result corresponds to Inner join of a Joiner.)
]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="101" guiName="Orders" guiWidth="128" guiX="24" guiY="24" id="INPUT1" type="DATA_READER"/>
<Node enabled="enabled" guiHeight="85" guiName="Orders joined with Employees" guiWidth="245" guiX="204" guiY="24" id="JOIN" type="REFORMAT">
<attr name="transform"><![CDATA[
import org.jetel.component.DataRecordTransform;
import org.jetel.data.DataRecord;
import org.jetel.data.RecordKey;
import org.jetel.data.lookup.Lookup;
import org.jetel.data.parser.Parser;
import org.jetel.data.parser.TextParserConfiguration;
import org.jetel.data.parser.TextParserFactory;
import org.jetel.exception.ComponentNotReadyException;
import org.jetel.lookup.SimpleLookupTable;
import org.jetel.metadata.DataRecordMetadata;

public class ReformatTestInline extends DataRecordTransform{

	Lookup mylookup;

	public boolean init() throws ComponentNotReadyException{

		TextParserConfiguration parserCfg = new TextParserConfiguration();
		DataRecordMetadata lookupMetadata = getDataRecordMetadata("Metadata0");
		parserCfg.setMetadata(lookupMetadata);
		Parser parser = TextParserFactory.getParser(parserCfg);
		parser.init();
	    String[] lookupKeyStr=new String[1];
	    lookupKeyStr[0]=parameters.getProperty("keyField");
		SimpleLookupTable lt = new SimpleLookupTable("mylookup",lookupMetadata, lookupKeyStr ,parser);
		lt.setFileURL(parameters.getProperty("lookupFile"));
		getGraph().addLookupTable(lt);
		// create key 
		RecordKey key=new RecordKey(lookupKeyStr,sourceMetadata[0]);
		key.init();
		lt.init();
		mylookup = lt.createLookup(key);
		return true;
	}

	public int transform(DataRecord[] source, DataRecord[] target){
	        
		mylookup.seek(source[0]);
		
		if (!mylookup.hasNext()) return SKIP; // skip this one
		
		DataRecord employee = (DataRecord)mylookup.next();

		target[0].getField(0).setValue(source[0].getField(0).getValue());
  		target[0].getField(1).setValue(source[0].getField(1).getValue());
		target[0].getField(2).setValue(source[0].getField(2).getValue().toString());
		target[0].getField(3).setValue(employee.getField(0).getValue().toString());
		target[0].getField(4).setValue(employee.getField(1).getValue());

		return ALL;
	}
}
]]></attr>
<attr name="guiDescription"><![CDATA[Corresponds to Inner join.]]></attr>
<attr name="lookupFile"><![CDATA[${LOOKUP_DIR}/employees.dat]]></attr>
<attr name="keyField"><![CDATA[EmployeeID]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/joined_data_hash.out" guiHeight="101" guiName="Orders-Employees" guiWidth="162" guiX="504" guiY="24" id="WRITER" type="DATA_WRITER"/>
<Edge fromNode="INPUT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (output)" toNode="JOIN:0"/>
<Edge debugMode="true" fromNode="JOIN:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="WRITER:0"/>
</Phase>
</Graph>
