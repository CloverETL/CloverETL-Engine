<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Fri Jan 12 15:46:21 CET 2007" description="This graph demonstrates functionality of SORT and EXT_MERGE_JOIN components. EXT_MERGE_JOIN components&#10;performs joining of master data with slave data based on specified key. It requires both master and slave&#10;data to be sorted according to used key.  " guiVersion="0.0.0.devel" id="1204546564762" licenseType="Evaluation Devel" modified="Tue Jul 13 09:33:37 CEST 2010" modifiedBy="avackova" name="Testing Joiner" revision="1.94">
<Global>
<Metadata fileURL="${META_DIR}/delimited/employees.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/joinedOrders.fmt" id="Metadata2"/>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata1"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="549" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of the ExtMergeJoin component" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="543" x="36" y="192">
<attr name="text"><![CDATA[
In this graph, Orders are joined with Employees on the EmployeeID field which is used as Join key.

Orders data is received through the master port and Employees data through the first slave port.

Inner join is performed. In other words, orders without corresponding employee are not sent to transform function. Nor the employees without corresponding order.

Transformation is defined in the Transform class attribute. It compiled Java class performing the transformation.

Remember that ExtMergeJoin requires sorted data inputs!

This graph is an equaivalent of others that give the same result. They are the following:

- graphJoinHash.grf (In it, the same transformation is defined using the Transform class attribute. It specifies compiled Java class performing the transformation.)

- graphJoinHashUsingTransformLanguage.grf (In it, the same transformation is defined using the Transform attribute. It is written in Clover transformation language directly in the graph and can be seen in the Source tab. Unlike ExtMergeJoin, ExtHashJoin does not require sorted inputs.)

- graphSimpleLookup.grf (In it, the same transformation is defined using the Reformat component instead of ExtHashJoin or ExtMergeJoin. Lookup table based on the employees.dat file is defined in that graph. The transformation is defined in the Transform attribute. It is written in java directly in the graph and can be seen in the Source tab. The result corresponds to Inner join of a Joiner.)

- graphParametrizedLookup.grf (In it, the same transformation is defined using the Reformat component instead of ExtHashJoin or ExtMergeJoin. Lookup table is defined in the Reformat and it is filled with values in that component. The transformation is defined in the Transform attribute. It is written in Java directly in the graph and can be seen in the Source tab. The result corresponds to Inner join of a Joiner.)

The same result can be achieved using a persitent lookup table as shown in LookupPersistent1.grf in CommercialExamples.

]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="280" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Sorting" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="156" x="201" y="-96">
<attr name="text"><![CDATA[
EmployeeID is used as the Sort key.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="220" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Join of Orders with Employees" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="229" x="384" y="-96">
<attr name="text"><![CDATA[
Inner join:

Orders without an Employee are not joined and transformed.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="25" guiName="ExtSort" guiWidth="50" guiX="216" guiY="108" id="EXT_SORT_EMPL" sortKey="EmployeeID" type="EXT_SORT"/>
<Node enabled="enabled" guiHeight="25" guiName="ExtSort" guiWidth="50" guiX="216" guiY="24" id="EXT_SORT_ORDERS" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="25" guiName="Orders" guiWidth="50" guiX="36" guiY="24" id="INPUT1" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/employees.dat" guiHeight="25" guiName="Employees" guiWidth="50" guiX="36" guiY="108" id="INPUT2" type="DATA_READER"/>
<Node ascendingInputs="true" enabled="enabled" guiHeight="25" guiName="ExtMergeJoin" guiWidth="50" guiX="432" guiY="27" id="JOIN" joinKey="$EmployeeID#$EmployeeID;" transformClass="reformatJoin" type="EXT_MERGE_JOIN"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/joined_data.out" guiHeight="25" guiName="Orders-Employees" guiWidth="50" guiX="636" guiY="24" id="WRITER" type="DATA_WRITER"/>
<Edge debugMode="true" fromNode="EXT_SORT_EMPL:0" guiBendpoints="" id="INNEREDGE2" inPort="Port 1 (slave)" metadata="Metadata0" outPort="Port 0 (out)" router="Manhattan" toNode="JOIN:1"/>
<Edge debugMode="true" fromNode="EXT_SORT_ORDERS:0" guiBendpoints="" id="INNEREDGE1" inPort="Port 0 (driver)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="JOIN:0"/>
<Edge fromNode="INPUT1:0" guiBendpoints="" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (output)" router="Manhattan" toNode="EXT_SORT_ORDERS:0"/>
<Edge fromNode="INPUT2:0" guiBendpoints="" id="INEDGE2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="EXT_SORT_EMPL:0"/>
<Edge debugMode="false" fromNode="JOIN:0" guiBendpoints="" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER:0"/>
</Phase>
</Graph>
