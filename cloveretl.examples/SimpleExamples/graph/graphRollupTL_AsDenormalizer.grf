<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Fri Jan 12 08:41:50 CET 2007" description="This graph demonstrates functionality of DENORMALIZER component with denormalization specified by inline TransformLang source." guiVersion="0.0.0.devel" id="1204545430039" licenseCode="Commercial Devel" licenseType="Evaluation Devel" modified="Mon Jun 13 10:14:09 CEST 2011" modifiedBy="avackova" name="Testing NORMALIZER" revision="1.121" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/Orders1.fmt" id="Metadata0"/>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="customers_count" type="integer">
<attr name="description"><![CDATA[This field contains number of customers, that are listed in 'customers' field.]]></attr>
</Field>
<Field name="customers" type="string"/>
<Field name="EmployeeID" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="groupAccumulator" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="numRec" type="integer"/>
<Field name="customer" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="468" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Output" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="343" x="874" y="-26">
<attr name="text"><![CDATA[




























Outputs are the same in phase 0 and phase 2. Rollup can also work with unsorted records.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Denormalizer" guiX="392" guiY="20" id="DENORMALIZE" key="EmployeeID" order="Asc" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2

string customer = "";
integer employee = 0;
integer numRec = 0;


// This transformation defines the way in which multiple input records 
// (with the same key) are denormalized into one output record. 

// This function is called for each input record from a group of records
// with the same key.
function integer append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
	return OK;
}

// This function is called once after the append() function was called for all records
// of a group of input records defined by the key.
// It creates a single output record for the whole group.
function integer transform() {
	$0.customers_count = numRec;
	$0.customers = customer;
	$0.EmployeeID = employee;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if append() throws an exception.
// function integer appendOnError(string errorMessage, string stackTrace) {
// }

// Called only if transform() throws an exception.
//function integer transformOnError(string errorMessage, string stackTrace) {
//}

// Called after transform() to return the resources that have been used to their initial state
// so that next group of records with different key may be parsed.
function void clean() {
	customer = "";
	employee = 0;
	numRec = 0;
}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="ExtSort (EmployeeID)" guiX="181" guiY="20" id="EXT_SORT0" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiName="Orders Sorted" guiX="20" guiY="20" id="INPUT1" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTL.out" guiName="Customers Grouped for Each Employee" guiX="888" guiY="20" id="WRITER" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER:0"/>
<Edge debugMode="true" fromNode="EXT_SORT0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" router="Manhattan" toNode="DENORMALIZE:0"/>
<Edge debugMode="false" fromNode="INPUT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="EXT_SORT0:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiName="Denormalizer" guiX="392" guiY="128" id="DENORMALIZE1" key="EmployeeID" order="Ignore" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2
string customer = "";
integer employee = 0;
integer numRec = 0;


function integer append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
	return OK;
}

function integer transform() {
	$0.customers_count = numRec;
	$0.customers = customer;
	$0.EmployeeID = employee;
	return ALL;
}

function void clean(){
	customer = "";
	employee = 0;
	numRec = 0;
}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiName="Orders Sorted" guiX="20" guiY="128" id="INPUT2" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTLwithoutOrder.out" guiName="Customers Grouped for An Employee" guiX="888" guiY="128" id="WRITER1" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER1:0"/>
<Edge debugMode="false" fromNode="INPUT2:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="DENORMALIZE1:0"/>
</Phase>
<Phase number="2">
<Node enabled="enabled" guiName="ExtSort (EmployeeID)" guiX="646" guiY="252" id="EXT_SORT1" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiName="Orders Sorted" guiX="20" guiY="252" id="INPUT4" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" groupAccumulatorMetadataId="Metadata1" groupKeyFields="EmployeeID" guiName="Rollup-Need not be sorted" guiX="392" guiY="252" id="ROLLUP0" inputSorted="false" type="ROLLUP">
<attr name="transform"><![CDATA[//#CTL2

// Called for the first data record in a group.
function void initGroup(groupAccumulator groupAccumulator) {
	groupAccumulator.customer = "";
	groupAccumulator.numRec = 0;
}

// Called for each data record in a group (including the first one and the last one).
// Implicitly returns false => updateTransform is not called.
function boolean updateGroup(groupAccumulator groupAccumulator) {
	groupAccumulator.numRec = groupAccumulator.numRec + 1;
	groupAccumulator.customer = iif(groupAccumulator.customer != "", groupAccumulator.customer + " - ", "") + $0.CustomerID;
	return false;
}

// Called for the last data record in a group.
// Implicitly returns true => transform is called.
function boolean finishGroup(groupAccumulator groupAccumulator) {
	return true;
}

// Called to transform data records for intermediate output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group update.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function integer updateTransform(integer counter, groupAccumulator groupAccumulator) {
	return SKIP;
}

// Called to transform data records for output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function integer transform(integer counter, groupAccumulator groupAccumulator) {
	if (counter > 0) return SKIP;
	$0.customers_count = groupAccumulator.numRec;
	$0.customers = groupAccumulator.customer;
	$0.EmployeeID = $0.EmployeeID;
	return ALL;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {
// }

// Called during component initialization.
// function init() {
// }

// Called at the end of the rollup transform after all input data records were processed.
// function finished() {
// }

]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTLwithoutOrder_Rollup.out" guiName="Customers Grouped for Each Employee" guiX="888" guiY="252" id="WRITER3" type="DATA_WRITER"/>
<Edge debugMode="true" fromNode="EXT_SORT1:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER3:0"/>
<Edge debugMode="true" fromNode="INPUT4:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="ROLLUP0:0"/>
<Edge debugMode="false" fromNode="ROLLUP0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="EXT_SORT1:0"/>
</Phase>
</Graph>
