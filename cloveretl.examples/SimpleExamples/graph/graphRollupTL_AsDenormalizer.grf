<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Fri Jan 12 08:41:50 CET 2007" description="This graph demonstrates functionality of DENORMALIZER component with denormalization specified by inline TransformLang source." guiVersion="0.0.0.devel" id="1204545430039" licenseType="Evaluation Devel" modified="Tue Jul 13 11:14:40 CEST 2010" modifiedBy="avackova" name="Testing NORMALIZER" revision="1.118">
<Global>
<Metadata fileURL="${META_DIR}/delimited/Orders1.fmt" id="Metadata0" previewAttachmentCharset="ISO-8859-1"/>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="customers_count" type="integer">
<attr name="description"><![CDATA[This field contains number of customers, that are listed in 'customers' field.]]></attr>
</Field>
<Field name="customers" type="string"/>
<Field name="EmployeeID" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="groupAccumulator" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="numRec" type="integer"/>
<Field name="customer" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="185" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Sort order for Rollup" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="380" x="256" y="272">
<attr name="text"><![CDATA[
When using groupAccumulator, Rollup does not need sorted input and gives the same result (with an accuracy of  order) as Denormalizer with sorted input (phase 0).
Unlike Denormalizer with unsorted input (phase 1) which gives different result.

The phases with Denormalizers are taken from graphDenormalizeTL.grf.

]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="123" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Output" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="155" x="689" y="20">
<attr name="text"><![CDATA[
Outputs are the same in phase 0 and phase 2. Rollup can also work with unsorted records.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="25" guiName="Denormalizer" guiWidth="50" guiX="353" guiY="20" id="DENORMALIZE" key="EmployeeID" order="Asc" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[string customer = "";
int employee = 0;
int numRec = 0;


function append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
}

function transform() {
	$0.customers_count := numRec;
	$0.customers := customer;
	$0.EmployeeID := employee;
}

function clean(){
	customer = "";
	employee = 0;
	numRec = 0;
}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="ExtSort (EmployeeID)" guiWidth="0" guiX="181" guiY="20" id="EXT_SORT0" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiHeight="25" guiName="Orders Sorted" guiWidth="50" guiX="20" guiY="20" id="INPUT1" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTL.out" guiHeight="25" guiName="Customers Grouped for Each Employee" guiWidth="50" guiX="537" guiY="20" id="WRITER" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE:0" guiBendpoints="" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER:0"/>
<Edge debugMode="true" fromNode="EXT_SORT0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" router="Manhattan" toNode="DENORMALIZE:0"/>
<Edge debugMode="false" fromNode="INPUT1:0" guiBendpoints="" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="EXT_SORT0:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiHeight="25" guiName="Denormalizer" guiWidth="50" guiX="353" guiY="104" id="DENORMALIZE1" key="EmployeeID" order="Ignore" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[string customer = "";
int employee = 0;
int numRec = 0;


function append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
}

function transform() {
	$0.customers_count := numRec;
	$0.customers := customer;
	$0.EmployeeID := employee;
}

function clean(){
	customer = "";
	employee = 0;
	numRec = 0;
}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiHeight="25" guiName="Orders Sorted" guiWidth="50" guiX="23" guiY="104" id="INPUT2" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTLwithoutOrder.out" guiHeight="25" guiName="Customers Grouped for An Employee" guiWidth="50" guiX="537" guiY="104" id="WRITER1" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE1:0" guiBendpoints="" id="Edge3" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER1:0"/>
<Edge debugMode="false" fromNode="INPUT2:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="DENORMALIZE1:0"/>
</Phase>
<Phase number="2">
<Node enabled="enabled" guiHeight="0" guiName="ExtSort (EmployeeID)" guiWidth="0" guiX="537" guiY="190" id="EXT_SORT1" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiHeight="25" guiName="Orders Sorted" guiWidth="50" guiX="23" guiY="190" id="INPUT4" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" groupAccumulatorMetadataId="Metadata1" groupKeyFields="EmployeeID" guiHeight="0" guiName="Rollup-Need not be sorted" guiWidth="0" guiX="354" guiY="190" id="ROLLUP0" inputSorted="false" type="ROLLUP">
<attr name="transform"><![CDATA[//#TL

// Called for the first data record in a group.
function initGroup(groupAccumulator) {
	groupAccumulator["customer"] = "";
	groupAccumulator["numRec"] = 0;
}

// Called for each data record in a group (including the first one and the last one).
// Implicitly returns false => updateTransform is not called.
function updateGroup(groupAccumulator) {
	groupAccumulator["numRec"] = groupAccumulator["numRec"] + 1;
	groupAccumulator["customer"] = iif(isnull(groupAccumulator["customer"]) == false, groupAccumulator["customer"] + " - ", "") + $0.CustomerID;
}

// Called for the last data record in a group.
// Implicitly returns true => transform is called.
function finishGroup(groupAccumulator) {
}

// Called to transform data records for intermediate output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group update.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function updateTransform(counter, groupAccumulator) {
}

// Called to transform data records for output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function transform(counter, groupAccumulator) {
	if (counter > 0) return SKIP;
	$0.customers_count := groupAccumulator["numRec"];
	$0.customers := groupAccumulator["customer"];
	$0.EmployeeID := $0.EmployeeID;
	return ALL
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {
// }

// Called during component initialization.
// function init() {
// }

// Called at the end of the rollup transform after all input data records were processed.
// function finished() {
// }

]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTLwithoutOrder_Rollup.out" guiHeight="25" guiName="Customers Grouped for Each Employee" guiWidth="50" guiX="689" guiY="190" id="WRITER3" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="EXT_SORT1:0" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER3:0"/>
<Edge debugMode="false" fromNode="INPUT4:0" guiBendpoints="" id="Edge4" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="ROLLUP0:0"/>
<Edge debugMode="false" fromNode="ROLLUP0:0" guiBendpoints="" id="Edge5" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" router="Manhattan" toNode="EXT_SORT1:0"/>
</Phase>
</Graph>
