<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Mar 07 09:01:26 CET 2007" description="This graph demonstrates functionality of NORMALIZER component with normalization specified by inline TransformLang source." guiVersion="4.5.0.M1" id="1204549060147" licenseCode="Javlin-Internal-License" licenseType="Evaluation Devel" modified="Fri Jun 10 16:00:25 CEST 2011" modifiedBy="avackova" name="Testing NORMALIZER" revision="1.34" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="customers_count" type="integer"/>
<Field name="customers" type="string"/>
<Field name="EmployeeID" type="integer"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="139" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="CTL1 vs. CTL2" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="712" x="22" y="149">
<attr name="text"><![CDATA[
This graph still uses the older CTL1. 
CloverETL now offers a new CTL2 transformation language, 
which is strongly typed, in which return values and arguments types must be declared. CTL2 has many advantages as compared with older CTL1. 

For the CTL2 equaivalent of this older TL syntax see  graphNormalizeTLNew.grf.
]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers.txt" guiName="Customers Grouped for Each Employee" guiX="22" guiY="30" id="INPUT2" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" guiName="Normalizer" guiX="367" guiY="30" id="NORMALIZER0" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
string[] customers;
// This transformation defines the way in which a single input record is normalized
// into multiple output records.


// This function is called for all input records.
// It parses each single input record and returns multiple output records
// that should be created from such input record.
function integer count() {
	customers = split($0.customers,"\\s*-\\s*");
	return length(customers);
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	$0.customers = customers[idx];
	$0.EmployeeID = $EmployeeID;
	return ALL;
}

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
function integer clean() {
	clear(customers);
	return ALL;
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
<attr name="guiDescription"><![CDATA[Splits the field into several substrings without white spaces and hyphens and counts the number of such substrings. This is performed by the count() function. In the transform() function, which is called multiple times (number of calls of the function equals to the number returned by the count() function for the input record), new output records are created. These get the substrings and assign each of them to one of the output fields. Thus, this component creates one or more output records based on one input record. Before processing next input record, the clean() function returns variables into intitial state.]]></attr>
</Node>
<Node errorMessage="Test meant for CTL1" guiName="Test meant for CTL1!" guiX="389" guiY="366" id="TEST_MEANT_FOR_CTL2" type="FAIL"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/normalized.out" guiName="Customers Normalized" guiX="542" guiY="30" id="WRITER1" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="INPUT2:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="NORMALIZER0:0"/>
<Edge debugMode="true" fromNode="NORMALIZER0:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER1:0"/>
</Phase>
</Graph>
