<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Wed Mar 07 09:01:26 CET 2007" description="This example illustrates usage of Reformat component with transformation written in Transform Language.&#10;" guiVersion="0.0.0.devel" id="1204549608934" licenseType="Evaluation Devel" modified="Fri Jun 10 16:09:47 CEST 2011" modifiedBy="avackova" name="Testing Reformat" revision="1.27" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/ordersInfo.fmt" id="Metadata1"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="242" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of Reformat" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="523" x="20" y="126">
<attr name="text"><![CDATA[
The graph demonstrates the use of Reformat. In this graph, transformation is defined using the Transform attribute and it is written in Clover transformation language directly in the graph. It can be seen in the Source tab.

Transformation can also be written in the source code in Java (graphOrdersReformatInline.grf).

It can also be written in an external file in Java or CTL. See graphOrdersReformatExternTransform.grf or graphOrdersTLReformatExtern.grf, respectively.

Also a compiled Java class can be used: graphOrdersReformat.grf.

All of these options are equivalent ways of defining the transformation. Most component allow to use the same 5 options. Only MultiLevelReader, JMSReader, JMSWriter, and JavaExecute do not allow the use of CTL.

]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="226" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="CTL1 vs. CTL2" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="261" x="568" y="20">
<attr name="text"><![CDATA[
This graph still uses the older CTL1. 
CloverETL now offers a new CTL2 transformation language, 
which is strongly typed, in which return values and arguments types must be declared. CTL2 has many advantages as compared with older CTL1. 

For the CTL2 equaivalent of this older TL syntax see  graphOrdersTLNewReformat.grf.
]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="101" guiName="Orders" guiWidth="128" guiX="20" guiY="20" id="INPUT" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/orders.dat.out" guiHeight="101" guiName="Orders Transformed" guiWidth="173" guiX="370" guiY="20" id="OUTPUT" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="69" guiName="Reformat" guiWidth="128" guiX="195" guiY="20" id="REF" type="REFORMAT">
<attr name="transform"><![CDATA[//#TL
int key;


 
key=-1; // assign value to it

/* 
  sample function, just to show how things work
*/
function sum(a,b){
	return a+b;
}


function transform() {
	$0.CUSTOMERID := $0.CustomerID;
	$0.PRODUCTID := ++key;
	$0.ORDERID := $0.OrderID;
	$0.CUSTOMER := join(';',$0.ShipName,$0.ShipAddress,$0.ShipCity,$0.ShipCountry);
	$0.SHIPTIME := datediff($0.RequiredDate,$0.ShippedDate,day);
}

]]></attr>
</Node>
<Edge debugMode="false" fromNode="INPUT:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REF:0"/>
<Edge debugMode="false" fromNode="REF:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="OUTPUT:0"/>
</Phase>
</Graph>
