<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Fri Jan 12 08:41:50 CET 2007" description="This graph demonstrates functionality of DENORMALIZER component with denormalization specified by inline TransformLang source." guiVersion="0.0.0.devel" id="1204545430039" licenseType="Evaluation Devel" modified="Wed May 25 09:12:19 CEST 2011" modifiedBy="avackova" name="Testing NORMALIZER" revision="1.60" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/Orders1.fmt" id="Metadata0"/>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="customers_count" type="integer">
<attr name="description"><![CDATA[This field contains number of customers, that are listed in 'customers' field.]]></attr>
</Field>
<Field name="customers" type="string"/>
<Field name="EmployeeID" type="integer"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="307" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of the Denormalizer Component (CTL)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="809" x="25" y="265">
<attr name="text"><![CDATA[
Denormalizer processes groups of data records with the same value of Key. 

If records with the same value of Key are not adjacent to each other and are separated by any other Key value, such records are considered to be different groups of records. For this reason, if you do not want to process non-adjacent records as separate groups, sort the records on specified Key before they are processed by Denormalizer.

On the other hand, if you want to do exactly what is shown in phase 1, make sure that this has good sense. And set the Sort order attribute to Ignore. Otherwise, if Denormalizer received unsorted records declared as if they had been sorted, it would fail.

In phase 0, records are sorted on EmployeeID (Sort order is set to Ascending). After that, all records with the same value of Key are appended to each other (the append() function is used) and the information that is gathered is used to create output records in the transform() function. These are sent to the connected output port.

In this graph, all customers for each employee are concatenated using white spaces and hyphens. 

After processing every group of records, before processing the next key value, the clean() function is used to return the settings to the initial state.

Transformation is defined in Clover transformation language directly in the graph. It can be seen in the Source tab.]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="103" guiName="Denormalizer" guiWidth="128" guiX="353" guiY="20" id="DENORMALIZE" key="EmployeeID" order="Asc" type="DENORMALIZER">
<attr name="guiDescription"><![CDATA[All customers for each employee are concatenated using white spaces and hyphens.]]></attr>
<attr name="denormalize"><![CDATA[//#CTL2

string customer = "";
integer employee = 0;
integer numRec = 0;

function integer append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
	return numRec;
}

function integer transform() {
	$customers_count = numRec;
	$customers = customer;
	$EmployeeID = employee;
	return 0;
} 

function void clean(){
	customer = "";
	employee = 0;
	numRec = 0;
}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="103" guiName="ExtSort" guiWidth="128" guiX="181" guiY="20" id="EXT_SORT0" sortKey="EmployeeID(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiHeight="103" guiName="Orders Sorted" guiWidth="132" guiX="23" guiY="20" id="INPUT1" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Reads input data]]></attr>
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTL.out" guiHeight="86" guiName="Customers Grouped for Each Employee" guiWidth="309" guiX="529" guiY="20" id="WRITER" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE:0" guiBendpoints="" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER:0"/>
<Edge debugMode="true" fromNode="EXT_SORT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" router="Manhattan" toNode="DENORMALIZE:0"/>
<Edge fromNode="INPUT1:0" guiBendpoints="" guiRouter="Manhattan" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="EXT_SORT0:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiHeight="103" guiName="Denormalizer" guiWidth="128" guiX="352" guiY="148" id="DENORMALIZE1" key="EmployeeID" order="Ignore" type="DENORMALIZER">
<attr name="guiDescription"><![CDATA[All customers for each employee are concatenated using white spaces and hyphens.]]></attr>
<attr name="denormalize"><![CDATA[//#CTL2

string customer = "";
integer employee = 0;
integer numRec = 0;

function integer append() {
	numRec++;
	customer = customer + iif(length(customer) > 0 ," - ","") + $CustomerID;
	employee = $EmployeeID;
	return numRec;
}

function integer transform() {
	$customers_count = numRec;
	$customers = customer;
	$EmployeeID = employee;
	return 0;
} 

function void clean(){
	customer = "";
	employee = 0;
	numRec = 0;
}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.sorted" guiHeight="103" guiName="Orders Sorted" guiWidth="132" guiX="22" guiY="148" id="INPUT2" type="DATA_READER">
<attr name="guiDescription"><![CDATA[Reads input data]]></attr>
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/denormalizedTLwithoutOrder.out" guiHeight="103" guiName="Customers Grouped for An Employee" guiWidth="296" guiX="542" guiY="148" id="WRITER1" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="DENORMALIZE1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="WRITER1:0"/>
<Edge debugMode="false" fromNode="INPUT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="DENORMALIZE1:0"/>
</Phase>
</Graph>
