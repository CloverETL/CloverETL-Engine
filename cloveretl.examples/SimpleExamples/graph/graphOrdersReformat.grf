<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Wed Mar 07 09:01:26 CET 2007" description="This example illustrates usage of Reformat component. Source data contains&#10;info about orders customers made.&#10;We add artifitial key - OrderKey which is a sequence of integers. We also&#10;combine individual fields of ship-to-address (address,city,country) into&#10;one single field.&#10;The ShippedDate is set to constant- 02.02.1999&#10;&#10;Reformat component calls &quot;reformatOrders&quot; class which  implements RecordTransform&#10;interface (required by Reformat component).&#10;The directory in which recormatOrders class exists must be part of the Java classpath -&#10;see &quot;-cp&quot; option used below.&#10;&#10;Executing :&#10;java -cp &quot;cloverETL.rel-1-0-7.zip;./&quot; org.jetel.main.runGraph graphOrdersReformat.grf&#10;" guiVersion="0.0.0.devel" id="1204549130803" licenseCode="Commercial Devel" licenseType="Evaluation Devel" modified="Fri Jun 10 16:07:17 CEST 2011" modifiedBy="avackova" name="Testing Reformat" revision="1.19" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/ordersInfo.fmt" id="Metadata1"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="249" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of Reformat" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="523" x="20" y="138">
<attr name="text"><![CDATA[
The graph demonstrates the use of Reformat. In this graph, transformation is defined using the Transform class attribute and it is specified as a compiled Java class.

Transformation can also be written in Java or Clover transformation language directly in the graph (graphOrdersReformatInline.grf or graphOrdersTLReformat.grf, respectively).

It can also be written in an external file in Java or CTL. See graphOrdersReformatExternTransform.grf or graphOrdersTLReformatExtern.grf, respectively.

All of these options are equivalent ways of defining the transformation. Most component allow to use the same 5 options. Only MultiLevelReader, JMSReader, JMSWriter, and JavaExecute do not allow the use of CTL.

]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiName="Orders" guiX="20" guiY="20" id="INPUT" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/orders.dat.out" guiName="Orders Transformed" guiX="370" guiY="20" id="OUTPUT" type="DATA_WRITER"/>
<Node enabled="enabled" guiName="Reformat" guiX="195" guiY="20" id="REF" transformClass="reformatOrders" type="REFORMAT"/>
<Edge debugMode="false" fromNode="INPUT:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="INEDGE" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" router="Manhattan" toNode="REF:0"/>
<Edge debugMode="true" fromNode="REF:0" guiBendpoints="" guiLocks="null|null|null" guiRouter="Manhattan" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" router="Manhattan" toNode="OUTPUT:0"/>
</Phase>
</Graph>
