<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Wesley" created="Wed Feb 20 11:21:19 CET 2013" guiVersion="0.0.0.devel" id="1361360543511" licenseCode="Javlin-Internal-License" licenseType="Commercial" modified="Tue Mar 25 15:57:15 CET 2014" modifiedBy="User" name="ProcessLog_CloverETL" nature="jobflow" revision="1.43" showComponentDetails="true">
<Global>
<MetadataGroup name="Implicit metadata" type="implicit">
<Metadata id="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus">
<Record fieldDelimiter="|" name="ExecuteGraph_RunStatus" recordDelimiter="\n" type="delimited">
<Field name="runId" trim="true" type="long"/>
<Field name="originalJobURL" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="startTime" trim="true" type="date"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="endTime" trim="true" type="date"/>
<Field name="duration" trim="true" type="long"/>
<Field name="executionGroup" type="string"/>
<Field name="executionLabel" type="string"/>
<Field name="status" type="string"/>
<Field name="errException" type="string"/>
<Field name="errMessage" type="string"/>
<Field name="errComponent" type="string"/>
<Field name="errComponentType" type="string"/>
</Record>
</Metadata>
</MetadataGroup>
<GraphParameters>
<GraphParameterFile fileURL="hadoop.prm"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="404040" enabled="true" folded="false" fontSize="medium" height="104" id="Note3" textColor="FFFFFF" width="929" x="19" y="19">
<attr name="text"><![CDATA[h3. Big Data - Processing Web Access Log (Unique Visitors):  Hadoop Hive Solution
Report the number of unique visitors per month from a potentially huge web access log using different methods.
(CloverETL, Hadoop HIVE, Hadoop MapReduce, and MongoDB)]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FFFFFF" enabled="true" folded="false" fontSize="medium" height="358" id="Note2" textColor="000000" width="208" x="19" y="122">
<attr name="text"><![CDATA[h3. Scenario

Web servers under heavy load can generate web access logs in orders of tens or hundreds of gigabytes per day.

Preparing such data for analytics in a timely basis is crucial to fast operating businesses.

In this example we demonstrate how to produce a simple "uniques per month" report from a standard Apache access_log file.
]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FFFFFF" enabled="true" folded="false" fontSize="medium" height="358" id="Note5" textColor="000000" width="233" x="226" y="122">
<attr name="text"><![CDATA[h3. CloverETL feeding data to Hive

The end-to-end solution is composed of the following steps:

Step 1: Parse the log file on local disks, extract the (year+month, ip) pairs and upload it to to HDFS

Step 2: Load the HDFS file into Hive table

Step 3: Issue Hive query to count the unique visitors

Step 4: Sorts the output file and generate an Excel report]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FFFFFF" enabled="true" folded="false" fontSize="medium" height="358" id="Note4" textColor="000000" width="276" x="458" y="122">
<attr name="text"><![CDATA[h3. Hadoop/Hive Configuration

Before running the job you need to setup the Hadoop HDFS and Hive connections in underlying jobs.

The necessary Hive and Hadoop libraries are located in "lib" directory of this project

Hadoop HDFS:
- CDH-3u5: lib/hadoop/cdh3u5/*.jar 
- CDH-4.1.2: lib/hadoop/cdh-412/*jar
- CDH-5.6.0: lib/hadoop/cdh-560/*jar

Hive (both CDH-3u5 and CDH-4.1.2)
- lib/hive/cdh3u5/*.jar
- CDH-5.6.0: /lib/hadoop/cdh-560/hive/*jar]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FFFFFF" enabled="true" folded="false" fontSize="medium" height="358" id="Note6" textColor="000000" width="216" x="733" y="122">
<attr name="text"><![CDATA[h3. Configuration Notes

If you are using different version of Hadoop distrbution download the JAR files from your installation.

Additional or different libraries might be needed for both Hadoop and Hive connections. Generally try copying (all) libraries from /usr/lib/hadoop-* or /usrlib/hive/* when setting up connection classpath.]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="60FF60" enabled="true" folded="false" fontSize="medium" height="159" id="Note0" textColor="000000" width="528" x="241" y="491">
<attr name="text"><![CDATA[h3. Hive query
]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="Check required parameters" guiX="-180" guiY="538" id="CHECK_REQUIRED_PARAMETERS" jobURL="${GRAPH_DIR}/CheckParameters-Hive.grf" type="EXECUTE_GRAPH">
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.errMessage = $in.1.errMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Count Unique Visitors using Hive Query" guiX="477" guiY="538" id="COUNT_UNIQUE_VISITORS_USING_HIVE_QUERY1" jobURL="${GRAPH_DIR}/HadoopHive-CountVisits.grf" type="EXECUTE_GRAPH"/>
<Node enabled="enabled" guiName="Generate Report" guiX="820" guiY="538" id="GENERATE_REPORT" jobURL="${GRAPH_DIR}/GenerateReport.grf" type="EXECUTE_GRAPH"/>
<Node enabled="enabled" guiName="Load Data into Hive table" guiX="262" guiY="538" id="LOAD_DATA_INTO_HIVE_TABLE" jobURL="${GRAPH_DIR}/HadoopHive-LoadData.grf" type="EXECUTE_GRAPH"/>
<Node enabled="enabled" guiName="Required Parameters Missing" guiX="-66" guiY="665" id="REQUIRED_PARAMETERS_MISSING" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Upload Inputs to HDFS" guiX="58" guiY="538" id="UPLOAD_INPUTS_TO_HDFS" jobURL="${GRAPH_DIR}/PrepareInputData.grf" type="EXECUTE_GRAPH">
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.runId = $in.1.runId;
	$out.0.originalJobURL = $in.1.originalJobURL;
	$out.0.startTime = $in.1.startTime;
	$out.0.endTime = $in.1.endTime;
	$out.0.duration = $in.1.duration;
	$out.0.status = $in.1.status;
	$out.0.errException = $in.1.errException;
	$out.0.errMessage = $in.1.errMessage;
	$out.0.errComponent = $in.1.errComponent;
	$out.0.errComponentType = $in.1.errComponentType;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="CHECK_REQUIRED_PARAMETERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus" toNode="UPLOAD_INPUTS_TO_HDFS:0"/>
<Edge fromNode="CHECK_REQUIRED_PARAMETERS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 1 (error)" persistedImplicitMetadata="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus" toNode="REQUIRED_PARAMETERS_MISSING:0"/>
<Edge fromNode="COUNT_UNIQUE_VISITORS_USING_HIVE_QUERY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus" toNode="GENERATE_REPORT:0"/>
<Edge debugMode="true" fromNode="LOAD_DATA_INTO_HIVE_TABLE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus" toNode="COUNT_UNIQUE_VISITORS_USING_HIVE_QUERY1:0"/>
<Edge debugMode="true" fromNode="UPLOAD_INPUTS_TO_HDFS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" persistedImplicitMetadata="__static_metadata_EXECUTE_GRAPH_ExecuteGraph_RunStatus" toNode="LOAD_DATA_INTO_HIVE_TABLE:0"/>
</Phase>
</Graph>
