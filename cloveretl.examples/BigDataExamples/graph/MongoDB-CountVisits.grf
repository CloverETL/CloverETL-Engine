<?xml version="1.0" encoding="UTF-8"?>
<Graph author="krivanekm" created="Wed Feb 20 11:21:19 CET 2013" guiVersion="0.0.0.devel" id="1361367492640" licenseType="Commercial" modified="Mon Jan 13 18:38:38 CET 2014" modifiedBy="User" name="RunJobInHadoopHIVE" revision="1.83" showComponentDetails="true">
<Global>
<Metadata fileURL="${META_DIR}/meta_count_output.fmt" id="Metadata1"/>
<Metadata fileURL="${META_DIR}/meta_key_value_pairs.fmt" id="Metadata0"/>
<Connection config="${CONN_DIR}/MongoDB.cfg" id="MONGODB0" type="MONGODB"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="299" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Unique Visitors using MongoDB Aggregation Framework" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="383" x="133" y="223">
<attr name="text"><![CDATA[









Calculates the number of unique visitors using the MongoDB aggregation framework's $group operator. The first application of the operator selects distinct <year-month, IP> pairs, the second application groups the result by date and counts the IP addresses.

The components uses MongoDB Java driver to issue the query and retrieve results.

The results are returned as JSON objects, which are presented as map[string, string] in the Output mapping.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="299" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Temp file with results" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="262" x="594" y="223">
<attr name="text"><![CDATA[












Writes calculated statistics into a temporary output file which will be converted to Excel report in the next 
step of processing.]]></attr>
</Note>
<Note alignment="2" backgroundColorB="64" backgroundColorG="64" backgroundColorR="64" enabled="true" folded="false" height="78" id="Note4" textColorB="255" textColorG="255" textColorR="255" textFontSize="10" title="Big Data - Processing Web Access Log (Unique Visitors): MongoDB Solution" titleColorB="255" titleColorG="255" titleColorR="255" titleFontSize="13" width="929" x="30" y="36">
<attr name="text"><![CDATA[Report the number of unique visitors per month from a potentially huge web access log using different methods.
(CloverETL, Hadoop HIVE, Hadoop MapReduce, and MongoDB)]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" enabled="true" folded="false" height="38" id="Note5" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="This graph is part of the &quot;UniqueVisits-MongoDB.jbf&quot; jobflow." titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="929" x="30" y="113"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node collection="uniqueVisits" connectionId="MONGODB0" enabled="enabled" guiName="MongoDBReader" guiX="261" guiY="279" id="MONGO_DBREADER" operation="aggregate" type="MONGODB_READER">
<attr name="query"><![CDATA[{ $group : { _id : { key : "$key", ip : "$value" } } },
{ $group : { _id : "$_id.key", count : { $sum : 1 } } }]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.year_month = $in.1.jsonObject["_id"];
	$out.0.ip_count = str2long($in.1.jsonObject["count"]);

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATATMP_DIR}/unique_visitors.txt" guiName="Write Unique Visitors Count" guiX="632" guiY="279" id="WRITE_UNIQUE_VISITORS_COUNT" type="DATA_WRITER"/>
<Edge debugMode="true" fromNode="MONGO_DBREADER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="WRITE_UNIQUE_VISITORS_COUNT:0"/>
</Phase>
</Graph>
