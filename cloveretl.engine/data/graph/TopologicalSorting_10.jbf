<?xml version="1.0" encoding="UTF-8"?>
<Graph author="user" created="Thu Oct 31 11:47:03 CET 2013" guiVersion="0.0.0.devel" id="1383217739589" licenseType="Commercial" modified="Fri Nov 15 13:28:04 CET 2013" modifiedBy="Kokon" name="test" revision="1.48" showComponentDetails="true" nature="jobflow">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="joinKey" type="integer"/>
<Field name="value" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="12" guiY="20" id="DATA_GENERATOR" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="DataGenerator" guiX="25" guiY="310" id="DATA_GENERATOR1" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Loop" guiX="256" guiY="20" id="LOOP" type="LOOP">
<attr name="whileCondition"><![CDATA[//#CTL2
true]]></attr>
</Node>
<Node enabled="enabled" guiName="Loop" guiX="567" guiY="111" id="LOOP1" type="LOOP">
<attr name="whileCondition"><![CDATA[true]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="401" guiY="111" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="735" guiY="111" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="573" guiY="221" id="SIMPLE_COPY2" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="266" guiY="414" id="SIMPLE_COPY3" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="804" guiY="205" id="SIMPLE_COPY6" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleGather" guiX="266" guiY="305" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="SimpleGather" guiX="960" guiY="118" id="SIMPLE_GATHER2" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="Trash" guiX="882" guiY="20" id="TRASH" type="TRASH"/>
<Node enabled="enabled" guiName="Trash" guiX="446" guiY="307" id="TRASH1" type="TRASH"/>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (input token)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP:0"/>
<Edge fromNode="DATA_GENERATOR1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:0"/>
<Edge fromNode="LOOP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (end of loop)" toNode="TRASH:0"/>
<Edge fromNode="LOOP:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (continue loop)" toNode="SIMPLE_COPY:0"/>
<Edge debugMode="false" fromNode="LOOP1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (end of loop)" toNode="SIMPLE_COPY1:0"/>
<Edge fromNode="LOOP1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (continue loop)" toNode="SIMPLE_COPY2:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (input token)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP1:0"/>
<Edge debugMode="false" fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER2:0"/>
<Edge fromNode="SIMPLE_COPY1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="SIMPLE_COPY6:0"/>
<Edge fromNode="SIMPLE_COPY2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 1 (back from loop)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP1:1"/>
<Edge fromNode="SIMPLE_COPY3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="SIMPLE_COPY3:1" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="TRASH2:1"/>
<Edge fromNode="SIMPLE_COPY6:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER2:1"/>
<Edge fromNode="SIMPLE_COPY6:1" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 2 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="SIMPLE_GATHER2:2"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY3:0"/>
<Edge fromNode="SIMPLE_GATHER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="TRASH1:0"/>
<Edge fromNode="SIMPLE_GATHER2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 1 (back from loop)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP:1"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiName="DataGenerator" guiX="33" guiY="541" id="DATA_GENERATOR2" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="411" guiY="633" id="SIMPLE_COPY4" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="582" guiY="633" id="SIMPLE_COPY5" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleGather" guiX="274" guiY="536" id="SIMPLE_GATHER1" type="SIMPLE_GATHER"/>
<Node enabled="enabled" guiName="Trash" guiX="742" guiY="541" id="TRASH2" type="TRASH"/>
<Edge fromNode="DATA_GENERATOR2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:0"/>
<Edge fromNode="SIMPLE_COPY4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY5:0"/>
<Edge debugMode="false" fromNode="SIMPLE_COPY5:0" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER1:1"/>
<Edge fromNode="SIMPLE_GATHER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY4:0"/>
<Edge fromNode="SIMPLE_GATHER1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="TRASH2:0"/>
</Phase>
</Graph>
