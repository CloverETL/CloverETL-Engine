<?xml version="1.0" encoding="UTF-8"?>
<Graph author="user" created="Thu Oct 31 11:47:03 CET 2013" guiVersion="0.0.0.devel" id="1383217739589" licenseType="Commercial" modified="Fri Nov 15 11:14:04 CET 2013" modifiedBy="Kokon" name="test" revision="1.31" showComponentDetails="true" nature="jobflow">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="joinKey" type="integer"/>
<Field name="value" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="107" guiY="171" id="DATA_GENERATOR" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="Loop" guiX="341" guiY="161" id="LOOP" type="LOOP">
<attr name="whileCondition"><![CDATA[//#CTL2
true]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="377" guiY="286" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="Trash" guiX="594" guiY="171" id="TRASH" type="TRASH"/>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (input token)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP:0"/>
<Edge fromNode="LOOP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (end of loop)" toNode="TRASH:0"/>
<Edge fromNode="LOOP:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (continue loop)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 1 (back from loop)" metadata="Metadata0" outPort="Port 0 (out)" toNode="LOOP:1"/>
</Phase>
</Graph>
