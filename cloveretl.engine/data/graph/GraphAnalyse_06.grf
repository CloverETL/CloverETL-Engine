<?xml version="1.0" encoding="UTF-8"?>
<Graph author="ju" created="Tue Nov 06 11:38:32 EST 2012" guiVersion="0.0.0.devel" id="1352235027564" licenseType="Commercial" modified="Wed Jan 02 13:54:32 CET 2013" modifiedBy="Kokon" name="RegexPST" revision="1.59" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="67" guiName="DataGenerator" guiWidth="128" guiX="67" guiY="78" id="DATA_GENERATOR" recordsNumber="4" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

integer counter = 1;

// Generates output record.
function integer generate() {
	$out.0.field1 = num2str(counter);
	counter = counter + 3;
	
	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiHeight="67" guiName="SimpleCopy" guiWidth="128" guiX="591" guiY="218" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiHeight="72" guiName="SimpleGather" guiWidth="128" guiX="386" guiY="103" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:0"/>
<Edge fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
</Phase>
</Graph>
