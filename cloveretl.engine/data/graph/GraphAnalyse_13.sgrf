<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Kokon" created="Wed Oct 30 10:12:44 CET 2013" guiVersion="0.0.0.devel" id="1383124855822" licenseType="Commercial" modified="Wed Jun 11 14:34:37 CEST 2014" modifiedBy="Kokon" name="GraphAnalyse_12" nature="subgraph" revision="1.5" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiName="DataGenerator" guiX="149" guiY="51" id="DATA_GENERATOR" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enabled" guiName="SimpleCopy" guiX="393" guiY="81" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SimpleCopy" guiX="393" guiY="-3" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiName="SubgraphInput" guiX="89" guiY="-64" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="0" name="0"/>
</Node>
<Node enabled="enabled" guiName="SubgraphOutput" guiX="739" guiY="-64" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="0" name="0"/>
<Port guiY="64" name="1"/>
<Port guiY="128" name="2"/>
</Node>
<Edge debugMode="false" fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
<Edge fromNode="DATA_GENERATOR:1" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
</Phase>
</Graph>
