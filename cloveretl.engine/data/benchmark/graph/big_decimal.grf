<?xml version="1.0" encoding="UTF-8"?>
<Graph author="kubosj" created="Thu Feb 09 13:31:51 CET 2012" guiVersion="3.2.1" id="1328790881844" licenseCode="CLP1DJAVLI38280880BY" licenseType="CloverETL Designer single license" modified="Fri Feb 24 09:44:23 CET 2012" modifiedBy="kubosj" name="big_decimal" revision="1.42" showComponentDetails="true">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="recordName1" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field length="40" name="a" scale="20" type="decimal"/>
<Field length="40" name="b" scale="20" type="decimal"/>
<Field length="40" name="c" scale="20" type="decimal"/>
<Field length="40" name="d" scale="20" type="decimal"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="1075" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="New note" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="523" x="65" y="541">
<attr name="text"><![CDATA[//#SCALA
package org.jetel.component.scala;

import org.jetel.component.DataRecordTransform
import org.jetel.data.DataRecord
import org.jetel.component.RecordTransform._
import org.jetel.component.LibraryFunctions
import org.jetel.data.primitive.Decimal

class MyTransformation extends DataRecordTransform {

  var input : Inputs = new Inputs()
  var output : Outputs = new Outputs()
  var functions : LibraryFunctions = new LibraryFunctions()
  
  def transform() = {
  	output.port0.a = input.port0.a+10
  	output.port0.b = input.port0.b-45
 	output.port0.c = input.port0.c*input.port0.a
  	output.port0.d = input.port0.d*(1+input.port0.a)
  }

  override def transform(inputRecords: Array[DataRecord], outputRecords: Array[DataRecord]): Int = {
	
	input.port0.dataRecord = inputRecords(0)
	output.port0.dataRecord = outputRecords(0)
	
	transform()
	
    return 0;
  }
  
}

class MyRecord {
  
  var dataRecord : DataRecord = null
  
  def a : BigDecimal = {
    return dataRecord.getField("a").getValue().asInstanceOf[Decimal].getBigDecimalOutput();
  }
  
  def a_= (value : BigDecimal) : Unit = {
    dataRecord.getField("a").setValue(value); 
  } 
  
  def b : BigDecimal = {
    return dataRecord.getField("b").getValue().asInstanceOf[Decimal].getBigDecimalOutput();
  }
  
  def b_= (value : BigDecimal) : Unit = {
    dataRecord.getField("b").setValue(value); 
  } 
  
  def c : BigDecimal = {
    return dataRecord.getField("c").getValue().asInstanceOf[Decimal].getBigDecimalOutput();
  }
  
  def c_= (value : BigDecimal) : Unit = {
    dataRecord.getField("c").setValue(value); 
  } 
  
  def d : BigDecimal = {
    return dataRecord.getField("d").getValue().asInstanceOf[Decimal].getBigDecimalOutput();
  }
  
  def d_= (value : BigDecimal) : Unit = {
    dataRecord.getField("d").setValue(value); 
  } 
  
}

class Inputs {
  	var port0 : MyRecord = new MyRecord()
}

class Outputs {
	var port0 : MyRecord = new MyRecord()
}

]]></attr>
</Note>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enabled" guiHeight="65" guiName="DataGenerator" guiWidth="128" guiX="33" guiY="283" id="DATA_GENERATOR0" recordsNumber="10000000" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.a = randomGaussian()*10e6;
	$out.0.b = randomGaussian()*10e6;
	$out.0.c = randomGaussian()*10e6;
	$out.0.d = randomGaussian()*10e6;

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="disabled" fileURL="${DATAOUT_DIR}/a" guiHeight="76" guiName="UniversalDataWriter" guiWidth="146" guiX="1035" guiY="133" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${DATAOUT_DIR}/b" guiHeight="76" guiName="UniversalDataWriter" guiWidth="146" guiX="1035" guiY="225" id="DATA_WRITER1" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${DATAOUT_DIR}/c" guiHeight="76" guiName="UniversalDataWriter" guiWidth="146" guiX="1035" guiY="319" id="DATA_WRITER2" type="DATA_WRITER"/>
<Node enabled="disabled" fileURL="${DATAOUT_DIR}/d" guiHeight="76" guiName="UniversalDataWriter" guiWidth="146" guiX="1025" guiY="422" id="DATA_WRITER3" type="DATA_WRITER"/>
<Node enabled="${CTL}" guiHeight="76" guiName="Reformat" guiWidth="128" guiX="522" guiY="139" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	$out.0.a = $in.0.a+10;
	$out.0.b = $in.0.b-45;
	$out.0.c = $in.0.c*$in.0.a;
	$out.0.d = $in.0.d*($in.0.a+1);

	return OK;
}
]]></attr>
<attr name="guiDescription"><![CDATA[CTL]]></attr>
</Node>
<Node enabled="${CTLCOMPILED}" guiHeight="76" guiName="Reformat" guiWidth="128" guiX="522" guiY="230" id="REFORMAT1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2:COMPILED

function integer transform() {
	$out.0.a = $in.0.a+10;
	$out.0.b = $in.0.b-45;
	$out.0.c = $in.0.c*$in.0.a;
	$out.0.d = $in.0.d*($in.0.a+1);

	return OK;
}

]]></attr>
<attr name="guiDescription"><![CDATA[CTL COMPILED]]></attr>
</Node>
<Node enabled="${GROOVY}" guiHeight="76" guiName="Reformat" guiWidth="128" guiX="522" guiY="319" id="REFORMAT2" type="REFORMAT">
<attr name="transform"><![CDATA[//#GROOVY

def transform() {
  output.port0.a = input.port0.a+10
  output.port0.b = input.port0.b-45
  output.port0.c = input.port0.c*input.port0.a
  output.port0.d = input.port0.d*(input.port0.a+1)
}
]]></attr>
<attr name="guiDescription"><![CDATA[GROOVY]]></attr>
</Node>
<Node enabled="${SCALA}" guiHeight="76" guiName="Reformat" guiWidth="128" guiX="522" guiY="407" id="REFORMAT3" type="REFORMAT">
<attr name="transform"><![CDATA[//#SCALA
package org.jetel.component.scala;

import org.jetel.component.DataRecordTransform
import org.jetel.data.DataRecord
import org.jetel.component.RecordTransform._
import org.jetel.component.LibraryFunctions
import org.jetel.data.primitive.Decimal

class MyTransformation extends DataRecordTransform {

  var input : Inputs = new Inputs()
  var output : Outputs = new Outputs()
  var functions : LibraryFunctions = new LibraryFunctions()
  
  def transform() = {
  	output.port0.a = input.port0.a+10
  	output.port0.b = input.port0.b-45
 	output.port0.c = input.port0.c*input.port0.a
  	output.port0.d = input.port0.d*(input.port0.a+1)
  }

  override def transform(inputRecords: Array[DataRecord], outputRecords: Array[DataRecord]): Int = {
	
	input.port0.dataRecord = inputRecords(0)
	output.port0.dataRecord = outputRecords(0)
	
	transform()
	
    return 0;
  }
  
}

class MyRecord {
  
  var dataRecord : DataRecord = null
  
  def a : DecimalWrapper = {
    return new DecimalWrapper(dataRecord.getField("a").getValue().asInstanceOf[Decimal]);
  }
  
  def a_= (value : DecimalWrapper) : Unit = {
    dataRecord.getField("a").setValue(value.wrapped); 
  } 
  
  def b : DecimalWrapper = {
    return new DecimalWrapper(dataRecord.getField("b").getValue().asInstanceOf[Decimal]);
  }
  
  def b_= (value : DecimalWrapper) : Unit = {
    dataRecord.getField("b").setValue(value.wrapped); 
  } 
  
  def c : DecimalWrapper = {
    return new DecimalWrapper(dataRecord.getField("c").getValue().asInstanceOf[Decimal]);
  }
  
  def c_= (value : DecimalWrapper) : Unit = {
    dataRecord.getField("c").setValue(value.wrapped); 
  } 
  
  def d : DecimalWrapper = {
    return new DecimalWrapper(dataRecord.getField("d").getValue().asInstanceOf[Decimal]);
  }
  
  def d_= (value : DecimalWrapper) : Unit = {
    dataRecord.getField("d").setValue(value.wrapped); 
  } 
  
  
}

class Inputs {
  	var port0 : MyRecord = new MyRecord()
}

class Outputs {
	var port0 : MyRecord = new MyRecord()
}

class DecimalWrapper(wrappedObj : Decimal) {
	var wrapped : Decimal = wrappedObj
	
	def +(that: DecimalWrapper): DecimalWrapper = {
	  var res : Decimal = wrapped.createCopy()
	  res.add(that.wrapped)
	  return new DecimalWrapper(res)
	}
	
	def -(that: DecimalWrapper): DecimalWrapper = {
	  var res : Decimal = wrapped.createCopy()
	  res.sub(that.wrapped)
	  return new DecimalWrapper(res)
	}
	
	def +(that: Int): DecimalWrapper = {
	  var tmp : DecimalWrapper = new DecimalWrapper(wrapped.createCopy())
	  tmp.wrapped.setValue(that)
	  return this+tmp
	}
	
	def -(that: Int): DecimalWrapper = {
	  var tmp : DecimalWrapper = new DecimalWrapper(wrapped.createCopy())
	  tmp.wrapped.setValue(that)
	  return this-tmp
	}
	
	def *(that: DecimalWrapper): DecimalWrapper = {
	  var res : Decimal = wrapped.createCopy()
	  res.mul(that.wrapped)
	  return new DecimalWrapper(res)
	}
}]]></attr>
<attr name="guiDescription"><![CDATA[SCALA]]></attr>
</Node>
<Node enabled="enabled" guiHeight="84" guiName="SimpleCopy" guiWidth="128" guiX="209" guiY="274" id="SIMPLE_COPY0" type="SIMPLE_COPY"/>
<Node enabled="enabled" guiHeight="84" guiName="Trash" guiWidth="128" guiX="849" guiY="283" id="TRASH0" type="TRASH"/>
<Edge fromNode="DATA_GENERATOR0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="SIMPLE_COPY0:0"/>
<Edge fromNode="REFORMAT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="TRASH0:0"/>
<Edge fromNode="REFORMAT1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="TRASH0:1"/>
<Edge fromNode="REFORMAT2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge22" inPort="Port 2 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="TRASH0:2"/>
<Edge debugMode="false" fromNode="REFORMAT3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 3 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="TRASH0:3"/>
<Edge fromNode="SIMPLE_COPY0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REFORMAT0:0"/>
<Edge fromNode="SIMPLE_COPY0:1" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="REFORMAT1:0"/>
<Edge fromNode="SIMPLE_COPY0:2" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 2 (out)" toNode="REFORMAT2:0"/>
<Edge fromNode="SIMPLE_COPY0:3" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 3 (out)" toNode="REFORMAT3:0"/>
</Phase>
</Graph>
