<?xml version="1.0" encoding="UTF-8"?>
<Graph name="Testing Hash Joiner">
<!-- This graph demonstrates functionality of HASH_JOIN components. HASH_JOIN component
performs joining of master data with slave data based on specified key. First all slave
data are read and hash-table is constructed from them. Then for every master record, attempt
is made to find corresponding slave-record.
HASH_JOIN performs better than SORT/MERGE_JOIN when you have relatively small slave data set
and big master data set. It doesn't require master and slave data to be sorted
-->
<Global>
<Metadata id="InMetadata1" fileURL="metadata/orders.fmt"/>
<Metadata id="InMetadata2" fileURL="metadata/employees.fmt"/>
<Metadata id="OutMetadata" fileURL="metadata/joinedOrders.fmt"/>
<LookupTable dataType="delimited" fileURL="data/employees.dat" id="LookupTable0" key="EmployeeID" metadata="InMetadata2" name="jmeno" type="simpleLookup"/>
</Global>
<Phase number="0">
<!-- List of nodes which we will use for transformation -->
<Node id="INPUT1" type="DELIMITED_DATA_READER_NIO" fileURL="data/orders.dat" DataPolicy="Strict"/>
<Node id="JOIN" type="REFORMAT">
import org.jetel.component.DataRecordTransform;
import org.jetel.data.DataRecord;
import org.jetel.data.RecordKey;
import org.jetel.data.lookup.LookupTable;
import org.jetel.exception.JetelException;
import org.jetel.graph.TransformationGraph;

public class reformatTest extends DataRecordTransform{

	LookupTable mylookup;

	public boolean init(){

		try {
			mylookup = TransformationGraph.getReference().getLookupTable("LookupTable0");
			mylookup.init();
		} catch (JetelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// create key 
	    String[] lookupKeyStr={"EmployeeID"};
		RecordKey key=new RecordKey(lookupKeyStr,sourceMetadata[0]);
		key.init();
		mylookup.setLookupKey(key);
		return true;
	}

	public boolean transform(DataRecord[] source, DataRecord[] target){
	        

		DataRecord employee; 
		employee=mylookup.get(source[0]);
		
		if (employee==null) return false; // skip this one
		
		target[0].getField(0).setValue(source[0].getField(0).getValue());
  		target[0].getField(1).setValue(source[0].getField(1).getValue());
		target[0].getField(2).setValue(source[0].getField(2).getValue());
		target[0].getField(3).setValue(employee.getField(0).getValue());
		target[0].getField(4).setValue(employee.getField(1).getValue());

		return true;
	}
}
</Node>
<Node id="WRITER" type="DELIMITED_DATA_WRITER_NIO" append="false" fileURL="output/joined_data_hash.out"/>
<!-- Edges connecting nodes -->
<Edge id="INEDGE1" fromNode="INPUT1:0" toNode="JOIN:0" metadata="InMetadata1"/>
<Edge id="OUTEDGE" fromNode="JOIN:0" toNode="WRITER:0" metadata="OutMetadata"/>
</Phase>
</Graph>
