<?xml version="1.0" encoding="UTF-8"?>
<Graph description="This graph demonstrates functionality of HASH_JOIN components. HASH_JOIN component&#10;performs joining of master data with slave data based on specified key. First all slave&#10;data are read and hash-table is constructed from them. Then for every master record, attempt&#10;is made to find corresponding slave-record.&#10;HASH_JOIN performs better than SORT/MERGE_JOIN when you have relatively small slave data set&#10;and big master data set. It doesn't require master and slave data to be sorted&#10;" name="Testing Hash Joiner">
<Global>
<Metadata fileURL="metadata/employees.fmt" id="InMetadata2"/>
<Metadata fileURL="metadata/joinedOrders.fmt" id="OutMetadata"/>
<Metadata fileURL="metadata/orders.fmt" id="InMetadata1"/>
<LookupTable dataType="delimited" fileURL="data/employees.dat" id="LookupTable0" key="EmployeeID" metadata="InMetadata2" name="jmeno" type="simpleLookup"/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="data/orders.dat" guiHeight="25" guiName="INPUT1" guiWidth="50" guiX="20" guiY="20" id="INPUT1" type="DELIMITED_DATA_READER">
<attr name="DataPolicy">Strict</attr>
</Node>
<Node enabled="enabled" guiHeight="25" guiName="JOIN" guiWidth="50" guiX="195" guiY="20" id="JOIN" type="REFORMAT">
<attr name="transform">
import org.jetel.component.DataRecordTransform;
import org.jetel.data.DataRecord;
import org.jetel.data.RecordKey;
import org.jetel.data.lookup.LookupTable;
import org.jetel.exception.JetelException;
import org.jetel.graph.TransformationGraph;

public class reformatTest extends DataRecordTransform{

	LookupTable mylookup;

	public boolean init(){

		try {
			mylookup = TransformationGraph.getReference().getLookupTable("LookupTable0");
			mylookup.init();
		} catch (JetelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		// create key 
	    String[] lookupKeyStr={"EmployeeID"};
		RecordKey key=new RecordKey(lookupKeyStr,sourceMetadata[0]);
		key.init();
		mylookup.setLookupKey(key);
		return true;
	}

	public boolean transform(DataRecord[] source, DataRecord[] target){
	        

		DataRecord employee; 
		employee=mylookup.get(source[0]);
		
		if (employee==null) return false; // skip this one
		
		target[0].getField(0).setValue(source[0].getField(0).getValue());
  		target[0].getField(1).setValue(source[0].getField(1).getValue());
		target[0].getField(2).setValue(source[0].getField(2).getValue());
		target[0].getField(3).setValue(employee.getField(0).getValue());
		target[0].getField(4).setValue(employee.getField(1).getValue());

		return true;
	}
}
</attr>
</Node>
<Node append="false" enabled="enabled" fileURL="output/joined_data_hash.out" guiHeight="25" guiName="WRITER" guiWidth="50" guiX="370" guiY="20" id="WRITER" type="DELIMITED_DATA_WRITER"/>
<Edge fromNode="INPUT1:0" guiBendpoints="" id="INEDGE1" inPort="0 (JOIN)" metadata="InMetadata1" outPort="0 (INPUT1)" toNode="JOIN:0"/>
<Edge fromNode="JOIN:0" guiBendpoints="" id="OUTEDGE" inPort="0 (WRITER)" metadata="OutMetadata" outPort="0 (JOIN)" toNode="WRITER:0"/>
</Phase>
</Graph>
