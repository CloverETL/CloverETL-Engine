<?xml version="1.0" encoding="UTF-8"?>
<Graph name="Testing Filter">
<!-- This graph demonstrates functionality of Filter component. 
It can filter on text, date, integer, numeric
fields with comparison [>, <, ==, <=, >=, !=]. 
Text fields can also be compared to a Java regexp using ~ (tilda) operator.
A filter can be made of different parts separated by a ";" (semicolon). 
If one of the parts is verified, the record passes the
filter (it's an OR combination of the parts, and AND can be achieved by
several filters cascaded).
Date format used for comparison depends on input field's format - e.g.
if input field HireDate has defined date format "yyyy-MM-dd", then the
same format must be used in filter when specifying date constant.

This graph produces two output files:
First with  all employees who were hired before 1993-12-31.
Second with all employees who have in their memo that they are "fluent" in some language


Note: some of the comparison operators have to be XML encoded  - e.g. ">" as "&gt;" etc. 
-->
<Global>
<Metadata id="InMetadata" fileURL="metadata/employees.fmt"/>
</Global>
<Phase number="0">
<Node id="INPUT1" type="DELIMITED_DATA_READER_NIO" fileURL="data/employees.dat"  DataPolicy="Strict" />
<Node id="FILTEREMPL1" type="FILTER" filterExpression="HireDate&lt;31/12/1993" />
<Node id="FILTEREMPL2" type="FILTER" filterExpression="Memo~.*fluent.*" />
<Node id="OUTPUT1" type="DELIMITED_DATA_WRITER_NIO" fileURL="output/employees.filtered_1.dat"  append="false" />
<Node id="OUTPUT2" type="DELIMITED_DATA_WRITER_NIO" fileURL="output/employees.filtered_2.dat"  append="false" />
<!-- Edges  -->
<Edge id="INEDGE1" fromNode="INPUT1:0" toNode="FILTEREMPL1:0" metadata="InMetadata"/>
<Edge id="INNEREDGE1" fromNode="FILTEREMPL1:0" toNode="OUTPUT1:0" metadata="InMetadata"/>
<Edge id="INNEREDGE2" fromNode="INPUT1:1" toNode="FILTEREMPL2:0" metadata="InMetadata"/>
<Edge id="INNEREDGE3" fromNode="FILTEREMPL2:0" toNode="OUTPUT2:0" metadata="InMetadata"/>
</Phase>
</Graph>
