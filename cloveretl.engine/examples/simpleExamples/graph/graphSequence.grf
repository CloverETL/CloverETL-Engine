<?xml version="1.0" encoding="UTF-8"?>
<Graph created="Wed Mar 07 09:01:26 CET 2007" description="This example extends graphOrdersReformat in a sence that&#10;the counter used for generating OrderKey is taken from&#10;Sequence object which is persistent between graph executions - i.e.&#10;you get continuous sequence of unique numbers.&#10;For successfull compilation, tools.jar library must be part of CLASSPATH.&#10;" guiVersion="1.9" id="1204550328210" licenseType="Evaluation license." modified="Thu Apr 03 11:40:11 CEST 2008" name="Testing Reformat" revision="1.8">
<Global>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/ordersInfo.fmt" id="Metadata1"/>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Sequence cached="5" fileURL="${SEQ_DIR}/sequence.dat" id="Sequence0" name="seq" start="1" step="1" type="SIMPLE_SEQUENCE"/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="25" guiName="INPUT" guiWidth="50" guiX="20" guiY="20" id="INPUT" type="DATA_READER"/>
<Node append="false" enabled="enabled" fileURL="${DATAOUT_DIR}/orders.dat.out" guiHeight="25" guiName="OUTPUT" guiWidth="50" guiX="370" guiY="20" id="OUTPUT" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="25" guiName="REF" guiWidth="50" guiX="195" guiY="20" id="REF" type="REFORMAT">
<attr name="transform"><![CDATA[
import org.jetel.component.DataRecordTransform;
import org.jetel.data.DataRecord;
import org.jetel.data.GetVal;
import org.jetel.data.SetVal;
import org.jetel.data.sequence.Sequence;
import org.jetel.graph.TransformationGraph;

public class ReformatOrdersInline extends DataRecordTransform{

	Sequence sequence;
	int field=0;

	public boolean init(){
		sequence = this.graph.getSequence("Sequence0");
        return true;
	}

	public int transform(DataRecord source[], DataRecord[] target){
		StringBuffer strBuf=new StringBuffer(80);
		try{
			// let's concatenate shipping address into one long string
			strBuf.append(GetVal.getString(source[0],"ShipName")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipAddress")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCity")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCountry"));
			// mapping among source + target fields
			// some fields get assigned directly from source fields, some
			// are assigned from internall variables
			// OrderKey gets its value from sequence
			SetVal.setInt(target[0],"PRODUCTID",sequence.nextValueInt());
			SetVal.setInt(target[0],"ORDERID",GetVal.getInt(source[0],"OrderID"));
			SetVal.setString(target[0],"CUSTOMERID",GetVal.getString(source[0],"CustomerID"));
			SetVal.setString(target[0],"CUSTOMER",strBuf.toString());
			SetVal.setInt(target[0], "SHIPTIME", (int)( (GetVal.getDate(
					source[0], "RequiredDate").getTime() - GetVal.getDate(
					source[0], "ShippedDate").getTime())
					/ 1000 / 60 / 60 / 24));
		}catch(Exception ex){
			return SKIP;
		}
			return ALL;
	}
}
]]></attr>
</Node>
<Edge fromNode="INPUT:0" guiBendpoints="" id="INEDGE" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="REF:0"/>
<Edge fromNode="REF:0" guiBendpoints="" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="OUTPUT:0"/>
</Phase>
</Graph>
