<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Mon Mar 05 11:32:38 CET 2007" description="This graph illustrates usage of the new Aggregate component. " guiVersion="0.0.0.devel" id="1204535282174" licenseType="Evaluation Devel" modified="Tue Dec 22 15:13:12 GMT+01:00 2009" modifiedBy="avackova" name="TestingSort" revision="1.62">
<Global>
<Metadata fileURL="${META_DIR}/delimited/orders.fmt" id="Metadata0"/>
<Metadata fileURL="${META_DIR}/delimited/ordersAggregate.fmt" id="Metadata1"/>
<Metadata id="Metadata2" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="groupAccumulator" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="count" type="integer"/>
<Field name="totalFreight" type="number"/>
<Field name="avgFreight" type="number"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="122" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Rollup as Dedup" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="325" x="124" y="258">
<attr name="text"><![CDATA[
Rollup can also sometimes serve as Dedup even when input is unsorted.

The phase 0 is taken from graphAggregateUnsorted.grf.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="122" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Rollup as Aggregator" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="325" x="472" y="259">
<attr name="text"><![CDATA[
Rollup can also serve as Aggregator.

The phase 0 is taken from graphAggregateSorted.grf.
]]></attr>
</Note>
</Global>
<Phase number="0">
<Node aggregateKey="ShipCountry" enabled="enabled" guiHeight="25" guiName="AGGREGATE" guiWidth="50" guiX="498" guiY="24" id="AGGREGATE" mapping="$ShipCountry:=$ShipCountry;$Count:=count();$AvgFreight:=avg($Freight)" sorted="true" type="AGGREGATE"/>
<Node dedupKey="ShipName;ShipCity;OrderID;CustomerID;EmployeeID;OrderDate;RequiredDate;ShippedDate;ShipVia;Freight;ShipAddress;ShipRegion;ShipPostalCode;ShipCountry" enabled="enabled" guiHeight="65" guiName="Dedup" guiWidth="89" guiX="330" guiY="24" id="DEDUP0" keep="first" type="DEDUP"/>
<Node enabled="enabled" guiHeight="25" guiName="EXT_SORT" guiWidth="50" guiX="173" guiY="24" id="EXT_SORT" sortKey="ShipCountry(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="25" guiName="INPUT1" guiWidth="50" guiX="20" guiY="24" id="INPUT1" type="DATA_READER"/>
<Node append="false" enabled="enabled" fileURL="${DATAOUT_DIR}/orders.aggregated" guiHeight="25" guiName="OUTPUT" guiWidth="50" guiX="820" guiY="24" id="OUTPUT" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="AGGREGATE:0" guiBendpoints="" id="OUTEDGE" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="OUTPUT:0"/>
<Edge debugMode="false" fromNode="DEDUP0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (unique)" toNode="AGGREGATE:0"/>
<Edge debugMode="false" fromNode="EXT_SORT:0" guiBendpoints="" id="MIDDLE" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DEDUP0:0"/>
<Edge debugMode="false" fromNode="INPUT1:0" guiBendpoints="" id="INEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="EXT_SORT:0"/>
</Phase>
<Phase number="1">
<Node enabled="enabled" guiHeight="25" guiName="EXT_SORT" guiWidth="50" guiX="664" guiY="135" id="EXT_SORT1" sortKey="ShipCountry(a)" type="EXT_SORT"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/orders.dat" guiHeight="25" guiName="INPUT1" guiWidth="50" guiX="23" guiY="135" id="INPUT4" type="DATA_READER"/>
<Node append="false" enabled="enabled" fileURL="${DATAOUT_DIR}/orders.aggregated_Rollup" guiHeight="25" guiName="OUTPUT" guiWidth="50" guiX="823" guiY="135" id="OUTPUT3" type="DATA_WRITER"/>
<Node enabled="enabled" groupAccumulatorMetadataId="Metadata2" groupKeyFields="ShipCountry" guiHeight="0" guiName="Rollup" guiWidth="0" guiX="498" guiY="135" id="ROLLUP4" inputSorted="false" type="ROLLUP">
<attr name="transform"><![CDATA[//#TL

// Called for the first data record in a group.
function initGroup(groupAccumulator) {
	groupAccumulator["count"] = 0;
	groupAccumulator["totalFreight"] = 0;
}

// Called for each data record in a group (including the first one and the last one).
// Implicitly returns false => updateTransform is not called.
function updateGroup(groupAccumulator) {
	groupAccumulator["count"] = groupAccumulator["count"] + 1;
	groupAccumulator["totalFreight"] = 	groupAccumulator["totalFreight"] + $0.Freight;
}

// Called for the last data record in a group.
// Implicitly returns true => transform is called.
function finishGroup(groupAccumulator) {
	groupAccumulator["avgFreight"] = groupAccumulator["totalFreight"]/groupAccumulator["count"];
}

// Called to transform data records for intermediate output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group update.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function updateTransform(counter, groupAccumulator) {
}

// Called to transform data records for output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function transform(counter, groupAccumulator) {
	if (counter > 0) return SKIP;
	$0.ShipCountry := $0.ShipCountry;
	$0.Count := groupAccumulator["count"];
	$0.AvgFreight := groupAccumulator["avgFreight"];
	return ALL	
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {
// }

// Called during component initialization.
// function init() {
// }

// Called at the end of the rollup transform after all input data records were processed.
// function finished() {
// }

]]></attr>
</Node>
<Node enabled="enabled" groupAccumulatorMetadataId="Metadata2" groupKeyFields="OrderID;CustomerID;EmployeeID;OrderDate;RequiredDate;ShippedDate;ShipVia;Freight;ShipName;ShipAddress;ShipCity;ShipRegion;ShipPostalCode;ShipCountry" guiHeight="0" guiName="Dedup equal records" guiWidth="0" guiX="330" guiY="135" id="ROLLUP5" inputSorted="false" type="ROLLUP">
<attr name="transform"><![CDATA[//#TL
int INT;
INT = 2;


// Called for the first data record in a group.
function initGroup(groupAccumulator) {
	groupAccumulator["count"] = 0;
}

// Called for each data record in a group (including the first one and the last one).
// Implicitly returns false => updateTransform is not called.
function updateGroup(groupAccumulator) {
	groupAccumulator["count"] = groupAccumulator["count"] + 1;
	if (groupAccumulator["count"] < INT) return true;
}

// Called for the last data record in a group.
// Implicitly returns true => transform is called.
function finishGroup(groupAccumulator) {
}

// Called to transform data records for intermediate output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group update.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function updateTransform(counter, groupAccumulator) {
	if (counter > 0) return SKIP;
	$0.* := $0.*;
	return ALL
}

// Called to transform data records for output using the group accumulator.
// The counter parameter stores the number of previous calls to this method for the current group.
// Implicitly returns SKIP to skip sending any data records to output.
// Returning ALL would cause each data record to be sent to its corresponding output port.
// A port number may be returned to specify which data record should be sent to output.
function transform(counter, groupAccumulator) {
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {
// }

// Called during component initialization.
// function init() {
// }

// Called at the end of the rollup transform after all input data records were processed.
// function finished() {
// }

]]></attr>
</Node>
<Edge fromNode="EXT_SORT1:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="OUTPUT3:0"/>
<Edge debugMode="false" fromNode="INPUT4:0" guiBendpoints="" id="INEDGE5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="ROLLUP5:0"/>
<Edge debugMode="false" fromNode="ROLLUP4:0" guiBendpoints="" id="Edge18" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="EXT_SORT1:0"/>
<Edge debugMode="false" fromNode="ROLLUP5:0" guiBendpoints="" id="Edge16" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="ROLLUP4:0"/>
</Phase>
</Graph>
