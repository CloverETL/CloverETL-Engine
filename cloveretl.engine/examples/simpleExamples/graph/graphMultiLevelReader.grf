<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Pavel" created="Thu Feb 19 17:45:33 CET 2009" guiVersion="0.0" id="1235062922098" licenseType="Evaluation license." modified="Fri Feb 20 18:01:39 CET 2009" modifiedBy="Pavel" name="graphMultiLevelReader" revision="1.23">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="," name="recordName1" recordDelimiter="\r\n" type="delimited">
<Field name="type" type="string"/>
<Field name="product_name" type="string"/>
<Field name="product_code" type="integer"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="," name="recordName2" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="type" type="string"/>
<Field name="service_name" type="string"/>
<Field length="6" name="service_wage" scale="2" type="number"/>
<Field name="service_wage_currency" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="," name="recordName3" recordDelimiter="\r\n" type="delimited">
<Field name="type" type="string"/>
<Field name="range_name" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="126" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="--== MultiLevelReader Example ==--" titleColorB="0" titleColorG="0" titleColorR="255" titleFontSize="13" width="620" x="23" y="15">
<attr name="text"><![CDATA[This example demonstrates the use of MultiLevelReader with default built-in PrefixMultiLevelSelector.

MultiLevelReader reads flat files with non-uniform structure - files that can possibly contain number of different records (types). It uses a pluggable "selector" which looks at the file and determines the type of the following record. The record is parsed according to this type a sent out to corresponding output edge. Then the selection process repeats until the file ends.
]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" folded="false" height="214" id="Note1" textColorB="128" textColorG="128" textColorR="128" textFontSize="8" title="MultiLevelSelector" titleColorB="128" titleColorG="128" titleColorR="128" titleFontSize="9" width="197" x="682" y="15">
<attr name="text"><![CDATA[An interface that is used to parse heterogenous flat files. The implementing class is allowed to look at data found in file ahead of current position to determine their data type (metadata). Once it decides, regular DataReader is used to parse that portion of the file. Selector can also skip uninteresting parts of the file or use any upcoming data for its decision.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" folded="false" height="246" id="Note2" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="PrefixMultiLevelSelector" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="197" x="682" y="271">
<attr name="text"><![CDATA[This default implementation of MultiLevelSelector is used when no custom selector is specified in MultiLevelReader. It determines the records by their prefixes - arbitrary number of first characters in a record. 

Prefixes and their corresponding output ports can be instantly specified in Selector properties as a table of Prefix=Port number pairs.

Please see "Selector properties" of MultiLevelReader for more.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" folded="false" height="118" id="Note3" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="286" x="23" y="163">
<attr name="text"><![CDATA[Here we read the input file and parse it into three different types of records - product info, service info and product range. Each type is identified by the value in its first field. The selector matches the values against the table in selectorProperties.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="255" backgroundColorG="255" backgroundColorR="255" folded="false" height="132" id="Note4" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="286" x="23" y="408">
<attr name="text"><![CDATA[Note, that PrefixMultiLevelSelector tries to find the best match, thus allowing two distinct prefixes even though one itself is a prefix of the other. This is absolutely correct.

(This refers to "product" and "product_range" prefixes in selectorProperties table)]]></attr>
</Note>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/multilevel_product.txt" guiHeight="0" guiName="Products" guiWidth="0" guiX="515" guiY="187" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/multilevel_service.txt" guiHeight="0" guiName="Services" guiWidth="0" guiX="515" guiY="310" id="DATA_WRITER1" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/multilevel_product_range.txt" guiHeight="0" guiName="Product ranges" guiWidth="0" guiX="515" guiY="423" id="DATA_WRITER2" type="DATA_WRITER"/>
<Node enabled="enabled" fileURL="${DATAIN_DIR}/other/multilevel_prefix.txt" guiHeight="0" guiName="MultiLevelReader" guiWidth="0" guiX="23" guiY="300" id="MULTI_LEVEL_READER0" selectorClass="org.jetel.data.parser.PrefixMultiLevelSelector" dataPolicy="lenient" selectorProperties="product=0&#10;product_range=2&#10;service=1&#10;" type="MULTI_LEVEL_READER"/>
<Edge fromNode="MULTI_LEVEL_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
<Edge fromNode="MULTI_LEVEL_READER0:1" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="DATA_WRITER1:0"/>
<Edge fromNode="MULTI_LEVEL_READER0:2" guiBendpoints="" id="Edge2" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 2 (out)" toNode="DATA_WRITER2:0"/>
</Phase>
</Graph>
