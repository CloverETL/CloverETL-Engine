<?xml version="1.0" encoding="UTF-8"?>
<Graph author="avackova" created="Wed Mar 07 09:01:26 CET 2007" description="This graph demonstrates functionality of NORMALIZER component with normalization specified by inline TransformLang source." guiVersion="0.0.0.devel" id="1204549060147" licenseType="Evaluation Devel" modified="Fri Mar 12 12:47:27 CET 2010" modifiedBy="cloveruser" name="Testing NORMALIZER" revision="1.29">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter="|" name="customers" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\n" type="delimited">
<Field name="customers_count" type="integer"/>
<Field name="customers" type="string"/>
<Field name="EmployeeID" type="integer"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="338" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Use of the Normalizer Component (CTL)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="472" x="37" y="143">
<attr name="text"><![CDATA[
Graph demonstrates the use of Normalizer. Received records contain a field named "customers". Its values are strings consisting of substrings, white spaces and hyphens.

Component splits the field into several substrings without white spaces and hyphens and counts the number of such substrings. This is performed by the count() function. The count of substrings is returned by the function.

In the transform() function, which is called multiple times (number of calls of the function equals to the number returned by the count() function for the input record), new output records are created. These get the substrings and assign each of them to one of the output fields. 

Thus, this component creates one or more output records based on one input record.

Before processing next input record, the clean() function returns variables into intitial state.

Transformation is written in Clover Transformation Language (CTL) directly in the graph. It can be seen in the Source tab. It is executed on runtime.
]]></attr>
</Note>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/delimited/customers.txt" guiHeight="25" guiName="Customers Grouped for Each Employee" guiWidth="50" guiX="22" guiY="30" id="INPUT2" type="DATA_READER">
<attr name="DataPolicy"><![CDATA[Strict]]></attr>
</Node>
<Node enabled="enabled" guiHeight="0" guiName="Normalizer" guiWidth="0" guiX="197" guiY="30" id="NORMALIZER0" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#TL
list customers;
// This transformation defines the way in which a single input record is normalized
// into multiple output records.


// This function is called for all input records.
// It parses each single input record and returns multiple output records
// that should be created from such input record.
function count() {
	customers = split($0.customers,"\\s*-\\s*");
	return length(customers);
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function transform(idx) {
	$0.customers := customers[idx];
	$0.EmployeeID := $EmployeeID;
}

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
function clean() {
	remove_all(customers);
}

// Called to return a user-defined error message when an error occurs.
// function getMessage() {}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/normalized.out" guiHeight="25" guiName="Customers Normalized" guiWidth="50" guiX="372" guiY="30" id="WRITER1" type="DATA_WRITER"/>
<Edge debugMode="false" fromNode="INPUT2:0" guiBendpoints="" id="INEDGE2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="NORMALIZER0:0"/>
<Edge debugMode="true" fromNode="NORMALIZER0:0" guiBendpoints="" id="OUTEDGE1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="WRITER1:0"/>
</Phase>
</Graph>
