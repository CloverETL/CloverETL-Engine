<?xml version="1.0" encoding="UTF-8"?>
<Graph description="This example extends graphOrdersReformat in a sence that&#10;the counter used for generating OrderKey is taken from&#10;Sequence object which is persistent between graph executions - i.e.&#10;you get continuous sequence of unique numbers.&#10;For successfull compilation, tools.jar library must be part of CLASSPATH.&#10;" name="Testing Reformat">
<Global>
<Metadata fileURL="metadata/orders.fmt" id="InMetadata"/>
<Metadata fileURL="metadata/ordersRef.fmt" id="OutMetadata"/>
<Sequence cached="5" fileURL="sequence.dat" id="Sequence0" name="seq" start="1" step="1" type="SIMPLE_SEQUENCE"/>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="data/orders.dat" guiHeight="25" guiName="INPUT" guiWidth="50" guiX="20" guiY="20" id="INPUT" type="DELIMITED_DATA_READER"/>
<Node append="false" enabled="enabled" fileURL="output/orders.dat.out" guiHeight="25" guiName="OUTPUT" guiWidth="50" guiX="370" guiY="20" id="OUTPUT" type="DELIMITED_DATA_WRITER"/>
<Node enabled="enabled" guiHeight="25" guiName="REF" guiWidth="50" guiX="195" guiY="20" id="REF" type="REFORMAT">
<attr name="transform">
import org.jetel.component.DataRecordTransform;
import org.jetel.data.DataRecord;
import org.jetel.data.GetVal;
import org.jetel.data.SetVal;
import org.jetel.data.sequence.Sequence;
import org.jetel.graph.TransformationGraph;

public class reformatOrders extends DataRecordTransform{

	Sequence sequence;
	int field=0;

	public boolean init(){
		sequence = TransformationGraph.getReference().getSequence("Sequence0");
        return true;
	}

	public boolean transform(DataRecord source[], DataRecord[] target){
		StringBuffer strBuf=new StringBuffer(80);
		try{
			// let's concatenate shipping address into one long string
			strBuf.append(GetVal.getString(source[0],"ShipName")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipAddress")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCity")).append(';');
			strBuf.append(GetVal.getString(source[0],"ShipCountry"));
			// mapping among source + target fields
			// some fields get assigned directly from source fields, some
			// are assigned from internall variables
			// OrderKey gets its value from sequence
			SetVal.setInt(target[0],"OrderKey",sequence.nextValueInt());
			SetVal.setInt(target[0],"OrderID",GetVal.getInt(source[0],"OrderID"));
			SetVal.setString(target[0],"CustomerID",GetVal.getString(source[0],"CustomerID"));
			SetVal.setValue(target[0],"OrderDate",GetVal.getDate(source[0],"OrderDate"));
			SetVal.setString(target[0],"ShippedDate","02.02.1999");
			SetVal.setInt(target[0],"ShipVia",GetVal.getInt(source[0],"ShipVia"));
			SetVal.setString(target[0],"ShipTo",strBuf.toString());
		}catch(Exception ex){
			return false;
		}
			return true;
	}
}
</attr>
</Node>
<Edge fromNode="INPUT:0" guiBendpoints="" id="INEDGE" inPort="0 (REF)" metadata="InMetadata" outPort="0 (INPUT)" toNode="REF:0"/>
<Edge fromNode="REF:0" guiBendpoints="" id="OUTEDGE" inPort="0 (OUTPUT)" metadata="OutMetadata" outPort="0 (REF)" toNode="OUTPUT:0"/>
</Phase>
</Graph>
