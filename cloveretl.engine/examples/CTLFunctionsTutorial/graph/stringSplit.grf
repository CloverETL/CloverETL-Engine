<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Dec 18 10:28:44 CET 2008" guiVersion="0.0.0.devel" id="1229622309380" licenseType="Evaluation license." modified="Fri May 15 14:37:23 CEST 2009" modifiedBy="cloveruser" name="containerCut" revision="1.59">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="splitInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="Regex" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="splitOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="Arg" type="string"/>
<Field name="Regex" type="string"/>
<Field name="Function" type="string"/>
<Field name="Result" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="162" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="list split(string arg, string regex)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="438" x="88" y="88">
<attr name="text"><![CDATA[
The split(string, string) function accepts two string arguments. The second is some regular expression. It is searched in the first string argument and if it is found, the string is split into the parts located between the characters or substrings of such a regular expression. The resulting parts of the string are returned as a list. 
Thus, split("abcdefg", "[ce]") returns ["ab",d","fg"].]]></attr>
</Note>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/stringSplit.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="46" guiY="277" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/stringSplitOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="450" guiY="277" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="242" guiY="277" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#TL

// Transforms input record into output record.
function transform() {
list lw;
list lw_for_print;
int lengthvar;
int lengthstring;
string string_a;
string string_b;

// Creates a list from a string and a regular expression. Substrings that do not match the regular expression are used as the elements of the list.
lw=split($0.Arg,$0.Regex);


// Prints the list. (We use the copy of the list. It will be emptied during the print. The original list, however, remains unchanged.)

// Copies the list to a new one for printing. 
lw_for_print=lw;

// Gets the length of the list and assigns the length to a new variable.
lengthvar=length(lw_for_print);

//Gets the first string element from the list for printing.	      
string_b=poll(lw_for_print);
lengthvar--;
     
// Concatenates substrings with a colon between each pair of these substrings.
while (lengthvar != 0) { 
string_a=poll(lw_for_print);	 
string_b=concat(string_b,",",string_a);
lengthvar--;
}	 

// Surrounds the resulting string by brackets.
string_b=concat("[",string_b,"]"); 

$0.Arg := $0.Arg;
$0.Regex := $0.Regex;
$0.Function := "split($0.Arg,$0.Regex)";
$0.Result := string_b;
}

// Called during component initialization.
// function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="false" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
