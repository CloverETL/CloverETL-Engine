<?xml version="1.0" encoding="UTF-8"?>
<Graph author="cloveruser" created="Thu Dec 18 10:28:44 CET 2008" guiVersion="0.0.0.devel" id="1229608164792" licenseType="Evaluation license." modified="Fri May 15 14:00:38 CEST 2009" modifiedBy="cloveruser" name="container_push" revision="1.79">
<Global>
<Metadata id="Metadata0" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="forPushInput" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="ListElement0" type="string"/>
<Field name="ListElement1" type="string"/>
<Field name="ListElement2" type="string"/>
<Field name="ListElement3" type="string"/>
<Field name="NewElement" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="ISO-8859-1">
<Record fieldDelimiter=";" name="pushOverview" previewAttachmentCharset="ISO-8859-1" recordDelimiter="\r\n" type="delimited">
<Field name="List" type="string"/>
<Field name="NewElement" type="string"/>
<Field name="Function" type="string"/>
<Field name="ReturnValue" type="boolean"/>
<Field name="NewValueOfList" type="string"/>
</Record>
</Metadata>
<Property fileURL="workspace.prm" id="GraphParameter0"/>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="148" id="Note1" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="Example" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="421" x="50" y="202">
<attr name="text"><![CDATA[
Here we use lists consisting of string elements. 
List consists of 4 elements. 
push(List) adds the new element to the end of List. 
And after the function is executed, List consists of 5 resulting elements.
The function returns true, if it was successful, or false, if it was not.]]></attr>
</Note>
<Note alignment="1" backgroundColorB="225" backgroundColorG="255" backgroundColorR="255" folded="false" height="157" id="Note0" textColorB="0" textColorG="0" textColorR="0" textFontSize="8" title="boolean push(list arg, elementType newElement)" titleColorB="0" titleColorG="0" titleColorR="0" titleFontSize="10" width="420" x="51" y="38">
<attr name="text"><![CDATA[
The push(list, elementType) function accepts two arguments: the first is list and the second is of any data type. However, the second argument must be of the same data type as each element of the list. The function takes the second argument and adds it to the end of the first argument. 
The list specified as the first argument changes to this new value. 
The function returns true if it was successful, otherwise, it returns false.]]></attr>
</Note>
</Global>
<Phase number="0">
<Node enabled="enabled" fileURL="${DATAIN_DIR}/containerPush.txt" guiHeight="0" guiName="UniversalDataReader" guiWidth="0" guiX="50" guiY="375" id="DATA_READER0" type="DATA_READER"/>
<Node enabled="enabled" fileURL="${DATAOUT_DIR}/containerPushOverview.txt" guiHeight="0" guiName="UniversalDataWriter" guiWidth="0" guiX="442" guiY="375" id="DATA_WRITER0" type="DATA_WRITER"/>
<Node enabled="enabled" guiHeight="0" guiName="Reformat" guiWidth="0" guiX="252" guiY="375" id="REFORMAT0" type="REFORMAT">
<attr name="transform"><![CDATA[//#TL

// Transforms input record into output record.
function transform() {

//Declarations.
list list1;
list old_list1;
boolean bool;

// Creates the original list1.
push(list1,$0.ListElement0);
push(list1,$0.ListElement1);
push(list1,$0.ListElement2);
push(list1,$0.ListElement3);

//Older value of the original list1.
old_list1=list1;

//Inserts two new elements into the original list. list1 has been changed to its new value.
bool=push(list1,$0.NewElement);

//Prints the original list, the new element that should be added to the end of the original list, the return value of the function and the new value of the list. 
$0.List := concat("[",old_list1[0],",",old_list1[1],",",old_list1[2],",",old_list1[3],"]");
$0.NewElement := $0.NewElement;
$0.Function := "push(List,$0.NewElement)";
$0.ReturnValue := bool;
$0.NewValueOfList := concat("[",list1[0],",",list1[1],",",list1[2],",",list1[3],",",list1[4],"]");
}

// Called during component initialization.
//function init() {}

// Called after the component finishes.
// function finished() {}
]]></attr>
</Node>
<Edge debugLastRecords="true" debugMode="false" fromNode="DATA_READER0:0" guiBendpoints="" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (output)" toNode="REFORMAT0:0"/>
<Edge debugLastRecords="true" debugMode="false" fromNode="REFORMAT0:0" guiBendpoints="" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="DATA_WRITER0:0"/>
</Phase>
</Graph>
