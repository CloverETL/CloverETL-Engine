/*
 * jETeL/CloverETL - Java based ETL application framework.
 * Copyright (c) Javlin, a.s. (info@cloveretl.com)
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package org.jetel.component;

import org.jetel.ctl.CTLAbstractTransform;
import org.jetel.ctl.CTLEntryPoint;
import org.jetel.data.DataRecord;
import org.jetel.exception.ComponentNotReadyException;
import org.jetel.exception.TransformException;

/**
 * Base class of all Java filter generated by CTL-to-Java compiler from CTL filters.
 *
 * @author Michal Tomcanyi, Javlin a.s. &lt;michal.tomcanyi@javlin.cz&gt;
 * @author Martin Janik, Javlin a.s. &lt;martin.janik@javlin.eu&gt;
 *
 * @version 5th May 2010
 * @created 28th April 2009
 *
 * @see RecordFilter
 */
public abstract class CTLRecordFilter extends CTLAbstractTransform implements RecordFilter {

	public final void init() throws ComponentNotReadyException {
		// a single input data record is required, no output data records are used
		this.inputRecords = new DataRecord[1];
		this.outputRecords = NO_DATA_RECORDS;

		globalScopeInit();
		initDelegate();
	}

	/**
	 * Called by {@link #init()} to perform user-specific initialization defined in the CTL transform. The default
	 * implementation does nothing, may be overridden by the generated transform class.
	 *
	 * @throws ComponentNotReadyException if the initialization fails
	 */
	@CTLEntryPoint(name = "init", required = false)
	protected void initDelegate() throws ComponentNotReadyException {
		// does nothing by default, may be overridden by generated transform classes
	}

	public boolean isValid(DataRecord record) throws TransformException {
		inputRecords[0] = record;

		try {
			return isValidDelegate();
		} catch (ComponentNotReadyException exception) {
			// the exception may be thrown by lookups, sequences, etc.
			throw new TransformException("Generated transform class threw an exception!", exception);
		}
	}

	/**
	 * Called by {@link #isValid(DataRecord)} to perform user-specific filtering defined in the CTL transform.
	 * Has to be overridden by the generated transform class.
	 *
	 * @throws ComponentNotReadyException if some internal initialization failed
	 * @throws TransformException if an error occurred
	 */
	@CTLEntryPoint(name = "isValid", required = true)
	protected abstract boolean isValidDelegate() throws ComponentNotReadyException, TransformException;

}
