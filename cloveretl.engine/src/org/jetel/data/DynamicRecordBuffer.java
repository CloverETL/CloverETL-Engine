/*
*    jETeL/Clover - Java based ETL application framework.
*    Copyright (C) 2002-04  David Pavlis <david_pavlis@hotmail.com>
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
*/
package org.jetel.data;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;
import static org.jetel.util.ByteBufferUtils.decodeLength;
import static org.jetel.util.ByteBufferUtils.encodeLength;

/**
 *  Class implementing DynamicRecordBuffer backed by temporary file - i.e. unlimited
 *  size<br>
 *  Implements FIFO: write & read operations can be interleaved, however it
 *  deteriorates performance if data has to be swap to disk (if internal
 *  buffer is exhausted).<br>
 *  
 *
 *@author     David Pavlis
 *@since      November 20, 2006
 */
public class DynamicRecordBuffer {

	private FileChannel tmpFileChannel;
	private File tmpFile;
	private String tmpFilePath;

	private ByteBuffer readDataBuffer;
    private ByteBuffer writeDataBuffer;

	private LinkedList<DiskSlot> emptyFileBuffers;
    private LinkedList<DiskSlot> fullFileBuffers;
    
    private volatile int bufferedRecords;
    
    private boolean awaitingData;
    
    private int lastSlot;
    private int dataBufferSize;
    
	private boolean hasFile;   // indicates whether buffer contains unwritten data
	private boolean isClosed;


	// size of data (in bytes) needed to store record length
	private final static int LEN_SIZE_SPECIFIER = 4;
	// size of integer variable used to keep record length
    
	private final static String TMP_FILE_PREFIX = ".fbuf";
	// prefix of temporary file generated by system
	private final static String TMP_FILE_SUFFIX = ".tmp";
	// suffix of temporary file generated by system
	private final static String TMP_FILE_MODE = "rw";
    
    private final static int EOF = Integer.MAX_VALUE;


	// methods
	/**
	 *  Constructor of the DynamicRecordBuffer object
	 *
	 *@param  tmpFilePath     Name of the subdirectory where to create TMP files or
	 *      NULL (the system default will be used)
	 *@param  dataBufferSize  The size of internal in memory buffer. If smaller
	 *      than DEFAULT_BUFFER_SIZE, then default is used
	 */
	public DynamicRecordBuffer(String tmpFilePath, int dataBufferSize) {
		this.tmpFilePath = tmpFilePath;
        this.dataBufferSize=dataBufferSize;
    }

    public void init(){
        hasFile = false;
        isClosed=false;
        emptyFileBuffers=new LinkedList<DiskSlot>();
        fullFileBuffers=new LinkedList<DiskSlot>();
        dataBufferSize= Math.max(dataBufferSize,Defaults.Graph.BUFFERED_EDGE_INTERNAL_BUFFER_SIZE);
        readDataBuffer = ByteBuffer.allocateDirect(dataBufferSize);
        writeDataBuffer = ByteBuffer.allocateDirect(dataBufferSize);
        lastSlot=-1;
        awaitingData=true;
        bufferedRecords=0;
        readDataBuffer.flip();
    }
    

	/**
	 * Constructor of the DynamicRecordBuffer
	 *
	 *@param  tmpFilePath  Name of the subdirectory where to create TMP files or
	 *      NULL (the system default will be used)
	 */
	public DynamicRecordBuffer(String tmpFilePath) {
	    this(tmpFilePath,-1);
	}

	/**
	 * Constructor of the DynamicRecordBuffer with tmp file
     * created under java.io.tmpdir dir.
	 */
	public DynamicRecordBuffer(){
	    this(System.getProperty("java.io.tmpdir"),-1);
    }
    
    
	/**
	 *  Opens buffer, creates temporary file.
	 *
	 *@exception  IOException  Description of Exception
	 *@since                   September 17, 2002
	 */
	private void openTmpFile() throws IOException {
		if (tmpFilePath != null) {
			tmpFile = File.createTempFile(TMP_FILE_PREFIX, TMP_FILE_SUFFIX, new File(tmpFilePath));
		} else {
			tmpFile = File.createTempFile(TMP_FILE_PREFIX, TMP_FILE_SUFFIX);
		}
		tmpFile.deleteOnExit();
		// we want the temp file be deleted on exit
		tmpFileChannel = new RandomAccessFile(tmpFile, TMP_FILE_MODE).getChannel();
		hasFile=true;
	}


	/**
	 *  Closes buffer, removes temporary file (is exists)
	 *
	 *@exception  IOException  Description of Exception
	 *@since                   September 17, 2002
	 */
	public void close() throws IOException {
		isClosed=true;
        if (hasFile) {
			tmpFileChannel.close();
			if (!tmpFile.delete()) {
				throw new IOException("Can't delete TMP file: " + tmpFile.getAbsoluteFile());
			}
		}
		hasFile = false;
        fullFileBuffers=null;
        emptyFileBuffers=null;
        readDataBuffer=null;
        writeDataBuffer=null;
	}

	/**
	 *  Clears the buffer. Temp file (if it was created) remains
	 * unchanged size-wise
	 */
	public void clear() {
	    emptyFileBuffers.addAll(fullFileBuffers);
        fullFileBuffers.clear();
		readDataBuffer.clear();
        writeDataBuffer.clear();
        awaitingData=true;
        bufferedRecords=0;
        readDataBuffer.flip();
        
	}


	/**
	 *  Stores one data record into buffer.
	 *
	 *@param  data             ByteBuffer containing record's data
	 *@exception  IOException  In case of IO failure
	 *@since                   September 17, 2002
	 */
	public void writeRecord(ByteBuffer data) throws IOException {
		if(isClosed){
			throw new IOException("Buffer has been closed !");
		}
		
		int recordSize = data.remaining();

        if (writeDataBuffer.remaining() < recordSize + LEN_SIZE_SPECIFIER) {
            flushWriteBuffer();
        }
		try {
			//writeDataBuffer.putInt(recordSize);
            encodeLength(writeDataBuffer,recordSize);
			writeDataBuffer.put(data);
            bufferedRecords++;
		} catch (BufferOverflowException ex) {
			throw new IOException("WriteBuffer is not big enough to accomodate data record !");
		}
	}

    public void setEOF() throws IOException {
        if(isClosed){
            throw new IOException("Buffer has been closed !");
        }
        if (writeDataBuffer.remaining() < LEN_SIZE_SPECIFIER){
            flushWriteBuffer();
        }
        //writeDataBuffer.putInt(EOF);
        encodeLength(writeDataBuffer,EOF);
        flushWriteBuffer();
        
    }
    

	/**
	 *  Secures that in memory buffer is "mapped" from proper location and
	 *  populated with data from TMP file (is needed)
	 *
	 *@param  position         Description of the Parameter
	 *@param  requestedSize    Description of the Parameter
	 *@exception  IOException  Description of the Exception
	 */
	private final synchronized void flushWriteBuffer() throws IOException {
            // we need to swap data - first try directly read buffer
            if (awaitingData) {
                // swap write & read buffer
                writeDataBuffer.flip();
                readDataBuffer.clear();
                readDataBuffer.put(writeDataBuffer);
                readDataBuffer.flip();
                writeDataBuffer.clear();
                awaitingData = false;
                notify();
            } else {

                if (!hasFile)
                    openTmpFile();
                int onDiskSlot;
                // we need to get new buffer slot and save the current to disk
                if (emptyFileBuffers.size() > 0) {
                    onDiskSlot = emptyFileBuffers.removeFirst().getSlot();
                } else {
                    onDiskSlot = (++lastSlot);
                }
                writeDataBuffer.flip();
                int length=writeDataBuffer.limit();
                // set full limit to data buffer - want to
                // save full buffer (even if it is not fully populated - for performance 
                // reasons
                writeDataBuffer.limit(dataBufferSize);
                tmpFileChannel.write(writeDataBuffer, (long) onDiskSlot
                        * dataBufferSize);
                writeDataBuffer.clear();
                fullFileBuffers.add(new DiskSlot(onDiskSlot,length));
            }
	}



	/**
	 *  Reads next record from the buffer but leaves the record there - FIFO order.
	 *  Subsequent calls to this method returns the same record.	
	 *
	 *@param  data             ByteBuffer into which store data
	 *@return                  ByteBuffer populated with record's data or NULL if
	 *      no more record can be retrieved
	 *@exception  IOException  Description of the Exception
	 */
	public boolean readRecod(ByteBuffer data) throws IOException {
		if(isClosed){
			throw new IOException("Buffer has been closed !");
		}

        // test that we have enough data
        if (readDataBuffer.remaining()<LEN_SIZE_SPECIFIER){
            secureReadBuffer();
            
        }
        //int recordSize = readDataBuffer.getInt();
        int recordSize= decodeLength(readDataBuffer);
        if (recordSize==EOF){
            close();
            return false;
        }
        
        int oldLimit = readDataBuffer.limit();
        readDataBuffer.limit(readDataBuffer.position() + recordSize);
        data.put(readDataBuffer);
        readDataBuffer.limit(oldLimit);
        data.flip();
        bufferedRecords--;
        return true;
	}


    private final synchronized void secureReadBuffer() throws IOException{
        // is there a save data buffer already ?
        if (fullFileBuffers.size()>0){
            DiskSlot slot=fullFileBuffers.removeFirst();
            readDataBuffer.clear();
            tmpFileChannel.read(readDataBuffer, (long)slot.getSlot()*dataBufferSize);
            readDataBuffer.flip();
            readDataBuffer.limit(slot.getUsedBytes());
            emptyFileBuffers.add(slot);
        }else{ // we may read it from    writeBuffer
            // set flag that we are waiting for writer..
            awaitingData=true;
            while(awaitingData){
                notify();
                try{
                    wait();
                }catch(InterruptedException ex){
                    throw new IOException("Interrupted when waiting for full buffer: "+
                            ex.getMessage());
                }
            }
        }
    }
    

	public boolean isEmpty(){
		return writeDataBuffer.hasRemaining() || readDataBuffer.hasRemaining() ||
            fullFileBuffers.size()>0;
	}
    
    public boolean hasData(){
        return readDataBuffer.hasRemaining() ||
        fullFileBuffers.size()>0;
    }


    /**
     * @return the hasFile
     * @since 20.11.2006
     */
    public boolean isHasFile() {
        return hasFile;
    }


    /**
     * @return the bufferedRecords
     * @since 20.11.2006
     */
    public int getBufferedRecords() {
        return bufferedRecords;
    }
    
    private static class DiskSlot {
        int slot;
        int usedBytes;
        
        private DiskSlot(int slot,int usedBytes){
            this.slot=slot;
            this.usedBytes=usedBytes;
        }

        /**
         * @return the slot
         * @since 21.11.2006
         */
        private int getSlot() {
            return slot;
        }

        /**
         * @param slot the slot to set
         * @since 21.11.2006
         */
        private void setSlot(int slot) {
            this.slot = slot;
        }

        /**
         * @return the usedBytes
         * @since 21.11.2006
         */
        private int getUsedBytes() {
            return usedBytes;
        }

        /**
         * @param usedBytes the usedBytes to set
         * @since 21.11.2006
         */
        private void setUsedBytes(int usedBytes) {
            this.usedBytes = usedBytes;
        }
        
    }
    
}

