/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParser.java */
package org.jetel.ctl;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.jetel.component.RecordTransform;
import org.jetel.ctl.ASTnode.*;
import org.jetel.ctl.data.Scope;
import org.jetel.ctl.data.TLType;
import org.jetel.ctl.data.TLTypePrimitive;
import org.jetel.graph.TransformationGraph;
import org.jetel.util.file.FileUtils;
import org.jetel.util.file.SandboxUrlUtils;
import org.jetel.util.property.PropertyRefResolver;
import org.jetel.util.property.RefResFlag;
import org.jetel.util.string.StringUtils;


public class TransformLangParser extends ExpParser/*@bgen(jjtree)*/implements TransformLangParserTreeConstants, TransformLangParserConstants {/*@bgen(jjtree)*/
  protected JJTTransformLangParserState jjtree = new JJTTransformLangParserState();
           private ParserHelper parserHelper;
       private boolean hasEvalNode;
           private HashSet<String> parsedImports;
           private ProblemReporter problemReporter;
           private TransformationGraph graph;
       private PropertyRefResolver propertyRefResolver;
       private String encoding;
       private boolean isImported = false;
       private String sourceCode;
       private int tabSize;

        /**
	 * Creates the main parser
	 */
        public TransformLangParser(TransformationGraph graph, ProblemReporter problemReporter, java.io.Reader input, String encoding) {
                this(input);
                if (input instanceof SourceCodeProvider) {
                        this.sourceCode = ((SourceCodeProvider) input).getSourceCode();
                }
                this.graph = graph;
                this.propertyRefResolver = (graph != null) ? new PropertyRefResolver(graph.getGraphParameters()) : null;
                this.parserHelper = new ParserHelper();
                this.hasEvalNode = false;
                this.parsedImports = new HashSet<String>();
                this.problemReporter = problemReporter;
                this.encoding = encoding;
        }

      /**
       * Used by main parser to create import parsers
       */
      public TransformLangParser(TransformLangParser parent, String filename, java.io.Reader input){
                          this(input);
                          this.graph = parent.graph;
              this.propertyRefResolver = parent.propertyRefResolver;
                          this.parserHelper=parent.parserHelper;
                          this.hasEvalNode = false;
              this.problemReporter = parent.problemReporter;
              this.parsedImports = parent.parsedImports;
              this.isImported  = true;
              this.encoding = parent.encoding;
              this.setTabSize(parent.tabSize);
      }

        public void reset(java.io.Reader input) {
                parserHelper.reset();
                hasEvalNode = false;
                parsedImports.clear();
                problemReporter.reset();
                this.sourceCode = (input instanceof SourceCodeProvider) ? ((SourceCodeProvider) input).getSourceCode() : null;
                ReInit(input);
        }

        public String getSource() {
                return sourceCode;
        }

        public String getEncoding() {
            return encoding;
        }

        public void setTabSize(int size) {
            this.tabSize = size;
                this.token_source.input_stream.setTabSize(size);
        }

        public int getTabSize() {
            return this.tabSize;
        }

    @Override
    public final Map<String, List<CLVFFunctionDeclaration>> getFunctions(){
        return parserHelper.getFunctions();
    }

    public void setFunctions(Map<String, List<CLVFFunctionDeclaration>> functions) {
                parserHelper.getFunctions().putAll(functions);
    }

    public void setCurrentScope(Scope scope) {
                parserHelper.setCurrentScope(scope);
    }

     public static final String unquote(String image){
        return image.substring(1,image.length()-1);
     }

        public void addVariable(CLVFVariableDeclaration var) {
                CLVFVariableDeclaration oldDeclaration = null;
                if ((oldDeclaration = parserHelper.addVariable(var)) != null) {
                        error(var,"Duplicate variable '" + var.getName() + "'");
                }
        }

        public CLVFVariableDeclaration checkDeclaration(String name, int beginLine, int beginColumn, int endLine, int endColumn) {
                CLVFVariableDeclaration var = parserHelper.getVariable(name);
                if (var == null) {
                        error(beginLine,beginColumn,endLine,endColumn,"Variable '" + name + "' is not declared");
                }

                return var;
        }

        /** Method for entering function blocks and checking for duplicate declarations */
        public void enteredBlock(CLVFFunctionDeclaration func) {
                if (!parserHelper.enteredBlock(func)) {
                        error(func,"Duplicate function '" + func.getName() + "'");
                }
        }

        /** Method for entering anonymous code blocks (loops/switch/if bodies) */
        public Scope enteredBlock() {
                return parserHelper.enteredBlock();
        }

        public void exitedBlock() {
                parserHelper.exitedBlock();
        }

        public int getCurrentBlockOffset() {
                return parserHelper.getCurrentBlockOffset();
        }

    /**
     * Does the parsed AST tree contain any "eval" node ?
     * If so, executor will need reference to parser to process such
     * nodes
     *
     */

    public boolean hasEvalNode(){
        return hasEvalNode;
    }

        public boolean isParsedImport(String url) {
                return parsedImports != null && parsedImports.contains(url);
        }

    public void addParsedImports(HashSet<String> imports) {
        if (imports == null) {
                return;
        }

        if (parsedImports == null) {
                parsedImports = new HashSet<String>();
        }

        parsedImports.addAll(imports);

    }

    public void addParsedImport(String url) {

        if (parsedImports == null) {
                parsedImports = new HashSet<String>();
        }

        parsedImports.add(url);
    }

    public HashSet<String> getParsedImports() {
        return parsedImports;
    }


    // -------------------- Error Reporting --------------------------

        private void warn(SimpleNode node, String error, String hint) {
                problemReporter.warn(node.getBegin(), node.getEnd(), error, hint);
        }

        private void warn(Token token, String error, String hint) {
                problemReporter.warn(token.beginLine,token.beginColumn,token.endLine,token.endColumn,error,hint);
        }

        private void warn(int beginLine, int beginColumn, int endLine, int endColumn, String error, String hint) {
                problemReporter.warn(beginLine, beginColumn, endLine, endColumn, error, hint);
        }

        private void error(Token token, String error) {
                problemReporter.error(token.beginLine,token.beginColumn,token.endLine,token.endColumn,error,null);
        }

        private void error(Token token, String error, String hint) {
                problemReporter.error(token.beginLine,token.beginColumn,token.endLine,token.endColumn,error,hint);
        }

        private void error(int beginLine, int beginColumn, int endLine, int endColumn, String error) {
                problemReporter.error(beginLine, beginColumn, endLine, endColumn, error, null);
        }

        private void error(SimpleNode node, String error) {
                problemReporter.error(node.getBegin(), node.getEnd(), error, null);
        }

        private void error(SimpleNode node, String error, String hint) {
                problemReporter.error(node.getBegin(), node.getEnd(), error, hint);
        }

        public ProblemReporter getProblemReporter() {
                return this.problemReporter;
        }

    /**
     *  Method to report a shift-operation for an unexpected token.
     *  Insert: Call to this method into the generated parser's jj_consume_token() method
     *  just before 'throw generateException()' line
     */
    public void tokenError(int expectedKind) {
                String errorMessage;
                if (jj_nt.kind != EOF) {
                        errorMessage = "Syntax error on token '" + jj_nt.image + "'";
                } else {
                        // EOF has code 0 and is not present in tokenImage
                        errorMessage = "Syntax error - unexpected end of file";
                }

                String hint;
                if (expectedKind > 0) {
                        hint = "Insert " + tokenImage[expectedKind] + " to correct";
                } else {
                        hint = "Delete this token";
                }

                error(jj_nt, errorMessage, hint);
        }

        /**
	 * Analyzes special tokens (comments) for occurrence of indication comment to determine
	 * if compiled or non-compiled mode is active.
	 */
        private boolean isCompiledMode(Token regular) {
                boolean lastCompiled = false;
                while (regular.specialToken != null) {
                        switch (regular.specialToken.kind) {
                                case TL_COMPILE:
                                        // this is #CTL2:COMPILE -> running in compiled mode
                                        // NEW COMMENT
                                        lastCompiled = true;
                                        regular = regular.specialToken;
                                        break;
                                case TL_SHEBANG:
                                        // this is #CTL2 -> running in non-compiled mode
                                        lastCompiled = false;
                                        regular = regular.specialToken;
                                        break;
                                default:
                                        // check previous special token (if any)
                                                regular = regular.specialToken;
                                        break;
                        }
                }

                // we checked all special tokens and did not find #CTL2:COMPILED -> return false
                return lastCompiled;
        }

        private boolean isGenerated(Token token) {

        boolean generated = false;
        while (token.specialToken != null) {
            if (token.specialToken.kind == TL_GENERATED) {
                generated = true;
                break;
            } else {
                token = token.specialToken;
            }
        }
                return generated;
    }

    public void parsingError(ParseException e) {
        // inspired by ParseException.toString()
        Token errorToken = e.currentToken;
                if (e.currentToken.next != null) {
                        errorToken = e.currentToken.next;
        }

        int beginLine = 1;
        int beginColumn = 1;
        int endLine = 1;
        int endColumn = 2;
        String errorMessage = "Unrecoverable syntax error(s) occured";
        if (errorToken != null) {
                        beginLine = errorToken.beginLine;
                        beginColumn = errorToken.beginColumn;
                        endLine = errorToken.endLine;
                        endColumn = errorToken.endColumn;
                        errorMessage = "Syntax error on token '" + errorToken.image + "'";
        }

        error(beginLine,beginColumn,endLine,endColumn,errorMessage);
    }

        // checks if LHS is a valid variable for assignment
        // NOTE: variable intializers are not handled as assignments but as an expression!
        //       that is why there is no JJTVARIABLEDECLARATION in thwe switch below      
    private boolean checkAssignmentTarget(SimpleNode lhs) {
                switch (lhs.getId()) {
                case TransformLangParserTreeConstants.JJTIDENTIFIER:
                case TransformLangParserTreeConstants.JJTFIELDACCESSEXPRESSION:
                case TransformLangParserTreeConstants.JJTDICTIONARYNODE:
                        // identifier and field are valid LHS of assignment
                        return true;
                case TransformLangParserTreeConstants.JJTARRAYACCESSEXPRESSION:
                        SimpleNode child = (SimpleNode) lhs.jjtGetChild(0);
                        if (child.getId() == TransformLangParserTreeConstants.JJTFUNCTIONCALL) {
                                return true; // return type should be list or map, will be checked later
                        }
                        // for array access, the 'array' must be a valid target (i.e. identifier)
                        return checkAssignmentTarget(child);
                case TransformLangParserTreeConstants.JJTMEMBERACCESSEXPRESSION:
                        // for member access, the source object must be a valid identifier (not a lookup, method..)
                        return checkAssignmentTarget((SimpleNode)lhs.jjtGetChild(0));
                }

                // anyhting else is not valid
                return false;
        }

/* 
 *  The start nonterminal and its productions. 
 *  Nonterminal & productions for transformation language
 */
  final public CLVFStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                if (!isImported)
                {
                        // create global scope
                        jjtn000.setScope(enteredBlock());
                } else
                {
                        // for the imported source file reuse current scope
                        jjtn000.setScope( parserHelper.getCurrentScope());
                }

                // check comments for execution mode indication
                jjtn000.setCompiled(isCompiledMode(jj_nt));
      try {
        CompilationUnit();
      } catch (EndOfFileException e) {

      } catch (UnterminatedStringException e) {
                error(e.beginLine,e.beginColumn,e.endLine,e.endColumn,"Unterminated string literal encountered");
      } catch (ParseException e) {
                error(e.currentToken, "Syntax error");
      } catch (EscapeCharacterException e) {
                error(e.getLine(), e.getColumn()-1, e.getLine(), e.getColumn(), e.getMessage());
      } catch (Exception e) {
                error(1,1,1,2,"Parser error: " + e.getMessage());
                e.printStackTrace();
      } catch (TokenMgrError e) {
                error(1,1,1,2,"Invalid lexical token encountered: " + e.getMessage());
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (!isImported)
                {
                        exitedBlock();
                }
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/* 
 *  The start expression nonterminal and its productions. 
 *  Nonterminal & productions for expressions only
 */
  final public CLVFStartExpression StartExpression() throws ParseException {
                                         /*@bgen(jjtree) StartExpression */
  CLVFStartExpression jjtn000 = new CLVFStartExpression(this, JJTSTARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                jjtn000.setScope(enteredBlock());
                // check the comment (if any) and set the compilation mode
                jjtn000.setCompiled(isCompiledMode(jj_nt));
      try {
        ConditionalFailExpression();
      } catch (EndOfFileException e) {

      } catch (ParseException e) {
                error(1,1,1,2, "Syntax error");
      } catch (EscapeCharacterException e) {
                error(e.getLine(), e.getColumn()-1, e.getLine(), e.getColumn(), e.getMessage());
      } catch (Exception e) {
                error(1,1,1,2,"Parser error: " + e.getMessage());
                e.printStackTrace();
      } catch (TokenMgrError e) {
                error(1,1,1,2,"Invalid lexical token encountered: " + e.getMessage());
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                exitedBlock();
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CompilationUnit() throws ParseException {
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ImportSource();
      jj_consume_token(SEMICOLON);
    }
    try {
      label_2:
      while (true) {
        ;
        if (jj_2_1(3)) {
          Statement();
        } else {
          switch (jj_nt.kind) {
          case INT_VAR:
          case LONG_VAR:
          case DATE_VAR:
          case DOUBLE_VAR:
          case DECIMAL_VAR:
          case BOOLEAN_VAR:
          case STRING_VAR:
          case BYTE_VAR:
          case LIST_VAR:
          case MAP_VAR:
          case RECORD_VAR:
          case IDENTIFIER:
            VariableDeclaration();
            jj_consume_token(SEMICOLON);
            break;
          case FUNCTION:
            FunctionDeclaration();
            break;
          default:
            jj_la1[1] = jj_gen;
            unknownToken();
          }
        }
      }
    } catch (ParseException e) {
                recover(SEMICOLON); // this handles problems in variable initializers

    }
  }

  final public void StatementOrBlock() throws ParseException {
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case DATE_LITERAL:
    case DATETIME_LITERAL:
    case NULL_LITERAL:
    case ISNULL:
    case NVL:
    case NVL2:
    case IIF:
    case IN:
    case PRINT_ERR:
    case PRINT_LOG:
    case PRINT_STACK:
    case RAISE_ERROR:
    case STRING_PLAIN_LITERAL:
    case NOT:
    case MINUS:
    case INCR:
    case DECR:
    case SEMICOLON:
    case OPEN_PAR:
    case BREAK:
    case CONTINUE:
    case FOR:
    case FOR_EACH:
    case IF:
    case RETURN:
    case WHILE:
    case SWITCH:
    case DO:
    case LOOKUP:
    case LOOKUP_NEXT:
    case LOOKUP_FOUND:
    case LOOKUP_ADMIN:
    case SEQUENCE:
    case DICTIONARY:
    case FIELD_ACCESS_OPERATOR:
    case IDENTIFIER:
    case 136:
      Statement();
                SimpleNode blockStatement = (SimpleNode)jjtree.popNode();
                CLVFBlock fakeBlock = new CLVFBlock(this,JJTBLOCK);
                fakeBlock.jjtSetParent(blockStatement.jjtGetParent());
                fakeBlock.jjtAddChild(blockStatement,0);
                fakeBlock.begin(blockStatement.getLine(),blockStatement.getColumn());
                fakeBlock.end(blockStatement.getEnd().getLine(),blockStatement.getEnd().getColumn());
                blockStatement.jjtSetParent(fakeBlock);
                jjtree.pushNode(fakeBlock);
      break;
    case BLOCK_START:
      Block();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ImportSource() throws ParseException {
 /*@bgen(jjtree) ImportSource */
        CLVFImportSource jjtn000 = new CLVFImportSource(this, JJTIMPORTSOURCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String filenameURL;
    try {
      jj_consume_token(IMPORT);
                jjtn000.begin(token.beginLine,token.beginColumn);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                     filenameURL=unquote(t.image);
        break;
      case STRING_PLAIN_LITERAL:
        t = jj_consume_token(STRING_PLAIN_LITERAL);
                                           filenameURL=t.image;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
            if (graph != null && graph.getPropertyRefResolver() != null) {
              filenameURL = graph.getPropertyRefResolver().resolveRef(filenameURL, RefResFlag.URL);
            }
                // tag end of import
                jjtn000.end(t.endLine,t.endColumn);

                // to prevent parsing of an existing import
                if (!isParsedImport(filenameURL)) {
                        Reader input;

                        // we need to resolve the filename to project path (if it is relative)
                        final URL projectURL = graph != null ? graph.getRuntimeContext().getContextURL() : null;

                        jjtn000.setSourceToImport(filenameURL);
                        CLVFStart parseTree = null;

                // store current "import context" so we can restore it after parsing this import
                String importFileUrl = problemReporter.getImportFileUrl();
                ErrorLocation errorLocation = problemReporter.getErrorLocation();

                        try {
                                String importSourceCode = null;
                                try {
                                        importSourceCode = FileUtils.getStringFromURL(projectURL, filenameURL, encoding);
                                } catch (RuntimeException re) { // CLO-2167
                                        if (re.getCause() instanceof IOException) {
                                            {if (true) throw (IOException) re.getCause();}
                                        } else {
                                                {if (true) throw new IOException(re.getMessage());}
                                        }
                                } catch (Exception e) {
                                        {if (true) throw new IOException(e.getMessage());}
                                }
                                if (propertyRefResolver != null) {
                                        importSourceCode = propertyRefResolver.resolveRef(importSourceCode, RefResFlag.SPEC_CHARACTERS_OFF);
                                }

                                input = new StringReader(importSourceCode);
                                addParsedImport(filenameURL); // the above will handle invalid URL etc.
                // set new "import context", propagate error location if already defined
                        problemReporter.setImportFileUrl(filenameURL);
                        problemReporter.setErrorLocation((errorLocation != null)
                                        ? errorLocation : new ErrorLocation(jjtn000.getBegin(), jjtn000.getEnd()));

                                TransformLangParser parser = new TransformLangParser(this,filenameURL,input);

                                parser.addParsedImports(getParsedImports());
                                parseTree = parser.Start();
                                String sourceId = SandboxUrlUtils.escapeUrlPath(FileUtils.getFileURL(projectURL, filenameURL).toString());
                                jjtn000.setSourceId(sourceId);
                                jjtn000.setSourceFilename(filenameURL);
                                jjtn000.jjtAddChild(parseTree,0);
                                jjtn000.jjtGetChild(0).jjtSetParent(jjtn000);
                                addParsedImports(parser.getParsedImports()); // merge child's imports
                                this.hasEvalNode = this.hasEvalNode || parser.hasEvalNode;
                        } catch(IOException e){
                                error(jjtn000,"Unable to open import \u005c""+filenameURL+"\u005c": " + e.getMessage());
                        } finally {
                        // restore current "import context"
                        problemReporter.setImportFileUrl(importFileUrl);
                        problemReporter.setErrorLocation(errorLocation);
                        }
                } else {
                        warn(jjtn000, "Multiple import of \u005c""+filenameURL+"\u005c": ignoring redundant occurrences", "Try to remove multiple occurrences of import of the same file");
                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionDeclaration() throws ParseException {
    if (jj_2_2(3)) {
      V1FunctionDeclaration();
                        SimpleNode n = (SimpleNode)jjtree.peekNode();
                        error(n,"Obsolete function declaration",
                        "Use 'function <ReturnType> functionName(<ParamType> param,...)' instead");
    } else {
      switch (jj_nt.kind) {
      case FUNCTION:
        V2FunctionDeclaration();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void V2FormalParameters() throws ParseException {
 /*@bgen(jjtree) Parameters */
  CLVFParameters jjtn000 = new CLVFParameters(this, JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_PAR);
                jjtn000.begin(token.beginLine,token.beginColumn);
      switch (jj_nt.kind) {
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case IDENTIFIER:
        V2FormalParameter();
        label_3:
        while (true) {
          switch (jj_nt.kind) {
          case 135:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(135);
          V2FormalParameter();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.end(token.endLine,token.endColumn);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ReturnType() throws ParseException {
    switch (jj_nt.kind) {
    case INT_VAR:
    case LONG_VAR:
    case DATE_VAR:
    case DOUBLE_VAR:
    case DECIMAL_VAR:
    case BOOLEAN_VAR:
    case STRING_VAR:
    case BYTE_VAR:
    case LIST_VAR:
    case MAP_VAR:
    case RECORD_VAR:
    case IDENTIFIER:
      VariableType();
      break;
    case VOID_VAR:
      VoidType();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VoidType() throws ParseException {
 /*@bgen(jjtree) Type */
  CLVFType jjtn000 = new CLVFType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID_VAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setKind(VOID_VAR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void V2FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
  CLVFFunctionDeclaration jjtn000 = new CLVFFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                jjtn000.setGenerated(isGenerated(jj_nt));
      jj_consume_token(FUNCTION);
                jjtn000.begin(token.beginLine,token.beginColumn);
      ReturnType();
      jj_consume_token(IDENTIFIER);
                jjtn000.setName(token.image);
                // function scope is allocated and saved within ParserHelper.enterBlock(CLVFFunctionDeclaration)
                enteredBlock(jjtn000);
      V2FormalParameters();
      Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                exitedBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* Function parameters in the old version are not typed */
  final public void V1FormalParameter() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  CLVFVariableDeclaration jjtn000 = new CLVFVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                // push fake type node	
                CLVFType type = new CLVFType(this,JJTTYPE);
                type.setType(TLType.VOID);
                jjtree.pushNode(type);
      jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setName(token.image);
                addVariable(jjtn000);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void V1FormalParameters() throws ParseException {
 /*@bgen(jjtree) Parameters */
        CLVFParameters jjtn000 = new CLVFParameters(this, JJTPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(OPEN_PAR);
                jjtn000.begin(token.beginLine,token.beginColumn);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        V1FormalParameter();
        label_4:
        while (true) {
          switch (jj_nt.kind) {
          case 135:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_4;
          }
          jj_consume_token(135);
          V1FormalParameter();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.end(token.endLine, token.endColumn);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void V1FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
  CLVFFunctionDeclaration jjtn000 = new CLVFFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
                jjtn000.begin(token.beginLine,token.beginColumn);
                // push fake type node
                // TODO: try to extract type from return statement in type-checking phase
                CLVFType type = new CLVFType(this,JJTTYPE);
                type.setType(TLType.VOID);
                jjtree.pushNode(type);
      jj_consume_token(IDENTIFIER);
                jjtn000.setName(token.image);
                enteredBlock(jjtn000);
      V1FormalParameters();
      Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                exitedBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void V2FormalParameter() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  CLVFVariableDeclaration jjtn000 = new CLVFVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableType();
      jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.setName(token.image);
                jjtn000.end(token.endLine,token.endColumn);
                addVariable(jjtn000);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) Type */
  CLVFType jjtn000 = new CLVFType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INT_VAR:
        jj_consume_token(INT_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(INT_VAR);
        break;
      case LONG_VAR:
        jj_consume_token(LONG_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(LONG_VAR);
        break;
      case DOUBLE_VAR:
        jj_consume_token(DOUBLE_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(DOUBLE_VAR);
        break;
      case DECIMAL_VAR:
        jj_consume_token(DECIMAL_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(DECIMAL_VAR);
        break;
      case STRING_VAR:
        jj_consume_token(STRING_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(STRING_VAR);
        break;
      case DATE_VAR:
        jj_consume_token(DATE_VAR);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(DATE_VAR);
        break;
      case BYTE_VAR:
        jj_consume_token(BYTE_VAR);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(BYTE_VAR);
        break;
      case BOOLEAN_VAR:
        jj_consume_token(BOOLEAN_VAR);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        jjtn000.setKind(BOOLEAN_VAR);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void CompositeType() throws ParseException {
 /*@bgen(jjtree) Type */
        CLVFType jjtn000 = new CLVFType(this, JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t, name;
    try {
      switch (jj_nt.kind) {
      case MAP_VAR:
        jj_consume_token(MAP_VAR);
        jj_consume_token(136);
        PrimitiveType();
        jj_consume_token(135);
        switch (jj_nt.kind) {
        case INT_VAR:
        case LONG_VAR:
        case DATE_VAR:
        case DOUBLE_VAR:
        case DECIMAL_VAR:
        case BOOLEAN_VAR:
        case STRING_VAR:
        case BYTE_VAR:
          PrimitiveType();
          break;
        case LIST_VAR:
        case MAP_VAR:
        case RECORD_VAR:
        case IDENTIFIER:
          CompositeType();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(137);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setKind(MAP_VAR);
        break;
      case RECORD_VAR:
        //obsolete syntax
                   t = jj_consume_token(RECORD_VAR);
        jj_consume_token(OPEN_PAR);
        name = jj_consume_token(IDENTIFIER);
        jj_consume_token(CLOSE_PAR);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
                 jjtn000.begin(t.beginLine,t.beginColumn);
                 jjtn000.end(token.endLine,token.endColumn);
                 error(jjtn000,"Obsolete variable declaration'","Use '<MetadataName> identifier;' instead");
                 jjtn000.setKind(IDENTIFIER);
                 jjtn000.setMetadataName(name.image);
        break;
      case LIST_VAR:
        jj_consume_token(LIST_VAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
                        error(jjtn000,"Obsolete list declaration","Use '<Type>[]' instead");
                        jjtn000.setKind(LIST_VAR);
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.begin(token.beginLine,token.beginColumn);
                 jjtn000.end(token.endLine,token.endColumn);
                 jjtn000.setKind(IDENTIFIER);
                 jjtn000.setMetadataName(token.image);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void VariableType() throws ParseException {
 /*@bgen(jjtree) #Type( isList) */
        CLVFType jjtn000 = new CLVFType(this, JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isList = false;
    try {
      if (jj_2_3(2)) {
        CompositeType();
        switch (jj_nt.kind) {
        case 136:
          jj_consume_token(136);
          jj_consume_token(137);
                        isList = true;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setKind(LIST_VAR);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case INT_VAR:
        case LONG_VAR:
        case DATE_VAR:
        case DOUBLE_VAR:
        case DECIMAL_VAR:
        case BOOLEAN_VAR:
        case STRING_VAR:
        case BYTE_VAR:
          PrimitiveType();
          switch (jj_nt.kind) {
          case 136:
            jj_consume_token(136);
            jj_consume_token(137);
                        isList = true;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setKind(LIST_VAR);
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  isList);
          }
    }
  }

  final public void VariableDeclaration() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  CLVFVariableDeclaration jjtn000 = new CLVFVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableType();
        SimpleNode n = (SimpleNode)jjtree.peekNode();
        jjtn000.begin(n.getLine(),n.getColumn());
      jj_consume_token(IDENTIFIER);
        jjtn000.setName(token.image);
        jjtn000.end(token.endLine,token.endColumn);
      switch (jj_nt.kind) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        Expression();
                SimpleNode expr = (SimpleNode)jjtree.peekNode();
                jjtn000.end(expr.getEnd().getLine(),expr.getEnd().getColumn());
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                // having the variable registration after initializer fixes the errorneous: int a = a;
                addVariable(jjtn000);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// Formal root of expressions, delegates to AssignmentExpression
  final public void Expression() throws ParseException {
    AssignmentExpression();
  }

  final public void AssignmentOp(CLVFAssignment assignment) throws ParseException {
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case MAPPING:
      jj_consume_token(MAPPING);
                warn(token,"Operator ':=' is obsolete","Use '=' operator instead");
      break;
    case ASSIGN_PLUS:
      jj_consume_token(ASSIGN_PLUS);
      break;
    case ASSIGN_MINUS:
      jj_consume_token(ASSIGN_MINUS);
      break;
    case ASSIGN_MULTIPLY:
      jj_consume_token(ASSIGN_MULTIPLY);
      break;
    case ASSIGN_DIVIDE:
      jj_consume_token(ASSIGN_DIVIDE);
      break;
    case ASSIGN_MODULO:
      jj_consume_token(ASSIGN_MODULO);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    assignment.setOperator(token.kind);
  }

 // Cascades of assignment allowed: x=y=z=3. Achieved by recursion inside  [...]  final public void AssignmentExpression() throws ParseException {
 /*@bgen(jjtree) #Assignment(> 1) */
  CLVFAssignment jjtn000 = new CLVFAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalFailExpression();
      switch (jj_nt.kind) {
      case ASSIGN:
      case MAPPING:
      case ASSIGN_PLUS:
      case ASSIGN_MINUS:
      case ASSIGN_MULTIPLY:
      case ASSIGN_DIVIDE:
      case ASSIGN_MODULO:
        AssignmentOp(jjtn000);
                // We check if the LHS is a variable reference
                // The check can't be done immediately after ConditionalFailExpression()
                // because of the recursive call to AssignmentExpression() below
                final SimpleNode result = (SimpleNode)jjtree.peekNode();
                if (! checkAssignmentTarget(result)) {
                        error(result,"The left hand side of assignment must be a variable");
                }
        AssignmentExpression();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
    }
  }

  final public void ConditionalFailExpression() throws ParseException {
    ConditionalExpression();
    label_5:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COLON);
                                                      CLVFConditionalFailExpression jjtn001 = new CLVFConditionalFailExpression(this, JJTCONDITIONALFAILEXPRESSION);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
      try {
        ConditionalExpression();
      } catch (Throwable jjte001) {
                                                      if (jjtc001) {
                                                        jjtree.clearNodeScope(jjtn001);
                                                        jjtc001 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte001 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte001;}
                                                      }
                                                      if (jjte001 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte001;}
                                                      }
                                                      {if (true) throw (Error)jjte001;}
      } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
      }
    }
  }

  final public void ConditionalExpression() throws ParseException {
 /*@bgen(jjtree) #ConditionalExpression(> 2) */
  CLVFConditionalExpression jjtn000 = new CLVFConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      if (jj_2_5(2)) {
        jj_consume_token(QUESTION_MARK);
        ConditionalExpression();
        jj_consume_token(COLON);
        ConditionalExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 2);
          }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case OR:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_7:
    while (true) {
      switch (jj_nt.kind) {
      case AND:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_8:
    while (true) {
      switch (jj_nt.kind) {
      case EQUAL:
      case NON_EQUAL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      switch (jj_nt.kind) {
      case EQUAL:
        jj_consume_token(EQUAL);
        RelationalExpression();
                                      CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                      jjtn001.setOperator(EQUAL);
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
        }
        break;
      case NON_EQUAL:
        jj_consume_token(NON_EQUAL);
        RelationalExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtn002.setOperator(NON_EQUAL);
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_9:
    while (true) {
      switch (jj_nt.kind) {
      case LESS_THAN:
      case LESS_THAN_EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_EQUAL:
      case REGEX_EQUAL:
      case REGEX_CONTAINS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      switch (jj_nt.kind) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        AdditiveExpression();
                                       CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
        try {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                       jjtn001.setOperator(LESS_THAN);
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
        }
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        AdditiveExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtn002.setOperator(GREATER_THAN);
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
        }
        break;
      case LESS_THAN_EQUAL:
        jj_consume_token(LESS_THAN_EQUAL);
        AdditiveExpression();
                                             CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
        try {
                                             jjtree.closeNodeScope(jjtn003,  2);
                                             jjtc003 = false;
                                             jjtn003.setOperator(LESS_THAN_EQUAL);
        } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                             }
        }
        break;
      case GREATER_THAN_EQUAL:
        jj_consume_token(GREATER_THAN_EQUAL);
        AdditiveExpression();
                                                CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
        try {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                                jjtc004 = false;
                                                jjtn004.setOperator(GREATER_THAN_EQUAL);
        } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                }
        }
        break;
      case REGEX_EQUAL:
        jj_consume_token(REGEX_EQUAL);
        AdditiveExpression();
                                              CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                              boolean jjtc005 = true;
                                              jjtree.openNodeScope(jjtn005);
        try {
                                              jjtree.closeNodeScope(jjtn005,  2);
                                              jjtc005 = false;
                                              jjtn005.setOperator(REGEX_EQUAL);
        } finally {
                                              if (jjtc005) {
                                                jjtree.closeNodeScope(jjtn005,  2);
                                              }
        }
        break;
      case REGEX_CONTAINS:
        jj_consume_token(REGEX_CONTAINS);
        AdditiveExpression();
                                            CLVFComparison jjtn006 = new CLVFComparison(this, JJTCOMPARISON);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
        try {
                                            jjtree.closeNodeScope(jjtn006,  2);
                                            jjtc006 = false;
                                            jjtn006.setOperator(REGEX_CONTAINS);
        } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006,  2);
                                            }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_10:
    while (true) {
      switch (jj_nt.kind) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
              CLVFAddNode jjtn001 = new CLVFAddNode(this, JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
               CLVFSubNode jjtn002 = new CLVFSubNode(this, JJTSUBNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      switch (jj_nt.kind) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                 CLVFMulNode jjtn001 = new CLVFMulNode(this, JJTMULNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
               CLVFDivNode jjtn002 = new CLVFDivNode(this, JJTDIVNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
        }
        break;
      case MODULO:
        jj_consume_token(MODULO);
               CLVFModNode jjtn003 = new CLVFModNode(this, JJTMODNODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case LONG_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case DATE_LITERAL:
    case DATETIME_LITERAL:
    case NULL_LITERAL:
    case ISNULL:
    case NVL:
    case NVL2:
    case IIF:
    case IN:
    case PRINT_ERR:
    case PRINT_LOG:
    case PRINT_STACK:
    case RAISE_ERROR:
    case STRING_PLAIN_LITERAL:
    case INCR:
    case DECR:
    case OPEN_PAR:
    case LOOKUP:
    case LOOKUP_NEXT:
    case LOOKUP_FOUND:
    case LOOKUP_ADMIN:
    case SEQUENCE:
    case DICTIONARY:
    case FIELD_ACCESS_OPERATOR:
    case IDENTIFIER:
    case 136:
      UnaryStatement();
      break;
    case NOT:
    case MINUS:
      UnaryNonStatement();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryStatement() throws ParseException {
 /*@bgen(jjtree) #UnaryStatement( isPrefix) */
        CLVFUnaryStatement jjtn000 = new CLVFUnaryStatement(this, JJTUNARYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isPrefix = false;
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        PostfixExpression();
        break;
      case INCR:
      case DECR:
                        // set the flag asap before jjtree has a chance to close node scope
                        isPrefix = true;
        PrefixStatementOp(jjtn000);
        UnaryExpression();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000,  isPrefix);
           }
    }
  }

  final public void PrefixStatementOp(CLVFUnaryStatement expr) throws ParseException {
    switch (jj_nt.kind) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr.begin(token.beginLine,token.beginColumn);
    expr.setOperator(token.kind);
  }

  final public void UnaryNonStatement() throws ParseException {
 /*@bgen(jjtree) #UnaryNonStatement(true) */
  CLVFUnaryNonStatement jjtn000 = new CLVFUnaryNonStatement(this, JJTUNARYNONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrefixNonStatementOp(jjtn000);
      UnaryExpression();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void PrefixNonStatementOp(CLVFUnaryNonStatement expr) throws ParseException {
    switch (jj_nt.kind) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr.begin(token.beginLine,token.beginColumn);
    expr.setOperator(token.kind);
  }

  final public void PostfixExpression() throws ParseException {
 /*@bgen(jjtree) #PostfixExpression( isPostfix) */
        CLVFPostfixExpression jjtn000 = new CLVFPostfixExpression(this, JJTPOSTFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isPostfix = false;
    try {
      PrimaryExpression();
      switch (jj_nt.kind) {
      case INCR:
      case DECR:
                        // set the flag asap before jjtree has a chance to close node scope
                        isPostfix = true;
        PostfixOp(jjtn000);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  isPostfix);
          }
    }
  }

  final public void PostfixOp(CLVFPostfixExpression expr) throws ParseException {
    switch (jj_nt.kind) {
    case INCR:
      jj_consume_token(INCR);
      break;
    case DECR:
      jj_consume_token(DECR);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expr.setOperator(token.kind);
    expr.end(token.endLine,token.endColumn);
  }

  final public void PrimaryExpression() throws ParseException {
        Object id;
        Token t;
        Node prefix;
    if (jj_2_6(7)) {
      GeneralFunctionCall();
    } else {
      switch (jj_nt.kind) {
      case IDENTIFIER:
        Identifier();
        break;
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case STRING_PLAIN_LITERAL:
      case 136:
        Literal();
        break;
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
        LookupNode();
        break;
      case SEQUENCE:
        SequenceNode();
        break;
      case DICTIONARY:
        DictionaryNode();
        break;
      case OPEN_PAR:
        jj_consume_token(OPEN_PAR);
        Expression();
        jj_consume_token(CLOSE_PAR);
        break;
      case FIELD_ACCESS_OPERATOR:
        RecordOrFieldIdentifier();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_12:
    while (true) {
      switch (jj_nt.kind) {
      case DOT:
      case DICT_SEPARATOR:
      case 136:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_12;
      }
                  prefix = jjtree.popNode();
      PrimarySuffix(prefix);
    }
  }

  final public void PrimarySuffix(Node prefix) throws ParseException {
        Token t;
        Node memAcc = null;
    switch (jj_nt.kind) {
    case DICT_SEPARATOR:
      // CLO-6866: special lexical tokens just for the dictionary
                      t = jj_consume_token(DICT_SEPARATOR);
      jj_consume_token(DICT_IDENTIFIER);
                     CLVFMemberAccessExpression jjtn001 = new CLVFMemberAccessExpression(this, JJTMEMBERACCESSEXPRESSION);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                         jjtn001.begin(t.beginLine,t.beginColumn);
                         jjtn001.end(token.endLine,token.endColumn);
                         jjtn001.setName(token.image);
                         jjtn001.setWildcard(false);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
      }
                         // push the prefix as LHS of the member access selector
                         memAcc = jjtree.peekNode();
                         memAcc.jjtAddChild(prefix,0);
                         memAcc.jjtSetParent(prefix.jjtGetParent());
                         prefix.jjtSetParent(memAcc);
      break;
    case DOT:
      t = jj_consume_token(DOT);
      if (jj_2_7(2)) {
        FunctionCall(prefix);
      } else {
        switch (jj_nt.kind) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
                     CLVFMemberAccessExpression jjtn002 = new CLVFMemberAccessExpression(this, JJTMEMBERACCESSEXPRESSION);
                     boolean jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
          try {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                         jjtn002.begin(t.beginLine,t.beginColumn);
                         jjtn002.end(token.endLine,token.endColumn);
                         jjtn002.setName(token.image);
                         jjtn002.setWildcard(false);
          } finally {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002, true);
                     }
          }
                         // push the prefix as LHS of the member access selector
                         memAcc = jjtree.peekNode();
                         memAcc.jjtAddChild(prefix,0);
                         memAcc.jjtSetParent(prefix.jjtGetParent());
                         prefix.jjtSetParent(memAcc);
          break;
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
                     CLVFMemberAccessExpression jjtn003 = new CLVFMemberAccessExpression(this, JJTMEMBERACCESSEXPRESSION);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
          try {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                         jjtn003.begin(t.beginLine,t.beginColumn);
                         jjtn003.end(token.endLine,token.endColumn);
                         jjtn003.setName(token.image);
                         jjtn003.setWildcard(true);
          } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
          }
                         // push the prefix as LHS of the member access selector
                         memAcc = jjtree.peekNode();
                         memAcc.jjtAddChild(prefix,0);
                         memAcc.jjtSetParent(prefix.jjtGetParent());
                         prefix.jjtSetParent(memAcc);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case 136:
                                jjtree.pushNode(prefix);
      t = jj_consume_token(136);
      ConditionalFailExpression();
      jj_consume_token(137);
                          CLVFArrayAccessExpression jjtn004 = new CLVFArrayAccessExpression(this, JJTARRAYACCESSEXPRESSION);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
      try {
                          jjtree.closeNodeScope(jjtn004,  2);
                          jjtc004 = false;
                                jjtn004.begin(t.beginLine,t.beginColumn);
                                jjtn004.end(token.beginLine,token.beginColumn);
      } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void GeneralFunctionCall() throws ParseException {
        Token id;
    switch (jj_nt.kind) {
    case ISNULL:
    case NVL:
    case NVL2:
    case IIF:
    case PRINT_ERR:
    case PRINT_LOG:
    case PRINT_STACK:
    case RAISE_ERROR:
      BuiltInFunctionCall();
      break;
    case IN:
    case IDENTIFIER:
      FunctionCall(null);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionCall(Node zeroArgument) throws ParseException {
        Token t;
    switch (jj_nt.kind) {
    case IN:
      t = jj_consume_token(IN);
      Arguments(zeroArgument);
                  CLVFInFunction jjtn001 = new CLVFInFunction(this, JJTINFUNCTION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                  jjtree.closeNodeScope(jjtn001,  1);
                  jjtc001 = false;
                        jjtn001.begin(t.beginLine,t.beginColumn);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  1);
                  }
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      Arguments(zeroArgument);
                  CLVFFunctionCall jjtn002 = new CLVFFunctionCall(this, JJTFUNCTIONCALL);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
      try {
                  jjtree.closeNodeScope(jjtn002,  1);
                  jjtc002 = false;
                        jjtn002.begin(t.beginLine,t.beginColumn);
                        jjtn002.setName(t.image);
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  1);
                  }
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BuiltInFunctionCall() throws ParseException {
        Token t;
    switch (jj_nt.kind) {
    case ISNULL:
      t = jj_consume_token(ISNULL);
      Arguments(null);
                                            CLVFIsNullNode jjtn001 = new CLVFIsNullNode(this, JJTISNULLNODE);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
      try {
                                            jjtree.closeNodeScope(jjtn001,  1);
                                            jjtc001 = false;
                                            jjtn001.begin(t.beginLine,t.beginColumn);
      } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001,  1);
                                            }
      }
      break;
    case NVL:
      t = jj_consume_token(NVL);
      Arguments(null);
                                          CLVFNVLNode jjtn002 = new CLVFNVLNode(this, JJTNVLNODE);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
      try {
                                          jjtree.closeNodeScope(jjtn002,  1);
                                          jjtc002 = false;
                                          jjtn002.begin(t.beginLine,t.beginColumn);
      } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  1);
                                          }
      }
      break;
    case NVL2:
      t = jj_consume_token(NVL2);
      Arguments(null);
                                          CLVFNVL2Node jjtn003 = new CLVFNVL2Node(this, JJTNVL2NODE);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
      try {
                                          jjtree.closeNodeScope(jjtn003,  1);
                                          jjtc003 = false;
                                          jjtn003.begin(t.beginLine,t.beginColumn);
      } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003,  1);
                                          }
      }
      break;
    case IIF:
      t = jj_consume_token(IIF);
      Arguments(null);
                                         CLVFIIfNode jjtn004 = new CLVFIIfNode(this, JJTIIFNODE);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
      try {
                                         jjtree.closeNodeScope(jjtn004,  1);
                                         jjtc004 = false;
                                         jjtn004.begin(t.beginLine,t.beginColumn);
      } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  1);
                                         }
      }
      break;
    case PRINT_ERR:
      t = jj_consume_token(PRINT_ERR);
      Arguments(null);
                                               CLVFPrintErrNode jjtn005 = new CLVFPrintErrNode(this, JJTPRINTERRNODE);
                                               boolean jjtc005 = true;
                                               jjtree.openNodeScope(jjtn005);
      try {
                                               jjtree.closeNodeScope(jjtn005,  1);
                                               jjtc005 = false;
                                               jjtn005.begin(t.beginLine,t.beginColumn);
      } finally {
                                               if (jjtc005) {
                                                 jjtree.closeNodeScope(jjtn005,  1);
                                               }
      }
      break;
    case PRINT_LOG:
      t = jj_consume_token(PRINT_LOG);
      Arguments(null);
                                               CLVFPrintLogNode jjtn006 = new CLVFPrintLogNode(this, JJTPRINTLOGNODE);
                                               boolean jjtc006 = true;
                                               jjtree.openNodeScope(jjtn006);
      try {
                                               jjtree.closeNodeScope(jjtn006,  1);
                                               jjtc006 = false;
                                               jjtn006.begin(t.beginLine,t.beginColumn);
      } finally {
                                               if (jjtc006) {
                                                 jjtree.closeNodeScope(jjtn006,  1);
                                               }
      }
      break;
    case PRINT_STACK:
      t = jj_consume_token(PRINT_STACK);
      Arguments(null);
                                                 CLVFPrintStackNode jjtn007 = new CLVFPrintStackNode(this, JJTPRINTSTACKNODE);
                                                 boolean jjtc007 = true;
                                                 jjtree.openNodeScope(jjtn007);
      try {
                                                 jjtree.closeNodeScope(jjtn007,  1);
                                                 jjtc007 = false;
                                                 jjtn007.begin(t.beginLine,t.beginColumn);
      } finally {
                                                 if (jjtc007) {
                                                   jjtree.closeNodeScope(jjtn007,  1);
                                                 }
      }
      break;
    case RAISE_ERROR:
      t = jj_consume_token(RAISE_ERROR);
      Arguments(null);
                                                 CLVFRaiseErrorNode jjtn008 = new CLVFRaiseErrorNode(this, JJTRAISEERRORNODE);
                                                 boolean jjtc008 = true;
                                                 jjtree.openNodeScope(jjtn008);
      try {
                                                 jjtree.closeNodeScope(jjtn008,  1);
                                                 jjtc008 = false;
                                                 jjtn008.begin(t.beginLine,t.beginColumn);
      } finally {
                                                 if (jjtc008) {
                                                   jjtree.closeNodeScope(jjtn008,  1);
                                                 }
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
 * Unfortunately identifiers like $in.1 collide with float syntax allowing .1 syntax for 0.1
 * To parse this properly we would have to add lexical state switching for most of the tokens
 * because field identifier can be on RHS and shorthand $1 syntax is allowed
 */
  final public void RecordOrFieldIdentifier() throws ParseException {
 /*@bgen(jjtree) FieldAccessExpression */
  CLVFFieldAccessExpression jjtn000 = new CLVFFieldAccessExpression(this, JJTFIELDACCESSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FIELD_ACCESS_OPERATOR);
                // first read the field access operator
                // can be "$", "$in." or "$out."
                jjtn000.begin(token.beginLine,token.beginColumn);

                String fieldAccessImage = token.image;
                String discriminator = null;
                if (fieldAccessImage.equals("$in.")) {
                  discriminator = "in"; // an input port is required
                } else if (fieldAccessImage.equals("$out.")) {
                  discriminator = "out"; // an output port is required
                }
                // store the information from the field access operator
                jjtn000.setDiscriminator(discriminator);
      jj_consume_token(RECORD_ACCESS_FIRST_PART);
                // the first part may denote a record ID or a field ID (old syntax) 
                String firstPartImage = token.image;
            String secondPartImage = null;
      switch (jj_nt.kind) {
      case RECORD_ACCESS_SECOND_PART:
        jj_consume_token(RECORD_ACCESS_SECOND_PART);
            // optionally, there may be the second part of the field access expression
            secondPartImage = token.image.substring(1); // remove the '.' from the beginning

        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.end(token.endLine,token.endColumn);
                // let's presume this is not a wildcard access
                jjtn000.setWildcard(false);

                if (secondPartImage != null) {
                        try {
                                Integer recNum = Integer.parseInt(firstPartImage);
                                // set directly the position access 
                                jjtn000.setRecordId(recNum);
                        } catch (NumberFormatException e) {
                                jjtn000.setRecordName(firstPartImage);
                        }

                        if (secondPartImage.equals("*")) {
                                jjtn000.setWildcard(true);
                        } else {
                                try {
                                        Integer fieldNum = Integer.parseInt(secondPartImage);
                                        // set directly the position access
                                        jjtn000.setFieldId(fieldNum);
                                } catch (NumberFormatException e) {
                                        // set the field name
                                        jjtn000.setFieldName(secondPartImage);
                                }
                        }

                } else if (discriminator == null) {
                        // shortended syntax $1 or $fieldName -> treat as $0.1 or $0.fieldName
                        jjtn000.setRecordId(0);
                        try {
                                Integer fieldNum = Integer.parseInt(firstPartImage);
                                // set directly the position access
                                jjtn000.setFieldId(fieldNum);
                        } catch (NumberFormatException e) {
                                // set the field name
                                jjtn000.setFieldName(firstPartImage);
                        }
                } else {
                    // new syntax, $in.1 no longer means $0.1, but $1.* instead
                    jjtn000.setWildcard(true);
                        try {
                                Integer recNum = Integer.parseInt(firstPartImage);
                                // set directly the position access 
                                jjtn000.setRecordId(recNum);
                        } catch (NumberFormatException e) {
                                jjtn000.setRecordName(firstPartImage);
                        }
                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
        CLVFIdentifier jjtn000 = new CLVFIdentifier(this, JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);CLVFVariableDeclaration vd = null;
    try {
      jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setName(token.image);
                vd = checkDeclaration(token.image,token.beginLine,token.beginColumn,token.endLine,token.endColumn);
                if (vd != null) {
                        // declaration found, store reference and compute offset
                        jjtn000.setVariable(vd);
                        jjtn000.setBlockOffset(vd.getBlockOffset() == 0 ? -1 : getCurrentBlockOffset()-vd.getBlockOffset());
                        jjtn000.setVariableOffset(vd.getVariableOffset());
                }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Arguments(Node zeroArgument) throws ParseException {
 /*@bgen(jjtree) Arguments */
  CLVFArguments jjtn000 = new CLVFArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_PAR);
                jjtn000.begin(token.beginLine,token.beginColumn);
                if (zeroArgument != null) {
                        jjtree.pushNode(zeroArgument);
                }
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case LOGLEVEL_DEBUG:
      case LOGLEVEL_INFO:
      case LOGLEVEL_WARN:
      case LOGLEVEL_ERROR:
      case LOGLEVEL_FATAL:
      case LOGLEVEL_TRACE:
      case DICTIONARY:
      case YEAR:
      case MONTH:
      case WEEK:
      case DAY:
      case HOUR:
      case MINUTE:
      case SECOND:
      case MILLISEC:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case DATE_LITERAL:
        case DATETIME_LITERAL:
        case NULL_LITERAL:
        case ISNULL:
        case NVL:
        case NVL2:
        case IIF:
        case IN:
        case PRINT_ERR:
        case PRINT_LOG:
        case PRINT_STACK:
        case RAISE_ERROR:
        case STRING_PLAIN_LITERAL:
        case NOT:
        case MINUS:
        case INCR:
        case DECR:
        case OPEN_PAR:
        case LOOKUP:
        case LOOKUP_NEXT:
        case LOOKUP_FOUND:
        case LOOKUP_ADMIN:
        case SEQUENCE:
        case DICTIONARY:
        case FIELD_ACCESS_OPERATOR:
        case IDENTIFIER:
        case 136:
          ConditionalFailExpression();
          break;
        case INT_VAR:
        case LONG_VAR:
        case DATE_VAR:
        case DOUBLE_VAR:
        case DECIMAL_VAR:
        case BOOLEAN_VAR:
        case STRING_VAR:
        case BYTE_VAR:
        case LOGLEVEL_DEBUG:
        case LOGLEVEL_INFO:
        case LOGLEVEL_WARN:
        case LOGLEVEL_ERROR:
        case LOGLEVEL_FATAL:
        case LOGLEVEL_TRACE:
        case YEAR:
        case MONTH:
        case WEEK:
        case DAY:
        case HOUR:
        case MINUTE:
        case SECOND:
        case MILLISEC:
          TypeArgument();
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_13:
        while (true) {
          switch (jj_nt.kind) {
          case 135:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_13;
          }
          jj_consume_token(135);
          switch (jj_nt.kind) {
          case INTEGER_LITERAL:
          case LONG_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case BOOLEAN_LITERAL:
          case DATE_LITERAL:
          case DATETIME_LITERAL:
          case NULL_LITERAL:
          case ISNULL:
          case NVL:
          case NVL2:
          case IIF:
          case IN:
          case PRINT_ERR:
          case PRINT_LOG:
          case PRINT_STACK:
          case RAISE_ERROR:
          case STRING_PLAIN_LITERAL:
          case NOT:
          case MINUS:
          case INCR:
          case DECR:
          case OPEN_PAR:
          case LOOKUP:
          case LOOKUP_NEXT:
          case LOOKUP_FOUND:
          case LOOKUP_ADMIN:
          case SEQUENCE:
          case DICTIONARY:
          case FIELD_ACCESS_OPERATOR:
          case IDENTIFIER:
          case 136:
            ConditionalFailExpression();
            break;
          case INT_VAR:
          case LONG_VAR:
          case DATE_VAR:
          case DOUBLE_VAR:
          case DECIMAL_VAR:
          case BOOLEAN_VAR:
          case STRING_VAR:
          case BYTE_VAR:
          case LOGLEVEL_DEBUG:
          case LOGLEVEL_INFO:
          case LOGLEVEL_WARN:
          case LOGLEVEL_ERROR:
          case LOGLEVEL_FATAL:
          case LOGLEVEL_TRACE:
          case YEAR:
          case MONTH:
          case WEEK:
          case DAY:
          case HOUR:
          case MINUTE:
          case SECOND:
          case MILLISEC:
            TypeArgument();
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                jjtn000.end(token.endLine,token.endColumn);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeArgument() throws ParseException {
    switch (jj_nt.kind) {
    case INT_VAR:
    case LONG_VAR:
    case DATE_VAR:
    case DOUBLE_VAR:
    case DECIMAL_VAR:
    case BOOLEAN_VAR:
    case STRING_VAR:
    case BYTE_VAR:
      PrimitiveType();
      break;
    case YEAR:
    case MONTH:
    case WEEK:
    case DAY:
    case HOUR:
    case MINUTE:
    case SECOND:
    case MILLISEC:
      DateField();
      break;
    case LOGLEVEL_DEBUG:
    case LOGLEVEL_INFO:
    case LOGLEVEL_WARN:
    case LOGLEVEL_ERROR:
    case LOGLEVEL_FATAL:
    case LOGLEVEL_TRACE:
      LogLevel();
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DateField() throws ParseException {
 /*@bgen(jjtree) DateField */
  CLVFDateField jjtn000 = new CLVFDateField(this, JJTDATEFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case YEAR:
        jj_consume_token(YEAR);
        break;
      case MONTH:
        jj_consume_token(MONTH);
        break;
      case WEEK:
        jj_consume_token(WEEK);
        break;
      case DAY:
        jj_consume_token(DAY);
        break;
      case HOUR:
        jj_consume_token(HOUR);
        break;
      case MINUTE:
        jj_consume_token(MINUTE);
        break;
      case SECOND:
        jj_consume_token(SECOND);
        break;
      case MILLISEC:
        jj_consume_token(MILLISEC);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setFieldType(token.kind);
                jjtn000.setType(TLType.createTypeSymbol(token.kind));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogLevel() throws ParseException {
 /*@bgen(jjtree) LogLevel */
  CLVFLogLevel jjtn000 = new CLVFLogLevel(this, JJTLOGLEVEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case LOGLEVEL_DEBUG:
        jj_consume_token(LOGLEVEL_DEBUG);
        break;
      case LOGLEVEL_INFO:
        jj_consume_token(LOGLEVEL_INFO);
        break;
      case LOGLEVEL_WARN:
        jj_consume_token(LOGLEVEL_WARN);
        break;
      case LOGLEVEL_ERROR:
        jj_consume_token(LOGLEVEL_ERROR);
        break;
      case LOGLEVEL_FATAL:
        jj_consume_token(LOGLEVEL_FATAL);
        break;
      case LOGLEVEL_TRACE:
        jj_consume_token(LOGLEVEL_TRACE);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
                jjtn000.setLogLevel(token.kind);
                jjtn000.setType(TLType.createTypeSymbol(token.kind));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Literal() throws ParseException {
        Token t;
        SimpleNode s;
    switch (jj_nt.kind) {
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                  CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                        jjtn001.begin(t.beginLine,t.beginColumn);
                        jjtn001.end(t.endLine,t.endColumn);
                        jjtn001.setValue(FLOATING_POINT_LITERAL,t.image);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      break;
    case LONG_LITERAL:
      t = jj_consume_token(LONG_LITERAL);
                  CLVFLiteral jjtn002 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
      try {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                        jjtn002.begin(t.beginLine,t.beginColumn);
                        jjtn002.end(t.endLine,t.endColumn);
                        jjtn002.setValue(LONG_LITERAL,t.image);
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
      }
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                  CLVFLiteral jjtn003 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
      try {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
                        jjtn003.begin(t.beginLine,t.beginColumn);
                        jjtn003.end(t.endLine,t.endColumn);
                        jjtn003.setValue(INTEGER_LITERAL,t.image);
      } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                  CLVFLiteral jjtn004 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc004 = true;
                  jjtree.openNodeScope(jjtn004);
      try {
                  jjtree.closeNodeScope(jjtn004, true);
                  jjtc004 = false;
                        jjtn004.begin(t.beginLine,t.beginColumn);
                        jjtn004.end(t.endLine,t.endColumn);
                        try {
                                jjtn004.setValue(STRING_LITERAL,StringUtils.stringToSpecCharStrict(unquote(t.image)));
                        } catch (IllegalArgumentException iae) {
                                error(jjtn004, iae.getMessage());
                        }
      } finally {
                  if (jjtc004) {
                    jjtree.closeNodeScope(jjtn004, true);
                  }
      }
      break;
    case STRING_PLAIN_LITERAL:
      t = jj_consume_token(STRING_PLAIN_LITERAL);
                  CLVFLiteral jjtn005 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
      try {
                  jjtree.closeNodeScope(jjtn005, true);
                  jjtc005 = false;
                        jjtn005.begin(t.beginLine,t.beginColumn);
                        jjtn005.end(t.endLine,t.endColumn);
                        jjtn005.setValue(STRING_LITERAL,t.image);
      } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005, true);
                  }
      }
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                   CLVFLiteral jjtn006 = new CLVFLiteral(this, JJTLITERAL);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
      try {
                   jjtree.closeNodeScope(jjtn006, true);
                   jjtc006 = false;
                        jjtn006.begin(t.beginLine,t.beginColumn);
                        jjtn006.end(t.endLine,t.endColumn);
                        jjtn006.setValue(BOOLEAN_LITERAL,t.image);
      } finally {
                   if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006, true);
                   }
      }
      break;
    case DATE_LITERAL:
      t = jj_consume_token(DATE_LITERAL);
                  CLVFLiteral jjtn007 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
      try {
                  jjtree.closeNodeScope(jjtn007, true);
                  jjtc007 = false;
                        jjtn007.begin(t.beginLine,t.beginColumn);
                        jjtn007.end(t.endLine,t.endColumn);
                        jjtn007.setValue(DATE_LITERAL,t.image);
      } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007, true);
                  }
      }
      break;
    case DATETIME_LITERAL:
      t = jj_consume_token(DATETIME_LITERAL);
                  CLVFLiteral jjtn008 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc008 = true;
                  jjtree.openNodeScope(jjtn008);
      try {
                  jjtree.closeNodeScope(jjtn008, true);
                  jjtc008 = false;
                        jjtn008.begin(t.beginLine,t.beginColumn);
                        jjtn008.end(t.endLine,t.endColumn);
                        jjtn008.setValue(DATETIME_LITERAL,t.image);
      } finally {
                  if (jjtc008) {
                    jjtree.closeNodeScope(jjtn008, true);
                  }
      }
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
                  CLVFLiteral jjtn009 = new CLVFLiteral(this, JJTLITERAL);
                  boolean jjtc009 = true;
                  jjtree.openNodeScope(jjtn009);
      try {
                  jjtree.closeNodeScope(jjtn009, true);
                  jjtc009 = false;
                        jjtn009.begin(t.beginLine,t.beginColumn);
                        jjtn009.end(t.endLine,t.endColumn);
                        jjtn009.setValue(NULL_LITERAL,t.image);
      } finally {
                  if (jjtc009) {
                    jjtree.closeNodeScope(jjtn009, true);
                  }
      }
      break;
    case 136:
      ListOfLiterals();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListOfLiterals() throws ParseException {
 /*@bgen(jjtree) ListOfLiterals */
  CLVFListOfLiterals jjtn000 = new CLVFListOfLiterals(this, JJTLISTOFLITERALS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(136);
                jjtn000.begin(token.beginLine,token.beginColumn);
      Expression();
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case 135:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_14;
        }
        jj_consume_token(135);
        Expression();
      }
      jj_consume_token(137);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.end(token.endLine,token.endColumn);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* * Statements */
  final public void Statement() throws ParseException {
    try {
      switch (jj_nt.kind) {
      case SEMICOLON:
        EmptyStatement();
        break;
      case IF:
        IfStatement();
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case FOR_EACH:
        ForeachStatement();
        break;
      case DO:
        DoStatement();
        break;
      case BREAK:
        BreakStatement();
        jj_consume_token(SEMICOLON);
        break;
      case CONTINUE:
        ContinueStatement();
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        ReturnStatement();
        jj_consume_token(SEMICOLON);
        break;
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                recover(SEMICOLON);
    }
  }

  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  CLVFBlock jjtn000 = new CLVFBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(BLOCK_START);
                jjtn000.begin(token.beginLine,token.beginColumn);
        Statements();
        jj_consume_token(BLOCK_END);
                jjtn000.end(token.endLine,token.endColumn);
      } catch (ParseException e) {
        recover(BLOCK_END);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
    Expression();
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  CLVFIfStatement jjtn000 = new CLVFIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
                jjtn000.begin(token.beginLine,token.beginColumn);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
                jjtn000.setThenScope(enteredBlock());
      StatementOrBlock();
                exitedBlock();
      if (jj_2_8(2)) {
        jj_consume_token(ELSE);
                jjtn000.setElseScope(enteredBlock());
        StatementOrBlock();
                exitedBlock();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//TODO: if there are no case statements and expression does not have side effects we can ignore whole switch statement  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
        CLVFSwitchStatement jjtn000 = new CLVFSwitchStatement(this, JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SWITCH);
        jjtn000.setScope(enteredBlock());
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(BLOCK_START);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case CASE:
        case CASE_DEFAULT:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_15;
        }
        CaseStatement(jjtn000);
        Statements();
      }
      jj_consume_token(BLOCK_END);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.begin(t.beginLine,t.beginColumn);
        jjtn000.end(token.endLine,token.endColumn);
        if (jjtn000.jjtGetNumChildren() < 2) {
                warn(t.beginLine,t.beginColumn,t.endLine,t.endColumn,"Switch statement has no 'case' sub-statements","Add 'case' statements or remove whole 'switch' statement");
        }
        exitedBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CaseStatement(CLVFSwitchStatement switchStatement) throws ParseException {
 /*@bgen(jjtree) CaseStatement */
  CLVFCaseStatement jjtn000 = new CLVFCaseStatement(this, JJTCASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case CASE:
        jj_consume_token(CASE);
             jjtn000.begin(token.beginLine,token.beginColumn);
        UnaryExpression();
        jj_consume_token(COLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.end(token.endLine,token.endColumn);
        break;
      case CASE_DEFAULT:
        jj_consume_token(CASE_DEFAULT);
                 jjtn000.begin(token.beginLine,token.beginColumn);
                 jjtn000.setDefaultClause(true);
        jj_consume_token(COLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.end(token.endLine,token.endColumn);
                if (switchStatement.hasDefaultClause()) {
                        error(jjtn000,"Default case is already defined");
                }
                switchStatement.setDefaultClause(true);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Statements() throws ParseException {
    label_16:
    while (true) {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case SEMICOLON:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case BREAK:
      case CONTINUE:
      case FOR:
      case FOR_EACH:
      case IF:
      case RETURN:
      case WHILE:
      case SWITCH:
      case DO:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_16;
      }
      if (jj_2_9(3)) {
        VariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case DATE_LITERAL:
        case DATETIME_LITERAL:
        case NULL_LITERAL:
        case ISNULL:
        case NVL:
        case NVL2:
        case IIF:
        case IN:
        case PRINT_ERR:
        case PRINT_LOG:
        case PRINT_STACK:
        case RAISE_ERROR:
        case STRING_PLAIN_LITERAL:
        case NOT:
        case MINUS:
        case INCR:
        case DECR:
        case SEMICOLON:
        case OPEN_PAR:
        case BREAK:
        case CONTINUE:
        case FOR:
        case FOR_EACH:
        case IF:
        case RETURN:
        case WHILE:
        case SWITCH:
        case DO:
        case LOOKUP:
        case LOOKUP_NEXT:
        case LOOKUP_FOUND:
        case LOOKUP_ADMIN:
        case SEQUENCE:
        case DICTIONARY:
        case FIELD_ACCESS_OPERATOR:
        case IDENTIFIER:
        case 136:
          Statement();
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  CLVFWhileStatement jjtn000 = new CLVFWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
        jjtn000.begin(token.beginLine,token.beginColumn);
        jjtn000.setScope(enteredBlock());
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
      StatementOrBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        exitedBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForInit() throws ParseException {
    if (jj_2_10(2)) {
      VariableDeclaration();
    } else {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        Expression();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
        CLVFForStatement jjtn000 = new CLVFForStatement(this, JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int i=0;
    try {
      jj_consume_token(FOR);
        jjtn000.begin(token.beginLine,token.beginColumn);
        jjtn000.setScope(enteredBlock());
      jj_consume_token(OPEN_PAR);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        ForInit();
                      jjtn000.setInitPosition(i++);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        Expression();
                         jjtn000.setFinalPosition(i++);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        Expression();
                         jjtn000.setUpdatePosition(i++);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      StatementOrBlock();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        exitedBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForeachStatement() throws ParseException {
 /*@bgen(jjtree) ForeachStatement */
  CLVFForeachStatement jjtn000 = new CLVFForeachStatement(this, JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR_EACH);
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.setScope(enteredBlock());
      jj_consume_token(OPEN_PAR);
      VariableDeclaration();
      jj_consume_token(COLON);
      Expression();
      jj_consume_token(CLOSE_PAR);
      StatementOrBlock();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                exitedBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) #DoStatement( 2) */
  CLVFDoStatement jjtn000 = new CLVFDoStatement(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
        jjtn000.begin(token.beginLine,token.beginColumn);
        jjtn000.setScope(enteredBlock());
      StatementOrBlock();
      jj_consume_token(WHILE);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
    jjtree.closeNodeScope(jjtn000,  2);
    jjtc000 = false;
        // must exit block only here, as the expression is still part of loop scope!
        exitedBlock();
        jjtn000.end(token.endLine,token.endColumn);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
    }
    }
  }

////void TryCatchStatement() ://{}//{//  <TRY> Statement() <CATCH> "(" VarExp() ")" Statement()//}//////  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  CLVFBreakStatement jjtn000 = new CLVFBreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  CLVFContinueStatement jjtn000 = new CLVFContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.begin(token.beginLine,token.beginColumn);
                jjtn000.end(token.endLine,token.endColumn);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
  CLVFReturnStatement jjtn000 = new CLVFReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
               jjtn000.begin(token.beginLine,token.beginColumn);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case LONG_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case ISNULL:
      case NVL:
      case NVL2:
      case IIF:
      case IN:
      case PRINT_ERR:
      case PRINT_LOG:
      case PRINT_STACK:
      case RAISE_ERROR:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case INCR:
      case DECR:
      case OPEN_PAR:
      case LOOKUP:
      case LOOKUP_NEXT:
      case LOOKUP_FOUND:
      case LOOKUP_ADMIN:
      case SEQUENCE:
      case DICTIONARY:
      case RETURN_OK:
      case RETURN_SKIP:
      case RETURN_ALL:
      case RETURN_STOP:
      case FIELD_ACCESS_OPERATOR:
      case IDENTIFIER:
      case 136:
        switch (jj_nt.kind) {
        case INTEGER_LITERAL:
        case LONG_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case DATE_LITERAL:
        case DATETIME_LITERAL:
        case NULL_LITERAL:
        case ISNULL:
        case NVL:
        case NVL2:
        case IIF:
        case IN:
        case PRINT_ERR:
        case PRINT_LOG:
        case PRINT_STACK:
        case RAISE_ERROR:
        case STRING_PLAIN_LITERAL:
        case NOT:
        case MINUS:
        case INCR:
        case DECR:
        case OPEN_PAR:
        case LOOKUP:
        case LOOKUP_NEXT:
        case LOOKUP_FOUND:
        case LOOKUP_ADMIN:
        case SEQUENCE:
        case DICTIONARY:
        case FIELD_ACCESS_OPERATOR:
        case IDENTIFIER:
        case 136:
          Expression();
          break;
        case RETURN_OK:
        case RETURN_SKIP:
        case RETURN_ALL:
        case RETURN_STOP:
          ControlConstant();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.end(token.endLine,token.endColumn);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ControlConstant() throws ParseException {
                                   /*@bgen(jjtree) Literal */
  CLVFLiteral jjtn000 = new CLVFLiteral(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtn000.begin(token.beginLine,token.beginColumn);
      switch (jj_nt.kind) {
      case RETURN_OK:
        jj_consume_token(RETURN_OK);
               jjtn000.setType(TLTypePrimitive.INTEGER); jjtn000.setValueDirect(RecordTransform.OK);
        break;
      case RETURN_SKIP:
        jj_consume_token(RETURN_SKIP);
                 jjtn000.setType(TLTypePrimitive.INTEGER); jjtn000.setValueDirect(RecordTransform.SKIP);
        break;
      case RETURN_ALL:
        jj_consume_token(RETURN_ALL);
                jjtn000.setType(TLTypePrimitive.INTEGER); jjtn000.setValueDirect(RecordTransform.ALL);
        break;
      case RETURN_STOP:
        jj_consume_token(RETURN_STOP);
                 jjtn000.setType(TLTypePrimitive.INTEGER); jjtn000.setValueDirect(RecordTransform.STOP);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.end(token.endLine, token.endColumn);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//void EvalNode() ://{}//{//   "eval(" AdditiveExpression() ["," AdditiveExpression() ] ")" { hasEvalNode=true;  jjtThis.setExpMode(false); }//   | "eval_exp(" AdditiveExpression() ")" { jjtThis.setExpMode(true); }//}  final public void SequenceNode() throws ParseException {
 /*@bgen(jjtree) SequenceNode */
        CLVFSequenceNode jjtn000 = new CLVFSequenceNode(this, JJTSEQUENCENODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(SEQUENCE);
                jjtn000.begin(token.beginLine,token.beginColumn);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(IDENTIFIER);
                        jjtn000.setSequenceName(t.image,t.beginLine,t.beginColumn);
                        jjtn000.setType(TLTypePrimitive.INTEGER);
      switch (jj_nt.kind) {
      case 135:
        jj_consume_token(135);
        switch (jj_nt.kind) {
        case INT_VAR:
          jj_consume_token(INT_VAR);
                            jjtn000.setType(TLTypePrimitive.INTEGER);
          break;
        case LONG_VAR:
          jj_consume_token(LONG_VAR);
                          jjtn000.setType(TLTypePrimitive.LONG);
          break;
        case STRING_VAR:
          jj_consume_token(STRING_VAR);
                           jjtn000.setType(TLTypePrimitive.STRING);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(DOT);
      FunctionCall(null);
                jjtn000.end(token.endLine,token.endColumn);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                        CLVFFunctionCall opFunc = (CLVFFunctionCall)jjtn000.jjtGetChild(0);
                        jjtn000.removeChild(0);
                        if (opFunc.jjtGetChild(0).jjtGetNumChildren() > 0) {
                                error(opFunc,"Function '" + opFunc.getName() + "' does not accept any arguments");
                        }
                        if ("next".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFSequenceNode.OP_NEXT);
                        } else if ("current".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFSequenceNode.OP_CURRENT);
                        } else if ("reset".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFSequenceNode.OP_RESET);
                        } else {
                                error(opFunc,"Illegal sequence manipulator '" + opFunc.getName() + "()'",
                                                        "Use one of next(), current() or reset()");
                        }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LookupNode() throws ParseException {
 /*@bgen(jjtree) LookupNode */
  CLVFLookupNode jjtn000 = new CLVFLookupNode(this, JJTLOOKUPNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case LOOKUP:
        jj_consume_token(LOOKUP);
                        jjtn000.begin(token.beginLine,token.beginColumn);
        jj_consume_token(OPEN_PAR);
        jj_consume_token(IDENTIFIER);
                                jjtn000.setLookupName(token.image,token.beginLine,token.beginColumn);
        jj_consume_token(CLOSE_PAR);
                        jjtn000.end(token.endLine,token.endColumn);
        jj_consume_token(DOT);
        FunctionCall(null);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
                        CLVFFunctionCall opFunc = (CLVFFunctionCall)jjtn000.jjtGetChild(0);
                        jjtn000.removeChild(0); // get rid of the manipulator function
                        if ("get".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFLookupNode.OP_GET);
                        } else if ("next".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFLookupNode.OP_NEXT);
                        } else if ("count".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFLookupNode.OP_COUNT);
                        } else if ("put".equals(opFunc.getName())) {
                                jjtn000.setOperation(CLVFLookupNode.OP_PUT);
                        } else {
                                error(opFunc,"Illegal lookup manipulator","Use one of get(), next(), init(), free() or count()");
                        }
                        CLVFArguments params = (CLVFArguments)opFunc.jjtGetChild(0);
                        jjtn000.jjtAddChild(params,0);
                        jjtn000.end(params.getEnd().getLine(),params.getEnd().getColumn());
        break;
      case LOOKUP_NEXT:
        jj_consume_token(LOOKUP_NEXT);
                        jjtn000.begin(token.beginLine,token.beginColumn);
        jj_consume_token(OPEN_PAR);
        jj_consume_token(IDENTIFIER);
                                jjtn000.setOperation(1);
                                jjtn000.setLookupName(token.image,token.beginLine,token.beginColumn);
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.end(token.endLine,token.endColumn);
                        error(jjtn000,"Obsolete lookup syntax","Use 'lookup(<LookupName>).next().field' instead");
        break;
      case LOOKUP_FOUND:
        jj_consume_token(LOOKUP_FOUND);
                        jjtn000.begin(token.beginLine,token.beginColumn);
        jj_consume_token(OPEN_PAR);
        jj_consume_token(IDENTIFIER);
                                jjtn000.setOperation(2);
                                jjtn000.setLookupName(token.image,token.beginLine,token.beginColumn);
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.end(token.endLine,token.endColumn);
                        warn(jjtn000,"Obsolete lookup syntax","Use 'lookup(<lookupName>).count()' instead");
        break;
      case LOOKUP_ADMIN:
        jj_consume_token(LOOKUP_ADMIN);
                        jjtn000.begin(token.beginLine,token.beginColumn);
        jj_consume_token(OPEN_PAR);
        jj_consume_token(IDENTIFIER);
                                jjtn000.setLookupName(token.image,token.beginLine,token.beginColumn);
        jj_consume_token(135);
        jj_consume_token(IDENTIFIER);
                                if (token.image.equalsIgnoreCase("init")) {
                                        jjtn000.setOperation(3);
                                } else if (token.image.equalsIgnoreCase("free")) {
                                        jjtn000.setOperation(4);
                                } else {
                                        error(token,
                                        "Invalid lookup operation identifier - '" + token.image +  "'",
                                        "Replace with one of 'init' or 'free'");
                                }
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.end(token.endLine,token.endColumn);
                        error(jjtn000,"Obsolete lookup syntax","Use 'lookup(<lookupName>).init()' or 'lookup(<lookupName>).free()' instead");
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DictionaryNode() throws ParseException {
 /*@bgen(jjtree) DictionaryNode */
  CLVFDictionaryNode jjtn000 = new CLVFDictionaryNode(this, JJTDICTIONARYNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DICTIONARY);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
                        jjtn000.begin(token.beginLine,token.beginColumn);
                        jjtn000.end(token.endLine,token.endColumn);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  void recover(int kind) throws ParseException {
        Token t;
        do {
                t = getNextToken();
                if (t.kind == EOF) {
                        break;
                }
        } while (t.kind != kind);
  }

  void unknownToken() throws ParseException {
        Token t;

        t = getNextToken();

        if (t.kind != EOF) {
                error(t,"Syntax error on token '" + t.image + "'","Delete this token");
        } else {
                // this stops processing in case we reach EOF
                throw new EndOfFileException();
        }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(FOR_EACH)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(REGEX_EQUAL)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(REGEX_CONTAINS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(GREATER_THAN_EQUAL)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(LESS_THAN_EQUAL)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(GREATER_THAN)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(NON_EQUAL)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(QUESTION_MARK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(RECORD_ACCESS_SECOND_PART)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_103()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(FIELD_ACCESS_OPERATOR)) return true;
    if (jj_scan_token(RECORD_ACCESS_FIRST_PART)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(MAPPING)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(RAISE_ERROR)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(DICTIONARY)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(PRINT_STACK)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(PRINT_LOG)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(PRINT_ERR)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(IIF)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NVL2)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(NVL)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(ISNULL)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(LOOKUP_ADMIN)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(135)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(136)) return true;
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(LOOKUP_FOUND)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(BLOCK_START)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(BLOCK_END)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(136)) return true;
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(LOOKUP_NEXT)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(135)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LIST_VAR)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(136)) return true;
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(137)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(LOOKUP)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(RECORD_VAR)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(MAP_VAR)) return true;
    if (jj_scan_token(136)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(BOOLEAN_VAR)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(DATETIME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(STRING_VAR)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(INT_VAR)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LONG_VAR)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(BYTE_VAR)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(DICT_SEPARATOR)) return true;
    if (jj_scan_token(DICT_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(135)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(DATE_VAR)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_65()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(SEQUENCE)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(STRING_PLAIN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(STRING_VAR)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(DECIMAL_VAR)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(RETURN_STOP)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(RETURN_ALL)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(DOUBLE_VAR)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(RETURN_SKIP)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(RETURN_OK)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(LONG_VAR)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(INT_VAR)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_142()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_129()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(135)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_134()) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public TransformLangParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[67];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xffd18000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffd18000,0xffd18000,0x0,0x0,0x0,0x0,0x7d18000,0x0,0x0,0x0,0xf8000000,0x80000000,0x78000000,0x0,0xffd18000,0x0,0xffd18000,0xffd18000,0x0,0x0,0x0,0x7d18000,0x0,0xffd18000,0x0,0x0,0xffd18000,0xffd18000,0xffd18000,0xffd18000,0xffd18000,0xffd18000,0xffd18000,0xffd18000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2c61009f,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x3000000,0x3000000,0x20,0x40,0x300,0x300,0xfc00,0xfc00,0x30000,0x30000,0x1c0000,0x1c0000,0x2061009f,0x2060001f,0x600000,0x10080,0x600000,0x600000,0x20000010,0x80000000,0x40000,0x80000000,0xf,0x0,0xf,0x0,0x2061009f,0x0,0x2061009f,0x2061009f,0x0,0x0,0x0,0x10,0x0,0x2461009f,0x0,0x0,0x2461009f,0x2461009f,0x2061009f,0x2061009f,0x2061009f,0x2061009f,0x2061009f,0x2061009f,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x80000000,0x203ff80,0x1db00000,0x0,0x2000000,0x0,0x3ff80,0xbff80,0x0,0x0,0x7f80,0x3ff80,0x38000,0x0,0x0,0x7f80,0x0,0x7c,0x7c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f80,0x0,0x7f80,0x7f80,0x7f80,0x0,0x0,0x0,0x0,0x1db00000,0x20000000,0x20000000,0x1db3ff80,0x1db00000,0x0,0x3ff80,0x0,0x0,0x0,0x0,0x0,0x2180,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x800103e5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800103e0,0x800103e0,0x0,0x0,0x0,0x0,0x800103e0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x87f9ffe0,0x0,0x87f9ffe0,0x87f9ffe0,0x7f8fc00,0x7f80000,0xfc00,0x0,0x0,0x800103e5,0x2,0x2,0x800103e5,0x800103e5,0x800103e0,0x800103e0,0x800103e0,0x800103e0,0xf80103e0,0xf80103e0,0x78000000,0x0,0x0,0x1e0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x10,0x110,0x0,0x0,0x80,0x10,0x10,0x80,0x10,0x0,0x10,0x10,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x110,0x110,0x0,0x0,0x0,0x0,0x110,0x100,0x10,0x100,0x10,0x10,0x0,0x2,0x110,0x80,0x110,0x110,0x0,0x0,0x0,0x100,0x80,0x110,0x0,0x0,0x110,0x110,0x110,0x110,0x110,0x110,0x110,0x110,0x0,0x0,0x80,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TransformLangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TransformLangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TransformLangParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TransformLangParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TransformLangParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TransformLangParser(TransformLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TransformLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 67; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
	tokenError(kind); // <- Inserted
throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[139];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 67; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 139; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
