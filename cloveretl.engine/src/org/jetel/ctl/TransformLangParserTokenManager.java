/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserTokenManager.java */
package org.jetel.ctl;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.jetel.component.RecordTransform;
import org.jetel.ctl.ASTnode.*;
import org.jetel.ctl.data.Scope;
import org.jetel.ctl.data.TLType;
import org.jetel.ctl.data.TLTypePrimitive;
import org.jetel.graph.TransformationGraph;
import org.jetel.util.file.FileUtils;
import org.jetel.util.file.SandboxUrlUtils;
import org.jetel.util.property.PropertyRefResolver;
import org.jetel.util.property.RefResFlag;
import org.jetel.util.string.StringUtils;

/** Token Manager. */
public class TransformLangParserTokenManager implements TransformLangParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 37:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 39:
         jjmatchedKind = 36;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 61;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 62;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x4L);
      case 44:
         jjmatchedKind = 135;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x8L);
      case 46:
         jjmatchedKind = 63;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x20L);
      case 58:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 59:
         jjmatchedKind = 58;
         return jjMoveNfa_0(0, 0);
      case 61:
         jjmatchedKind = 56;
         return jjMoveNfa_0(0, 0);
      case 63:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5000000000000000L);
      case 91:
         jjmatchedKind = 136;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 137;
         return jjMoveNfa_0(0, 0);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x101000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1020200000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41040600000a00L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200040400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400003800000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc8000000L, 0x80084000080L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000008100L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x510000000010000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x34000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x8020000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200020100002000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800800000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20100010000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
      case 123:
         jjmatchedKind = 59;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 60;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 55;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         break;
      case 75:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0x40501020010200L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x228060208020800L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x501000000008000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80040000080L);
      case 111:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x9001e001a81100L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000000L, active1, 0xa00800100000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x2000000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L);
      case 76:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 2;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8800000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x201000000020800L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000100000L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80200000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xf00000000L, active1, 0x110080000L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x24000000L, active1, 0x400000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x110000002200100L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1e000001000L);
      case 112:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L);
      case 114:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300001002000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20408000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x401008000280L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000040000000L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         break;
      case 80:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400200100000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x801002000000L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1040080L);
      case 103:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2800L);
      case 107:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1e000000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000010001000L);
      case 109:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x700000000L, active1, 0L);
      case 111:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200200080020000L);
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x11000100200000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x100060008000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100040000L);
      case 101:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x20000001000L);
      case 103:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 104:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x401000000200000L);
      case 107:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000002000L);
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x88020000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000000L, active1, 0x100000002000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1e200000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1800L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 5;
         }
         break;
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 103:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         break;
      case 104:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000200000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L);
      case 112:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1c000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000000L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1c000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L);
      case 104:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 108:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0x2000000L);
      case 114:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x900000000L, active1, 0L);
      case 116:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0x1010000000000L);
      case 99:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 7;
         }
         break;
      case 101:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 7;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000L);
      case 103:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L, active1, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 107:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 9;
         }
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L);
      case 114:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 9;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000000L);
      case 121:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
         }
         break;
      case 110:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 159;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 60)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjAddStates(11, 17);
                  else if (curChar == 61)
                     jjAddStates(18, 20);
                  else if (curChar == 36)
                     jjAddStates(21, 22);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(26, 29);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(30, 36);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 127)
                        kind = 127;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(37, 39);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddStates(23, 25);
                  break;
               case 7:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 10:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 26:
                  if (curChar == 38 && kind > 38)
                     kind = 38;
                  break;
               case 27:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 31:
                  if (curChar == 33 && kind > 39)
                     kind = 39;
                  break;
               case 32:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 33:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 60 && kind > 42)
                     kind = 42;
                  break;
               case 35:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               case 36:
                  if (curChar == 61 && kind > 45)
                     kind = 45;
                  break;
               case 37:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 60:
                  if (curChar == 36 && kind > 127)
                     kind = 127;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if (curChar == 36)
                     jjAddStates(21, 22);
                  break;
               case 64:
                  if (curChar == 46 && kind > 127)
                     kind = 127;
                  break;
               case 70:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(26, 29);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(74);
                  break;
               case 75:
                  if (curChar != 48)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(30, 36);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 78:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(78);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 73);
                  break;
               case 81:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 73);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar != 46)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(40, 42);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(40, 42);
                  break;
               case 90:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(91, 5);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(95, 5);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(99, 5);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(105, 106);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(114, 115);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(115);
                  break;
               case 115:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(120, 121);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(121);
                  break;
               case 121:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 124:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 127:
                  if (curChar == 61)
                     jjAddStates(18, 20);
                  break;
               case 128:
                  if (curChar == 61 && kind > 40)
                     kind = 40;
                  break;
               case 129:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 130:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 131:
                  if (curChar == 46)
                     jjAddStates(11, 17);
                  break;
               case 132:
                  if (curChar == 46 && kind > 40)
                     kind = 40;
                  break;
               case 135:
                  if (curChar == 46 && kind > 41)
                     kind = 41;
                  break;
               case 138:
                  if (curChar == 46 && kind > 42)
                     kind = 42;
                  break;
               case 141:
                  if (curChar == 46 && kind > 43)
                     kind = 43;
                  break;
               case 144:
                  if (curChar == 46 && kind > 44)
                     kind = 44;
                  break;
               case 147:
                  if (curChar == 46 && kind > 45)
                     kind = 45;
                  break;
               case 150:
                  if (curChar == 46 && kind > 46)
                     kind = 46;
                  break;
               case 156:
                  if (curChar == 60)
                     jjAddStates(9, 10);
                  break;
               case 157:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 158:
                  if (curChar == 61 && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(62);
                  }
                  else if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  jjCheckNAddStates(23, 25);
                  break;
               case 11:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 12:
                  if (curChar == 117)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x4000000040000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 20:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 124 && kind > 37)
                     kind = 37;
                  break;
               case 22:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x1000000010L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 24:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x10000000100000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 29:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 39:
                  if (curChar == 126)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 114 && kind > 74)
                     kind = 74;
                  break;
               case 41:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 101 && kind > 74)
                     kind = 74;
                  break;
               case 47:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101 && kind > 78)
                     kind = 78;
                  break;
               case 53:
               case 56:
                  if (curChar == 116)
                     jjCheckNAdd(52);
                  break;
               case 54:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
               case 62:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(62);
                  break;
               case 65:
                  if (curChar == 110)
                     jjCheckNAdd(64);
                  break;
               case 66:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 116)
                     jjCheckNAdd(64);
                  break;
               case 68:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 73:
                  if ((0x100000001000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 76:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(77);
                  break;
               case 79:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(80, 73);
                  break;
               case 82:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(83);
                  break;
               case 89:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 133:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 139:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 148:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 159 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(0, 0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 46)
                     jjCheckNAddStates(54, 57);
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 42)
                     kind = 129;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(1);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 114;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 46)
                     kind = 113;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x7000L);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_1(active0, 0x7000L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa3_1(active0, 0x7000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa4_1(active0, 0x7000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x6000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa6_1(active0, 0x6000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_1(active0, 0x2000L);
      case 71:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa9_1(active0, 0x2000L);
      case 78:
         return jjMoveStringLiteralDfa9_1(active0, 0x4000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_1(active0, 0x4000L);
      case 80:
         return jjMoveStringLiteralDfa10_1(active0, 0x2000L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_1(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa11_1(active0, 0x4000L);
      default :
         return 11;
   }
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_1(active0, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa12_1(active0, 0x2000L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      case 84:
         return jjMoveStringLiteralDfa13_1(active0, 0x4000L);
      default :
         return 13;
   }
   return 13;
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_1(active0, 0x4000L);
      default :
         return 14;
   }
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(14, 14);
         break;
      default :
         return 15;
   }
   return 15;
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_2(0x7000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa2_2(active0, 0x7000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa3_2(active0, 0x7000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa4_2(active0, 0x7000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa6_2(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_2(active0, 0x2000L);
      case 71:
         return jjMoveStringLiteralDfa7_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_2(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa9_2(active0, 0x2000L);
      case 78:
         return jjMoveStringLiteralDfa9_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_2(active0, 0x4000L);
      case 80:
         return jjMoveStringLiteralDfa10_2(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_2(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa11_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(9, active0);
}
private int jjMoveStringLiteralDfa11_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_2(active0, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa12_2(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_2(10, active0);
}
private int jjMoveStringLiteralDfa12_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(12, 13);
         break;
      case 84:
         return jjMoveStringLiteralDfa13_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(11, active0);
}
private int jjMoveStringLiteralDfa13_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_2(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_2(12, active0);
}
private int jjMoveStringLiteralDfa14_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(14, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_2(13, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   86, 87, 92, 93, 96, 97, 5, 100, 109, 157, 158, 134, 137, 140, 143, 146, 
   149, 155, 128, 129, 130, 66, 69, 7, 8, 10, 71, 72, 73, 74, 76, 78, 
   79, 81, 73, 82, 84, 1, 2, 5, 88, 89, 5, 96, 97, 5, 3, 4, 
   90, 91, 94, 95, 98, 99, 1, 2, 3, 5, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\156\165\154\154", "\151\163\156\165\154\154", "\156\166\154", "\156\166\154\62", "\151\151\146", 
"\151\156", "\160\162\151\156\164\105\162\162", "\160\162\151\156\164\114\157\147", 
"\160\162\151\156\164\123\164\141\143\153", "\162\141\151\163\145\105\162\162\157\162", "\47", null, null, null, null, 
null, null, null, null, null, null, "\77\75", "\55", "\53", "\52", "\57", "\45", 
"\53\53", "\55\55", "\176", "\75", "\72\75", "\73", "\173", "\175", "\50", "\51", "\56", 
"\77", "\72", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", 
"\151\156\164\145\147\145\162", "\154\157\156\147", "\144\141\164\145", null, "\144\145\143\151\155\141\154", 
"\142\157\157\154\145\141\156", "\163\164\162\151\156\147", null, "\154\151\163\164", "\155\141\160", 
"\162\145\143\157\162\144", "\157\142\152\145\143\164", "\166\157\151\144", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\145\154\163\145", "\146\157\162", "\146\157\162\145\141\143\150", 
"\146\165\156\143\164\151\157\156", "\151\146", "\162\145\164\165\162\156", "\167\150\151\154\145", 
"\143\141\163\145", "\145\156\165\155", "\151\155\160\157\162\164", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\144\157", "\164\162\171", "\143\141\164\143\150", 
"\154\157\157\153\165\160", "\154\157\157\153\165\160\137\156\145\170\164", 
"\154\157\157\153\165\160\137\146\157\165\156\144", "\154\157\157\153\165\160\137\141\144\155\151\156", 
"\163\145\161\165\145\156\143\145", "\144\145\142\165\147", "\151\156\146\157", "\167\141\162\156", 
"\145\162\162\157\162", "\146\141\164\141\154", "\164\162\141\143\145", 
"\144\151\143\164\151\157\156\141\162\171", null, null, "\171\145\141\162", "\155\157\156\164\150", "\167\145\145\153", 
"\144\141\171", "\150\157\165\162", "\155\151\156\165\164\145", "\163\145\143\157\156\144", 
"\155\151\154\154\151\163\145\143", "\117\113", "\123\113\111\120", "\101\114\114", "\123\124\117\120", null, null, 
null, null, null, null, null, null, "\54", "\133", "\135", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
   "WithinSingleLineComment",
   "DictionaryEntrySeparator",
   "DictionaryEntryIdentifier",
   "WithinFieldIdentifier",
   "ExpectingFieldIdentifier",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 5, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffdf8001L, 0xffffffffffffffffL, 0x793L, 
};
static final long[] jjtoSkip = {
   0x7efeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x76c0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[159];
private final int[] jjstateSet = new int[318];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public TransformLangParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TransformLangParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 159; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 138)
         {
            jjmatchedKind = 138;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 138)
         {
            jjmatchedKind = 138;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                char inChar,prevChar=' ';
                image.setLength(0);
                int startLine=input_stream.getBeginLine();
                int startCol=input_stream.getBeginColumn();
                try{
                        LOOP: while(true){
                                inChar=input_stream.readChar();
                                switch(inChar){
                                 case '\u005c'':
                                        if (prevChar=='\u005c\u005c')
                                                image.setLength(image.length()-1);
                                        else
                                                break LOOP;
                                break;
                                case 'u':
                                        if (prevChar=='\u005c\u005c')
                                                image.setLength(image.length()-1);
                                        break;
                                case '\u005cr':
                                case '\u005cn':
                                        if (prevChar=='\u005c\u005c')
                                                image.setLength(image.length()-1);
                                        else
                                                throw new UnterminatedStringException(startLine,startCol,input_stream.getEndLine(),input_stream.getEndColumn());
                                        break;
                                }
                                image.append(inChar);
                                prevChar=inChar;
                        }
                }catch(java.io.IOException ioe){
                        throw new UnterminatedStringException(startLine,startCol,input_stream.getEndLine(),input_stream.getEndColumn());
                }
                matchedToken.image=image.toString();
                matchedToken.endLine = input_stream.getEndLine();
            matchedToken.endColumn = input_stream.getEndColumn();
         break;
      case 128 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                boolean fieldIdentifier = false; // is the following token a field identifier?
                int count = 0; // the number of characters to rollback
                try  {
                    char c = input_stream.readChar(); // read the first character
                        count++;
                    if (c == '.') { // field identifier may only come after '.'
                                c = input_stream.readChar(); // read the second character
                                count++;
                            if (c == '_' || Character.isLetter(c)) { // string identifier
                                    do { // read letters, digits and underscores
                                                c = input_stream.readChar();
                                                count++;
                                    } while(c == '_' || Character.isLetterOrDigit(c));
                                    while (c == ' ' || c == '\u005ct' || c == '\u005cr' || c == '\u005cn') { // skip whitespace after the identifier
                                                c = input_stream.readChar();
                                                count++;
                                    }
                                    if (c != '(') { // the identifier is actually a function name
                                        fieldIdentifier = true;
                                    } else {
//				    	System.out.print("\nFunction call");
                                    }
                            } else if (Character.isDigit(c)) { // numeric identifier
                                        // if the first character is a number, assume it is a numeric field identifier
                                        // TODO if there are more digits, make sure the first one is [1-9]
                                fieldIdentifier = true;
                                } else if (c == '*') { // asterisk
                                        // also expect <RECORD_ACCESS_SECOND_PART> if there is an asterisk                                fieldIdentifier = true;
                                }
                    }
                } catch (Exception ex) {
                        // end of file
                } finally {
                    try {
//				System.out.println();
                                input_stream.backup(count); // rollback to the original position
                    } catch(Exception ex) {
                        throw new RuntimeException("Error restoring previous input stream position", ex);
                    }
                }

                if (fieldIdentifier) {
//			System.out.println("Expecting a field identifier");
                        // manually switch state to <ExpectingFieldIdentifier>
                        SwitchTo(TransformLangParserConstants.ExpectingFieldIdentifier);
                } else {
//			System.out.println("Not expecting a field identifier");
                        // manually switch state to <DEFAULT>
                        SwitchTo(TransformLangParserConstants.DEFAULT);
                }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
