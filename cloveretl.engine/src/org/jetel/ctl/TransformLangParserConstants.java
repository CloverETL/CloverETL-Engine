/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserConstants.java */
package org.jetel.ctl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TransformLangParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TL_SHEBANG = 12;
  /** RegularExpression Id. */
  int TL_COMPILE = 13;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int LONG_LITERAL = 15;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 16;
  /** RegularExpression Id. */
  int HEX_LITERAL = 17;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 18;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 19;
  /** RegularExpression Id. */
  int EXPONENT = 20;
  /** RegularExpression Id. */
  int STRING_LITERAL = 21;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 22;
  /** RegularExpression Id. */
  int DATE_LITERAL = 23;
  /** RegularExpression Id. */
  int DATETIME_LITERAL = 24;
  /** RegularExpression Id. */
  int NULL_LITERAL = 25;
  /** RegularExpression Id. */
  int ISNULL = 26;
  /** RegularExpression Id. */
  int NVL = 27;
  /** RegularExpression Id. */
  int NVL2 = 28;
  /** RegularExpression Id. */
  int IIF = 29;
  /** RegularExpression Id. */
  int IN = 30;
  /** RegularExpression Id. */
  int PRINT_ERR = 31;
  /** RegularExpression Id. */
  int PRINT_LOG = 32;
  /** RegularExpression Id. */
  int PRINT_STACK = 33;
  /** RegularExpression Id. */
  int RAISE_ERROR = 34;
  /** RegularExpression Id. */
  int STRING_PLAIN_LITERAL = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int AND = 37;
  /** RegularExpression Id. */
  int NOT = 38;
  /** RegularExpression Id. */
  int EQUAL = 39;
  /** RegularExpression Id. */
  int NON_EQUAL = 40;
  /** RegularExpression Id. */
  int LESS_THAN = 41;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 42;
  /** RegularExpression Id. */
  int GREATER_THAN = 43;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 44;
  /** RegularExpression Id. */
  int REGEX_EQUAL = 45;
  /** RegularExpression Id. */
  int REGEX_CONTAINS = 46;
  /** RegularExpression Id. */
  int MINUS = 47;
  /** RegularExpression Id. */
  int PLUS = 48;
  /** RegularExpression Id. */
  int MULTIPLY = 49;
  /** RegularExpression Id. */
  int DIVIDE = 50;
  /** RegularExpression Id. */
  int MODULO = 51;
  /** RegularExpression Id. */
  int INCR = 52;
  /** RegularExpression Id. */
  int DECR = 53;
  /** RegularExpression Id. */
  int TILDA = 54;
  /** RegularExpression Id. */
  int ASSIGN = 55;
  /** RegularExpression Id. */
  int MAPPING = 56;
  /** RegularExpression Id. */
  int SEMICOLON = 57;
  /** RegularExpression Id. */
  int BLOCK_START = 58;
  /** RegularExpression Id. */
  int BLOCK_END = 59;
  /** RegularExpression Id. */
  int OPEN_PAR = 60;
  /** RegularExpression Id. */
  int CLOSE_PAR = 61;
  /** RegularExpression Id. */
  int DOT = 62;
  /** RegularExpression Id. */
  int QUESTION_MARK = 63;
  /** RegularExpression Id. */
  int COLON = 64;
  /** RegularExpression Id. */
  int INT_VAR = 65;
  /** RegularExpression Id. */
  int LONG_VAR = 66;
  /** RegularExpression Id. */
  int DATE_VAR = 67;
  /** RegularExpression Id. */
  int DOUBLE_VAR = 68;
  /** RegularExpression Id. */
  int DECIMAL_VAR = 69;
  /** RegularExpression Id. */
  int BOOLEAN_VAR = 70;
  /** RegularExpression Id. */
  int STRING_VAR = 71;
  /** RegularExpression Id. */
  int BYTE_VAR = 72;
  /** RegularExpression Id. */
  int CBYTE_VAR = 73;
  /** RegularExpression Id. */
  int LIST_VAR = 74;
  /** RegularExpression Id. */
  int MAP_VAR = 75;
  /** RegularExpression Id. */
  int RECORD_VAR = 76;
  /** RegularExpression Id. */
  int OBJECT_VAR = 77;
  /** RegularExpression Id. */
  int VOID_VAR = 78;
  /** RegularExpression Id. */
  int BREAK = 79;
  /** RegularExpression Id. */
  int CONTINUE = 80;
  /** RegularExpression Id. */
  int ELSE = 81;
  /** RegularExpression Id. */
  int FOR = 82;
  /** RegularExpression Id. */
  int FOR_EACH = 83;
  /** RegularExpression Id. */
  int FUNCTION = 84;
  /** RegularExpression Id. */
  int IF = 85;
  /** RegularExpression Id. */
  int RETURN = 86;
  /** RegularExpression Id. */
  int WHILE = 87;
  /** RegularExpression Id. */
  int CASE = 88;
  /** RegularExpression Id. */
  int ENUM = 89;
  /** RegularExpression Id. */
  int IMPORT = 90;
  /** RegularExpression Id. */
  int SWITCH = 91;
  /** RegularExpression Id. */
  int CASE_DEFAULT = 92;
  /** RegularExpression Id. */
  int DO = 93;
  /** RegularExpression Id. */
  int TRY = 94;
  /** RegularExpression Id. */
  int CATCH = 95;
  /** RegularExpression Id. */
  int LOOKUP = 96;
  /** RegularExpression Id. */
  int LOOKUP_NEXT = 97;
  /** RegularExpression Id. */
  int LOOKUP_FOUND = 98;
  /** RegularExpression Id. */
  int LOOKUP_ADMIN = 99;
  /** RegularExpression Id. */
  int SEQUENCE = 100;
  /** RegularExpression Id. */
  int LOGLEVEL_DEBUG = 101;
  /** RegularExpression Id. */
  int LOGLEVEL_INFO = 102;
  /** RegularExpression Id. */
  int LOGLEVEL_WARN = 103;
  /** RegularExpression Id. */
  int LOGLEVEL_ERROR = 104;
  /** RegularExpression Id. */
  int LOGLEVEL_FATAL = 105;
  /** RegularExpression Id. */
  int LOGLEVEL_TRACE = 106;
  /** RegularExpression Id. */
  int YEAR = 107;
  /** RegularExpression Id. */
  int MONTH = 108;
  /** RegularExpression Id. */
  int WEEK = 109;
  /** RegularExpression Id. */
  int DAY = 110;
  /** RegularExpression Id. */
  int HOUR = 111;
  /** RegularExpression Id. */
  int MINUTE = 112;
  /** RegularExpression Id. */
  int SECOND = 113;
  /** RegularExpression Id. */
  int MILLISEC = 114;
  /** RegularExpression Id. */
  int RETURN_OK = 115;
  /** RegularExpression Id. */
  int RETURN_SKIP = 116;
  /** RegularExpression Id. */
  int RETURN_ALL = 117;
  /** RegularExpression Id. */
  int FIELD_ACCESS_OPERATOR = 118;
  /** RegularExpression Id. */
  int FIELD_IDENTIFIER = 119;
  /** RegularExpression Id. */
  int NUMERIC_ID = 120;
  /** RegularExpression Id. */
  int STRING_ID = 121;
  /** RegularExpression Id. */
  int IDENTIFIER = 122;
  /** RegularExpression Id. */
  int LETTER = 123;
  /** RegularExpression Id. */
  int UNDERSCORE = 124;
  /** RegularExpression Id. */
  int ERROR = 128;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;
  /** Lexical state. */
  int WithinSingleLineComment = 2;
  /** Lexical state. */
  int WithinFieldIdentifier = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\n\\r\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"//\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "\"#CTL\"",
    "\"#CTL:COMPILE\"",
    "<INTEGER_LITERAL>",
    "<LONG_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "<DATE_LITERAL>",
    "<DATETIME_LITERAL>",
    "\"null\"",
    "\"isnull\"",
    "\"nvl\"",
    "\"nvl2\"",
    "\"iif\"",
    "\"in\"",
    "\"print_err\"",
    "\"print_log\"",
    "\"print_stack\"",
    "\"raise_error\"",
    "\"\\\'\"",
    "<OR>",
    "<AND>",
    "<NOT>",
    "<EQUAL>",
    "<NON_EQUAL>",
    "<LESS_THAN>",
    "<LESS_THAN_EQUAL>",
    "<GREATER_THAN>",
    "<GREATER_THAN_EQUAL>",
    "<REGEX_EQUAL>",
    "\"?=\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"=\"",
    "\":=\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"?\"",
    "\":\"",
    "\"int\"",
    "\"long\"",
    "\"date\"",
    "<DOUBLE_VAR>",
    "\"decimal\"",
    "\"boolean\"",
    "\"string\"",
    "\"bytearray\"",
    "\"cbytearray\"",
    "\"list\"",
    "\"map\"",
    "\"record\"",
    "\"object\"",
    "\"void\"",
    "\"break\"",
    "\"continue\"",
    "\"else\"",
    "\"for\"",
    "\"foreach\"",
    "\"function\"",
    "\"if\"",
    "\"return\"",
    "\"while\"",
    "\"case\"",
    "\"enum\"",
    "\"import\"",
    "\"switch\"",
    "\"default\"",
    "\"do\"",
    "\"try\"",
    "\"catch\"",
    "\"lookup\"",
    "\"lookup_next\"",
    "\"lookup_found\"",
    "\"lookup_admin\"",
    "\"sequence\"",
    "\"debug\"",
    "\"info\"",
    "\"warn\"",
    "\"error\"",
    "\"fatal\"",
    "\"trace\"",
    "\"year\"",
    "\"month\"",
    "\"week\"",
    "\"day\"",
    "\"hour\"",
    "\"minute\"",
    "\"second\"",
    "\"millisec\"",
    "\"OK\"",
    "\"SKIP\"",
    "\"ALL\"",
    "\"$\"",
    "<FIELD_IDENTIFIER>",
    "<NUMERIC_ID>",
    "<STRING_ID>",
    "<IDENTIFIER>",
    "<LETTER>",
    "\"_\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "<ERROR>",
  };

}
