/* Generated By:JJTree: Do not edit this line. CLVFLookupNode.java */

package org.jetel.ctl.ASTnode;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.jetel.ctl.TransformLangParser;
import org.jetel.ctl.TransformLangParserVisitor;
import org.jetel.ctl.data.TLType;
import org.jetel.data.DataRecord;
import org.jetel.data.lookup.LookupTable;

public class CLVFLookupNode extends SimpleNode {

	public static final int OP_GET = 0;
	public static final int OP_NEXT = 1;
	public static final int OP_COUNT = 2;
	public static final int OP_INIT = 3;
	public static final int OP_FREE = 4;

	private String lookupName;
	private Integer opType = null; // default is get
	private LookupTable lookupTable;
	private /* final */ int lookupIndex;
	private /* final */ DataRecord lookupRecord;
	private /* final */ TLType[] paramTypes;
	private /* final */ List<Integer> decimalPrecisions;

	public CLVFLookupNode(TransformLangParser p, int id) {
		super(p, id);
	}

	public CLVFLookupNode(CLVFLookupNode node) {
		super(node);
		this.lookupTable = node.lookupTable;
	}

	/** Accept the visitor. * */
	public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public void setLookupName(String name) {
		this.lookupName = name;
	}

	public void setOperation(int oper) {
		this.opType = oper;
	}

	public String getLookupName() {
		return lookupName;
	}

	public int getOperation() {
		return opType;
	}

	public LookupTable getLookupTable() {
		return lookupTable;
	}

	public void setLookupTable(LookupTable lookupTable) {
		this.lookupTable = lookupTable;
	}

	public void setFormalParameters(TLType[] paramTypes) {
		this.paramTypes = paramTypes;
	}
	
	public TLType[] getFormalParameters() {
		return this.paramTypes;
	}

	@Override
	public SimpleNode duplicate() {
		return new CLVFLookupNode(this);
	}

	public void setLookupIndex(int index) {
		this.lookupIndex = index;
	}

	public int getLookupIndex() {
		return this.lookupIndex;
	}

	public void setLookupRecord(DataRecord lookupRecord) {
		this.lookupRecord = lookupRecord;
	}
	
	public DataRecord getLookupRecord() {
		return lookupRecord;
	}
	
	public void setDecimalPrecisions(List<Integer> precisions) {
		this.decimalPrecisions = precisions;
	}
	
	public List<Integer> getDecimalPrecisions() {
		return decimalPrecisions == null || decimalPrecisions.isEmpty() ? Collections.<Integer>emptyList() : new LinkedList<Integer>(decimalPrecisions);
	}

}
