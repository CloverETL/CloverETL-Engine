/* Generated By:JJTree: Do not edit this line. CLVFFieldAccessExpression.java */

package org.jetel.ctl.ASTnode;

import org.jetel.ctl.TransformLangParser;
import org.jetel.ctl.TransformLangParserVisitor;
import org.jetel.metadata.DataRecordMetadata;

public class CLVFFieldAccessExpression extends SimpleNode {
	
	private String recordName;
	private String fieldName;

	private DataRecordMetadata metadata; 
	private Integer recordId = null;
	private Integer fieldId = null;
	private boolean isOutput;
	private boolean isWildcard = false;
	
	
	public CLVFFieldAccessExpression(int id) {
		super(id);
	}
	
	public CLVFFieldAccessExpression(TransformLangParser p, int id) {
		super(p, id);
	}

	public CLVFFieldAccessExpression(CLVFFieldAccessExpression node) {
		super(node);
		this.recordName = node.recordName;
		this.fieldName = node.fieldName;
		this.metadata = node.metadata;
		this.recordId = node.recordId;
		this.fieldId = node.fieldId;
		this.isOutput = node.isOutput;
		this.isWildcard = node.isWildcard;
	}


	public void setMetadata(DataRecordMetadata metadata) {
		this.metadata = metadata;
	}
	
	public DataRecordMetadata getMetadata() {
		return metadata;
	}

	public Integer getRecordId() {
		return recordId;
	}

	public void setRecordId(int recordId) {
		this.recordId = recordId;
	}

	public Integer getFieldId() {
		return fieldId;
	}

	public void setFieldId(int fieldId) {
		this.fieldId = fieldId;
	}

	public boolean isOutput() {
		return isOutput;
	}

	public void setOutput(boolean isOutput) {
		this.isOutput = isOutput;
	}
	
	public void setRecordName(String name) {
		this.recordName = name;
	}
	
	public void setFieldName(String name) {
		this.fieldName = name;
	}
	
	public void setWildcard(boolean isWildcard) {
		this.isWildcard = isWildcard;
	}
	
	public boolean isWildcard() {
		return isWildcard;
	}
	
	public String getRecordName() {
		return recordName;
	}
	
	public String getFieldName() {
		return fieldName;
	}
	
	/** Accept the visitor. * */
	public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	@Override
	public SimpleNode duplicate() {
		return new CLVFFieldAccessExpression(this);
	}
	
	
}
