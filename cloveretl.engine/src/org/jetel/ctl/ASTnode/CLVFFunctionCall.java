/* Generated By:JJTree: Do not edit this line. CLVFFunctionCall.java */

package org.jetel.ctl.ASTnode;

import org.jetel.ctl.TransformLangParser;
import org.jetel.ctl.TransformLangParserVisitor;
import org.jetel.ctl.data.TLType;
import org.jetel.ctl.extensions.TLFunctionDescriptor;
import org.jetel.ctl.extensions.TLFunctionPrototype;

public class CLVFFunctionCall extends SimpleNode {

	private String name;
	private CLVFFunctionDeclaration localFunc;
	private TLFunctionDescriptor externFunc;
	private TLType[] actualParams;
	private TLFunctionPrototype executable;
	
	public CLVFFunctionCall(int id) {
		super(id);
	}

	public CLVFFunctionCall(TransformLangParser p, int id) {
		super(p, id);
	}

	public CLVFFunctionCall(CLVFFunctionCall node) {
		super(node);
		this.name = node.name;
		this.localFunc = node.localFunc;
		this.externFunc = node.externFunc;
		this.actualParams = node.actualParams;
		this.executable = node.executable;
	}

	/** Accept the visitor. * */
	public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		// this piece of code makes prefixing of functions in the AST post processing step possible
		return (localFunc != null) ? localFunc.getName() : name;
	}

	public void setCallTarget(CLVFFunctionDeclaration localFunc) {
		this.localFunc = localFunc;
	}
	
	public void setCallTarget(TLFunctionDescriptor externFunc) {
		this.externFunc = externFunc;
	}
	
	public boolean isExternal() {
		return externFunc !=null;
	}
	
	public CLVFFunctionDeclaration getLocalFunction() {
		return localFunc;
	}
	
	public TLFunctionDescriptor getExternalFunction() {
		return externFunc;
	}

	@Override
	public String toString() {
		return super.toString() + "name '" + name + "'";
	}
	
	@Override
	public SimpleNode duplicate() {
		return new CLVFFunctionCall(this);
	}

	public void setActualParameters(TLType[] argTypes) {
		this.actualParams = argTypes;
	}
	
	public TLType[] getActualParameters() {
		return actualParams;
	}

	public void setExecutable(TLFunctionPrototype executable) {
		this.executable = executable;
	}

	public TLFunctionPrototype getExtecutable() {
		return executable;
	}
	
	
}
