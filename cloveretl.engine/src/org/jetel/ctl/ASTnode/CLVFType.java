/* Generated By:JJTree: Do not edit this line. CLVFType.java */

package org.jetel.ctl.ASTnode;

import org.jetel.ctl.TransformLangParser;
import org.jetel.ctl.TransformLangParserConstants;
import org.jetel.ctl.TransformLangParserVisitor;

public class CLVFType extends SimpleNode {

	/**
	 * For composite type a name of metadata
	 */
	private String metadataName;
	/** Type kind corresponding with parser constant */
	private int kind;
	
	public CLVFType(int id) {
		super(id);
	}

	public CLVFType(TransformLangParser p, int id) {
		super(p, id);
	}

	public CLVFType(CLVFType node) {
		super(node);
		this.metadataName = node.metadataName;
		this.kind = node.kind;
	}

	/** Accept the visitor. * */
	public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public void setMetadataName(String metadataName) {
		this.metadataName = metadataName;
	}

	public int getKind() {
		return kind;
	}

	public void setKind(int kind) {
		this.kind = kind;
	}

	public String getMetadataName() {
		return metadataName;
	}
	
	@Override
	public String toString() {
		return super.toString() + " type " + TransformLangParserConstants.tokenImage[kind];
	}
	
	@Override
	public SimpleNode duplicate() {
		return new CLVFType(this);
	}

}

