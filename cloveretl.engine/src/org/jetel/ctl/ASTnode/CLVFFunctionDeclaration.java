/* Generated By:JJTree: Do not edit this line. CLVFFunctionDeclaration.java */

package org.jetel.ctl.ASTnode;

import org.jetel.ctl.ExpParser;
import org.jetel.ctl.TransformLangParserVisitor;
import org.jetel.ctl.data.Scope;
import org.jetel.ctl.data.TLType;

public class CLVFFunctionDeclaration extends SimpleNode {

	public String name;
	private TLType[] formalParams;
	private Scope scope;
	
	
	public CLVFFunctionDeclaration(int id) {
		super(id);
	}

	public CLVFFunctionDeclaration(ExpParser p, int id) {
		super(p, id);
	}

	public CLVFFunctionDeclaration(CLVFFunctionDeclaration node) {
		super(node);
		this.name = node.name;
		if (node.formalParams != null) {
			this.formalParams = new TLType[node.formalParams.length];
			System.arraycopy(node.formalParams, 0, this.formalParams, 0, node.formalParams.length);
		}
	}

	/** Accept the visitor. * */
	public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public void setName(String name) {
		this.name = name;
	}

	public String toString() {
		return super.toString() + " '" + name + "'";
	}

	public String getName() {
		return name;
	}

	public void setFormalParameters(TLType[] formalParams) {
		this.formalParams = formalParams;
	}
	
	
	public TLType[] getFormalParameters() {
		return formalParams;
	}
	
	public int getParamCount() {
		if (formalParams == null) {
			return 0;
		}
		
		return formalParams.length;
	}
	
	@Override
	public SimpleNode duplicate() {
		return new CLVFFunctionDeclaration(this);
	}

	public void setScope(Scope currentScope) {
		this.scope = currentScope;
	}
	
	public Scope getScope() {
		return this.scope;
	}
	
	public String toHeaderString() {
		final StringBuilder buf = new StringBuilder();
		buf.append(getType() == null ? "null" : getType().toString()).append(" ");
		buf.append(name == null ? "null" : name).append("(");
		if (formalParams == null) {
			buf.append("null");
		} else {
			for (TLType f : formalParams) {
				if (f != formalParams[0]) {
					buf.append(",").append(f.name());
				} else {
					buf.append(f.name());
				}
			}
		}
		buf.append(")");
		return buf.toString();
		
	}
	
}
