/* Generated By:JJTree&JavaCC: Do not edit this line. FilterExpParserTokenManager.java */
package org.jetel.interpreter;
import org.jetel.data.DataRecord;

public class FilterExpParserTokenManager implements FilterExpParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc00000L) != 0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 62:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 144;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 7:
                  if (curChar == 38 && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 33 && kind > 8)
                     kind = 8;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(15, 17);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 24);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 40:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 41:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 62 && kind > 21)
                     kind = 21;
                  break;
               case 43:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar != 46)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(22, 24);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(22, 24);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(53, 21);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(57, 21);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 60:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 21);
                  break;
               case 62:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(12, 14);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(64, 15);
                  break;
               case 65:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(65, 15);
                  break;
               case 67:
                  if (curChar == 34)
                     jjCheckNAddStates(28, 30);
                  break;
               case 68:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 70:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 71:
                  if (curChar == 34)
                     jjAddStates(31, 32);
                  break;
               case 72:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (curChar == 34)
                     jjCheckNAddStates(33, 35);
                  break;
               case 74:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 76:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 77:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 78:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 79:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 82:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 83:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 84:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 86:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(44, 47);
                  break;
               case 89:
                  if (curChar == 44)
                     jjAddStates(48, 49);
                  break;
               case 90:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 53);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(50, 53);
                  break;
               case 93:
                  if (curChar == 48)
                     jjCheckNAddStates(54, 58);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 96:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 97:
                  if (curChar == 46)
                     jjCheckNAdd(98);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 71);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(72, 75);
                  break;
               case 103:
                  if (curChar == 44)
                     jjAddStates(76, 77);
                  break;
               case 104:
                  if (curChar == 46)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(78, 82);
                  break;
               case 107:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(108);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(83, 86);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(87, 93);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 112:
                  if (curChar == 46)
                     jjCheckNAddStates(94, 98);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(94, 98);
                  break;
               case 115:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(99, 102);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 119:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(103, 106);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               case 123:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 102);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(110, 116);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 127:
                  if (curChar == 46)
                     jjCheckNAddStates(117, 121);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(117, 121);
                  break;
               case 130:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(131);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(122, 125);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 134:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(135);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(126, 129);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(130, 132);
                  break;
               case 138:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(139);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 102);
                  break;
               case 140:
                  if (curChar == 48)
                     jjCheckNAddStates(133, 137);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               case 143:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(142, 145);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 91)
                     jjAddStates(146, 150);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x4000000040000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 124 && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x1000000010L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x10000000100000L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(151, 152);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(153, 155);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(156, 158);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(46);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(159, 160);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(161, 162);
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(163, 164);
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddTwoStates(64, 15);
                  break;
               case 66:
                  if (curChar == 91)
                     jjAddStates(146, 150);
                  break;
               case 68:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 69:
                  if (curChar == 92)
                     jjAddStates(165, 167);
                  break;
               case 70:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 74:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 75:
                  if (curChar == 92)
                     jjAddStates(168, 170);
                  break;
               case 76:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 81:
                  if (curChar == 93 && kind > 17)
                     kind = 17;
                  break;
               case 88:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 92);
                  break;
               case 92:
                  if (curChar == 93 && kind > 18)
                     kind = 18;
                  break;
               case 94:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(95);
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(171, 172);
                  break;
               case 102:
                  if ((0x5000000050L & l) != 0L)
                     jjAddStates(173, 174);
                  break;
               case 106:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(175, 176);
                  break;
               case 109:
                  if (curChar == 93 && kind > 19)
                     kind = 19;
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(177, 178);
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(179, 180);
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(181, 182);
                  break;
               case 129:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(183, 184);
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(185, 186);
                  break;
               case 137:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(187, 188);
                  break;
               case 141:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(142);
                  break;
               case 142:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(138, 141);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 74:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 144 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   48, 49, 54, 55, 58, 59, 21, 32, 33, 35, 23, 25, 63, 65, 15, 17, 
   18, 21, 32, 33, 37, 35, 50, 51, 21, 58, 59, 21, 68, 69, 71, 72, 
   81, 74, 75, 71, 74, 75, 78, 71, 68, 69, 83, 71, 87, 88, 89, 92, 
   90, 93, 89, 91, 88, 92, 89, 94, 96, 88, 92, 89, 95, 88, 92, 89, 
   96, 88, 92, 98, 99, 102, 103, 109, 101, 102, 103, 109, 104, 110, 103, 105, 
   106, 102, 109, 103, 108, 102, 109, 111, 112, 117, 118, 121, 122, 102, 103, 113, 
   114, 102, 109, 103, 116, 102, 109, 103, 120, 102, 109, 121, 122, 102, 126, 127, 
   132, 133, 136, 137, 102, 128, 129, 102, 103, 109, 131, 102, 103, 109, 135, 102, 
   103, 109, 136, 137, 102, 141, 143, 88, 89, 92, 142, 88, 89, 92, 143, 88, 
   89, 92, 67, 86, 97, 125, 140, 19, 20, 26, 27, 29, 34, 36, 38, 52, 
   53, 56, 57, 60, 61, 70, 82, 84, 76, 77, 79, 100, 101, 103, 109, 107, 
   108, 115, 116, 119, 120, 123, 124, 130, 131, 134, 135, 138, 139, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\75\75", null, "\74", "\74\75", "\76", 
"\76\75", "\176\75", null, null, "\50", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x77ffa3c1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[144];
private final int[] jjstateSet = new int[288];
protected char curChar;
public FilterExpParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public FilterExpParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 144; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
