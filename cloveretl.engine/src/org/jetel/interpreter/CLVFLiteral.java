/* Generated By:JJTree: Do not edit this line. CLVFLiteral.java */

package org.jetel.interpreter;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import org.jetel.data.Defaults;

public class CLVFLiteral extends SimpleNode implements FilterExpParserConstants {
	
	String valueImage; 
	Object value;
	int literalType;
	
	public CLVFLiteral(int id) {
		super(id);
	}
	
	public CLVFLiteral(FilterExpParser p, int id) {
	    super(p, id);
	  }
	
	/** Accept the visitor. **/
	public Object jjtAccept(FilterExpParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	
	public void init() throws org.jetel.interpreter.InterpreterRuntimeException {
		try{
			switch(literalType){
			case FLOATING_POINT_LITERAL:
				value= Double.valueOf(valueImage);
				break;
			case STRING_LITERAL:
				value=valueImage;
				break;
			case INTEGER_LITERAL:
			    // try to parse as INT first, if error then LONG
			    try{
			        value= Integer.valueOf(valueImage);
			    }catch(NumberFormatException ex){
			        value= Long.valueOf(valueImage);
			    }
				break;
			case DATE_LITERAL:
				DateFormat dateFormat=new SimpleDateFormat(Defaults.DEFAULT_DATE_FORMAT);
				value=dateFormat.parse(valueImage); 
				break;
			case DATETIME_LITERAL:
				DateFormat dateFormat2=new SimpleDateFormat(Defaults.DEFAULT_DATETIME_FORMAT);
				value=dateFormat2.parse(valueImage); 		
				break;
				//case BOOLEAN_LITERAL:
				//	value=Boolean.valueOf(valueImage);
				//break;
			default:
				throw new InterpreterRuntimeException(this,new Object[0],"Can't handle datatype "
						+tokenImage[literalType]);
			}
		}catch(java.text.ParseException ex){
		    throw new InterpreterRuntimeException(this,new Object[0],"Parser exception ["+tokenImage[literalType]+"] : Unrecognized value: "+valueImage);
		}catch(Exception ex){
		    throw new InterpreterRuntimeException(this,new Object[0],ex.getClass().getName()+" : ["+tokenImage[literalType]+"] : Unrecognized value: "+valueImage);
		}
	}
	
	void setVal(int literalType, String valueImage){
		this.valueImage=valueImage;
		this.literalType=literalType;
	}
}
