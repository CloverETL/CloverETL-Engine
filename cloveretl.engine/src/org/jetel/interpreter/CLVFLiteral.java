/* Generated By:JJTree: Do not edit this line. CLVFLiteral.java */

package org.jetel.interpreter;

import org.jetel.data.DataField;
import org.jetel.data.DataFieldFactory;
import org.jetel.metadata.DataFieldMetadata;
import org.jetel.data.Defaults;

public class CLVFLiteral extends SimpleNode implements FilterExpParserTreeConstants {

  String valueImage; 
  DataField value;
  
  public CLVFLiteral(int id) {
    super(id);
  }

  public CLVFLiteral(FilterExpParser p, int id) {
    super(p, id);
  }

  
  void init(DataFieldMetadata dataFieldMeta) throws ParseException{
  	switch(dataFieldMeta.getType()){
  		case DataFieldMetadata.NUMERIC_FIELD:
  		case DataFieldMetadata.STRING_FIELD:
  		case DataFieldMetadata.INTEGER_FIELD:
  				value=DataFieldFactory.createDataField(
  		  			new DataFieldMetadata("", dataFieldMeta.getType(), (short)0));
  				value.fromString(valueImage);
  			break;
  		case DataFieldMetadata.DATE_FIELD:
  			// do we have date & time or only date value
  			DataFieldMetadata metadata=new DataFieldMetadata("", dataFieldMeta.getType(), (short)0);
  			if (valueImage.length()>10){
  				metadata.setFormatStr(Defaults.DEFAULT_DATETIME_FORMAT);
  			}else{
  				metadata.setFormatStr(Defaults.DEFAULT_DATE_FORMAT);
  			}
  			value=DataFieldFactory.createDataField(metadata);
  			value.fromString(valueImage);
  			break;
  		default:
  			throw new ParseException("Can't handle datatype of field "+dataFieldMeta.getName());
  	}
  }
  
  void setVal(String valueImage){
  	this.valueImage=valueImage;
  }
  
  public void interpret()
  {
     stack.push(value);
  }
}
