/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParser.java */
package org.jetel.interpreter;

import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.ASTnode.*;
import org.jetel.util.string.StringUtils;
import org.jetel.util.file.FileUtils;
import org.jetel.util.string.CharSequenceReader;
import org.jetel.component.CustomizedRecordTransform;
import org.jetel.component.RecordTransform;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.channels.Channels;
import java.net.MalformedURLException;
import java.net.URL;

public class TransformLangParser extends ExpParser/*@bgen(jjtree)*/implements TransformLangParserTreeConstants, TransformLangParserConstants {/*@bgen(jjtree)*/
  protected JJTTransformLangParserState jjtree = new JJTTransformLangParserState();
           public static final String SRC_ENCODING = "UTF-8";

       DataRecordMetadata[] inRecordsMetadata;
       DataRecordMetadata[] outRecordsMetadata;
       Map inDataRecordsMap;
       Map outDataRecordsMap;
           ParserHelper parserHelper;
       List<Throwable> parseExceptions;
       CustomizedRecordTransform custRecordTransform;
       String sourceFilename;
       boolean hasEvalNode=false;
       URL projectDirURL = null;

       public TransformLangParser(DataRecordMetadata recordMetadata,java.io.InputStream stream){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],stream,SRC_ENCODING);
       }


       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
                                                        DataRecordMetadata[] outRecordsMetadata,
                                                        java.io.InputStream stream){
                        this(inRecordsMetadata,outRecordsMetadata,stream,SRC_ENCODING);

       }

       public TransformLangParser(DataRecordMetadata recordMetadata,CharSequence source){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],source);
       }

           public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
                                                        DataRecordMetadata[] outRecordsMetadata,
                                                        CharSequence source){
                                                        this(new CharSequenceReader(source));
                  parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList<Throwable>();
              for(int i=0;i<inRecordsMetadata.length;i++){
                  if (inRecordsMetadata[i] != null)
                          inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
                  if (outRecordsMetadata[i] != null)
                          outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }

       }


       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
                                                        DataRecordMetadata[] outRecordsMetadata,
                                                        java.io.InputStream stream,String encoding){
              this(stream,encoding);
              parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList<Throwable>();
              for(int i=0;i<inRecordsMetadata.length;i++){
                  if (inRecordsMetadata[i] != null)
                          inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
                  if (outRecordsMetadata[i] != null)
                          outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }
      }

      public TransformLangParser(TransformLangParser parent,String filename,java.io.InputStream stream){
                          this(stream);
                          this.sourceFilename=filename;
                          this.parserHelper=parent.parserHelper;
              this.inRecordsMetadata=parent.inRecordsMetadata;
              this.outRecordsMetadata=parent.outRecordsMetadata;
              this.inDataRecordsMap=parent.inDataRecordsMap;
              this.outDataRecordsMap=parent.outDataRecordsMap;
              this.parseExceptions=parent.parseExceptions;
      }

         public TransformLangParser(TransformLangParser parent,String sourcename,CharSequence source){
                          this(new CharSequenceReader(source));
                          this.sourceFilename=sourcename;
                          this.parserHelper=parent.parserHelper;
              this.inRecordsMetadata=parent.inRecordsMetadata;
              this.outRecordsMetadata=parent.outRecordsMetadata;
              this.inDataRecordsMap=parent.inDataRecordsMap;
              this.outDataRecordsMap=parent.outDataRecordsMap;
              this.parseExceptions=parent.parseExceptions;
      }

      public void ReInit(CharSequence source, boolean reset){
        if (reset){
                this.parserHelper.reset();
        }
        this.parseExceptions.clear();
        this.ReInit(new CharSequenceReader(source));
      }

      public void setTabSize(int size){
                this.token_source.input_stream.setTabSize(size);
      }

      /** 
      	* Sets project root directory from where relative paths will be resolved
      	* in import statements. This should be in common cases PROJECT_DIR definition
      	* from workspace.prm
      	*
      	* If set to null or invalid URL, relative paths will be resolved from working directory
      	* where java is running.
      	*/
      @Deprecated
      public void setProjectDir(String projectDir) {
                try {
                        this.projectDirURL = StringUtils.isEmpty(projectDir)
                                                                ? null
                                                                : FileUtils.getFileURL(projectDir);
                } catch (MalformedURLException e) {
                        // nowhere to report unfortunately...
                        this.projectDirURL = null;
                }
      }

      /**
        * Sets project root directory from where relative paths will be resolved
        * in import statements. This should be in common cases PROJECT_DIR definition
        * from workspace.prm
        * 
        * @param projectURL
      */
      public void setProjectURL(URL projectURL) {
        this.projectDirURL = projectURL;
      }

      @Override
	public final DataRecordMetadata getInRecordMeta(){
          if (inRecordsMetadata.length>0)
              return inRecordsMetadata[0];
          else
                  return null;
      }

      @Override
	public final int getInRecordNum(String name){
        try{
             return ((Integer)inDataRecordsMap.get(name)).intValue() ;
        }catch(Exception ex){
                return -1;
        }
      }

      @Override
	public final int getOutRecordNum(String name){
        try{
             return ((Integer)outDataRecordsMap.get(name)).intValue() ;
        }catch(Exception ex){
                return -1;
        }
      }

      @Override
	public final DataRecordMetadata getInRecordMeta(int num){
        try{
             return inRecordsMetadata[num];
        }catch(Exception ex){
                return null;
        }
      }

      @Override
	public final DataRecordMetadata getOutRecordMeta(int num){
        try{
             return outRecordsMetadata[num];
        }catch(Exception ex){
                return null;
        }
      }

       @Override
	public final DataRecordMetadata[] getInRecordMetadata(){
             return inRecordsMetadata;
      }

      @Override
	public final DataRecordMetadata[] getOutRecordMetadata(){
             return outRecordsMetadata;
      }


     /**
      *  Returns map of function symbols where
      *  under function name is saved reference to appropriate 
      *  function definition/declaration node - upon that node
      *  visit() method of TransformationLangExecutor can be called to
      *  execute function's body. 
      */

      @Override
	public final Map getFunctions(){
        return parserHelper.functionSymbol;
    }

     public final CLVFFunctionDeclaration getFunction(String name){
        return (CLVFFunctionDeclaration) parserHelper.functionSymbol.get(name);
     }


     public CustomizedRecordTransform getCustRecordTransform() {
                if (custRecordTransform==null)
                        custRecordTransform=new CustomizedRecordTransform(null);
                return custRecordTransform;
        }

     /**
      *  Returns map of global variable symbols where
      *  under variable name is saved appropriate slot in 
      *  which variable's value is saved. 
      */
      public final Map getGlobalVariables(){
        return parserHelper.globalVariableSymbol;
     }

     public final int getGlobalVariableSlot(String name){
        return parserHelper.getGlobalVariableSlot(name);
     }

     public static final String unquote(String image){
        return image.substring(1,image.length()-1);
     }

   /**
    * Save the current line number for run-time error messages
    */
   void jjtreeOpenNodeScope(Node n)
    {
       Token t = getToken(0);
       if (t!= null) {
           ((SimpleNode) n).setLineNumber(t.beginLine);
           ((SimpleNode) n).setColumnNumber(t.beginColumn);
       }
       ((SimpleNode) n).setSourceFilename(sourceFilename);
    }

   /**
    * Dummy routine, required because NODE_SCOPE_HOOK is true
    */
    void jjtreeCloseNodeScope(Node n)
    {
    }

    public List<Throwable> getParseExceptions(){
        return parseExceptions;
    }

    /**
     * Does the parsed AST tree contain any "eval" node ?
     * If so, executor will need reference to parser to process such
     * nodes
     *
     */

    public boolean hasEvalNode(){
        return hasEvalNode;
    }

/* 
 *  The start nonterminal and its productions. 
 *  Nonterminal & productions for transformation language
 */
  final public CLVFStart Start() throws ParseException {
                     /*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      CompilationUnit();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
        if (parseExceptions.size()>0){
                {if (true) throw (ParseException)parseExceptions.get(0);}
        }
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* 
 *  The start expression nonterminal and its productions. 
 *  Nonterminal & productions for expressions only
 */
  final public CLVFStartExpression StartExpression() throws ParseException {
                                         /*@bgen(jjtree) StartExpression */
  CLVFStartExpression jjtn000 = new CLVFStartExpression(this, JJTSTARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                if (parseExceptions.size()>0){
                        {if (true) throw (ParseException)parseExceptions.get(0);}
                }
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CompilationUnit() throws ParseException {
   String name;
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ImportSource();
      jj_consume_token(SEMICOLON);
    }
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:
      case BLOCK_START:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
      case BREAK:
      case CONTINUE:
      case FOR:
      case FOR_EACH:
      case FUNCTION:
      case IF:
      case RETURN:
      case WHILE:
      case SWITCH:
      case DO:
      case TRY:
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch (jj_nt.kind) {
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
        VarDeclaration();
        jj_consume_token(SEMICOLON);
        break;
      case SEMICOLON:
      case BLOCK_START:
      case BREAK:
      case CONTINUE:
      case FOR:
      case FOR_EACH:
      case IF:
      case RETURN:
      case WHILE:
      case SWITCH:
      case DO:
      case TRY:
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        Statement();
        break;
      case FUNCTION:
        FunctionDeclaration();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_WILDCARD:
      case REC_NAME_WILDCARD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Mapping();
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(0);
  }

  final public void ImportSource() throws ParseException {
 /*@bgen(jjtree) ImportSource */
        CLVFImportSource jjtn000 = new CLVFImportSource(this, JJTIMPORTSOURCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
        String filenameURL;
    try {
      jj_consume_token(IMPORT);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                        filenameURL=unquote(t.image);
        break;
      case STRING_PLAIN_LITERAL:
        t = jj_consume_token(STRING_PLAIN_LITERAL);
                                                             filenameURL=t.image;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                // save line number - as openNodeScope hook does not work reliably
                jjtn000.setLineNumber(t.beginLine);
                InputStream stream;
                jjtn000.setSourceToImport(filenameURL);
                try{
                        stream=Channels.newInputStream(FileUtils.getReadableChannel(projectDirURL, filenameURL));
                        // stream=new BufferedInputStream(new FileInputStream(filenameURL));
                }catch(Exception ex){
                        {if (true) throw new ParseException(t,"can't open import file \u005c""+filenameURL+"\u005c"",ex);}
                }
                CLVFStart parseTree;
                try{
                        TransformLangParser parser = new TransformLangParser(this,filenameURL,stream);
                        parseTree = parser.Start();
                }catch(ParseException e){
                        e.setFilename(filenameURL);
                        {if (true) throw e;}
                        //new ParseException(t,"error when parsing import file \""+filenameURL+"\"",e);
                }
                jjtn000.jjtAddChild(parseTree, 0);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
        CLVFFunctionDeclaration jjtn000 = new CLVFFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t,r;
        int order=0;
    try {
      jj_consume_token(FUNCTION);
      t = jj_consume_token(IDENTIFIER);
                jjtn000.setName(t.image);
                if (parserHelper.functionSymbol.put(t.image,jjtn000)!=null){
                         {if (true) throw new ParseException(t,"function "+t.image+" already declared");}
                        }
                parserHelper.enteredFunctionDeclaration(t.image);
                // save line number - as openNodeScope hook does not work reliably
                jjtn000.setLineNumber(t.beginLine);
      jj_consume_token(OPEN_PAR);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                           jjtn000.addVarName(order++, t.image);
                                                        if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
                                                          {if (true) throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
                                                          +parserHelper.functionName);}
                                                        }
        label_4:
        while (true) {
          switch (jj_nt.kind) {
          case 109:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          jj_consume_token(109);
          t = jj_consume_token(IDENTIFIER);
                                             jjtn000.addVarName(order++,t.image);
                                                        if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
                                                          {if (true) throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
                                                          +parserHelper.functionName);}
                                                        }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(BLOCK_START);
      label_5:
      while (true) {
        switch (jj_nt.kind) {
        case INT_VAR:
        case LONG_VAR:
        case DATE_VAR:
        case DOUBLE_VAR:
        case DECIMAL_VAR:
        case BOOLEAN_VAR:
        case STRING_VAR:
        case BYTE_VAR:
        case LIST_VAR:
        case MAP_VAR:
        case RECORD_VAR:
        case OBJECT_VAR:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        VarDeclaration();
        jj_consume_token(SEMICOLON);
      }
      label_6:
      while (true) {
        switch (jj_nt.kind) {
        case SEMICOLON:
        case BLOCK_START:
        case BREAK:
        case CONTINUE:
        case FOR:
        case FOR_EACH:
        case IF:
        case RETURN:
        case WHILE:
        case SWITCH:
        case DO:
        case TRY:
        case READ_DICT:
        case WRITE_DICT:
        case DELETE_DICT:
        case IDENTIFIER:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 129:
        case 131:
        case 132:
        case 133:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        Statement();
      }
      switch (jj_nt.kind) {
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_WILDCARD:
      case REC_NAME_WILDCARD:
        label_7:
        while (true) {
          Mapping();
          jj_consume_token(SEMICOLON);
          switch (jj_nt.kind) {
          case FIELD_ID:
          case REC_NAME_FIELD_ID:
          case REC_NAME_FIELD_NUM:
          case REC_NUM_FIELD_ID:
          case REC_NUM_FIELD_NUM:
          case REC_NUM_WILDCARD:
          case REC_NAME_WILDCARD:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
        }
        switch (jj_nt.kind) {
        case RETURN:
          ReturnStatement();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(BLOCK_END);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                parserHelper.exitedFunctionDeclaration();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/*
 JAVACODE
    void FuncDeclarationExit() #void {
	
	  parserHelper.exitedFunctionDeclaration();	
    }
*/
  final public void VarDeclaration() throws ParseException {
 /*@bgen(jjtree) VarDeclaration */
  CLVFVarDeclaration jjtn000 = new CLVFVarDeclaration(this, JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t,l,p;
  int varSlot;
    try {
      switch (jj_nt.kind) {
      case INT_VAR:
        jj_consume_token(INT_VAR);
        break;
      case LONG_VAR:
        jj_consume_token(LONG_VAR);
        break;
      case DOUBLE_VAR:
        jj_consume_token(DOUBLE_VAR);
        break;
      case DECIMAL_VAR:
        jj_consume_token(DECIMAL_VAR);
        break;
      case STRING_VAR:
        jj_consume_token(STRING_VAR);
        break;
      case DATE_VAR:
        jj_consume_token(DATE_VAR);
        break;
      case BYTE_VAR:
        jj_consume_token(BYTE_VAR);
        break;
      case BOOLEAN_VAR:
        jj_consume_token(BOOLEAN_VAR);
        break;
      case LIST_VAR:
        jj_consume_token(LIST_VAR);
        break;
      case MAP_VAR:
        jj_consume_token(MAP_VAR);
        break;
      case OBJECT_VAR:
        jj_consume_token(OBJECT_VAR);
        break;
      case RECORD_VAR:
        jj_consume_token(RECORD_VAR);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtn000.setType(getToken(0).kind);
        // set line number as the openNodeScope hook does not work reliably for this
        jjtn000.setLineNumber(getToken(0).beginLine);
      switch (jj_nt.kind) {
      case OPEN_PAR:
        jj_consume_token(OPEN_PAR);
        VarSpec(jjtn000);
        jj_consume_token(CLOSE_PAR);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
      if (!parserHelper.addVariable(t.image,jjtn000.getType())){
        {if (true) throw new ParseException(t, "variable ["+t.image+"] already declared");}
      }
      else {
        // is it local variable declaration ?

                if (parserHelper.inFunctionDeclaration){
          jjtn000.setVarSlot(parserHelper.getLocalVariableSlot(t.image));
          jjtn000.setLocalVariale(true);
        }
        else {
          jjtn000.setVarSlot(parserHelper.getGlobalVariableSlot(t.image));
          jjtn000.setLocalVariale(false);
        }
        jjtn000.setName(t.image);
      }
      switch (jj_nt.kind) {
      case 110:
        jj_consume_token(110);
        ConditionalOrExpression();
                                    jjtn000.hasInitValue(true);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void VarSpec(CLVFVarDeclaration node) throws ParseException {
        Token l,p;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      l = jj_consume_token(IDENTIFIER);
                           node.setMetadataId(l.image);
      break;
    case INTEGER_LITERAL:
      l = jj_consume_token(INTEGER_LITERAL);
                              node.setLength(l.image);
      switch (jj_nt.kind) {
      case 109:
        jj_consume_token(109);
        p = jj_consume_token(INTEGER_LITERAL);
                                                                                     node.setPrecision(p.image);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case REC_NUM_ID:
      l = jj_consume_token(REC_NUM_ID);
                           node.setRecordNum(l,l.image);
      break;
    case REC_NAME_ID:
      l = jj_consume_token(REC_NAME_ID);
                           node.setRecordName(l,l.image);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expression() throws ParseException {
    if (jj_2_1(2147483647)) {
      Assignment();
    } else {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case UNTERMINATED_STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case PLUS:
      case INCR:
      case DECR:
      case TILDA:
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_ID:
      case REC_NAME_ID:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
      case RETURN_RECORD_SKIP:
      case RETURN_RECORD_SEND_ALL:
      case RETURN_RECORD_OK:
      case RETURN_RECORD_ERROR:
      case YEAR:
      case MONTH:
      case WEEK:
      case DAY:
      case HOUR:
      case MINUTE:
      case SECOND:
      case MILLISEC:
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 112:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        ConditionalOrExpression();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Assignment() throws ParseException {
 /*@bgen(jjtree) Assignment */
  CLVFAssignment jjtn000 = new CLVFAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      VarExp();
      jj_consume_token(110);
      ConditionalOrExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Mapping() throws ParseException {
    switch (jj_nt.kind) {
    case FIELD_ID:
    case REC_NAME_FIELD_ID:
    case REC_NAME_FIELD_NUM:
    case REC_NUM_FIELD_ID:
    case REC_NUM_FIELD_NUM:
      DirectMapping();
      break;
    case REC_NUM_WILDCARD:
    case REC_NAME_WILDCARD:
      WildCardMapping();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DirectMapping() throws ParseException {
 /*@bgen(jjtree) DirectMapping */
  CLVFDirectMapping jjtn000 = new CLVFDirectMapping(this, JJTDIRECTMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t ;
    try {
      try {
        switch (jj_nt.kind) {
        case FIELD_ID:
          t = jj_consume_token(FIELD_ID);
                         jjtn000.setFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform());
          break;
        case REC_NAME_FIELD_ID:
          t = jj_consume_token(REC_NAME_FIELD_ID);
                              jjtn000.setRecordFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform());
          break;
        case REC_NAME_FIELD_NUM:
          t = jj_consume_token(REC_NAME_FIELD_NUM);
                               jjtn000.setRecordNameFieldNum(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform());
          break;
        case REC_NUM_FIELD_ID:
          t = jj_consume_token(REC_NUM_FIELD_ID);
                             jjtn000.setRecordNumFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform());
          break;
        case REC_NUM_FIELD_NUM:
          t = jj_consume_token(REC_NUM_FIELD_NUM);
                              jjtn000.setRecordNumFieldNum(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform());
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException ex) {
                ex.setCurrentToken(getToken(0));
                {if (true) throw ex;}
      }
      jj_consume_token(MAPPING);
      ConditionalOrExpression();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case 111:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        jj_consume_token(111);
        ConditionalOrExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void WildCardMapping() throws ParseException {
 /*@bgen(jjtree) WildCardMapping */
  CLVFWildCardMapping jjtn000 = new CLVFWildCardMapping(this, JJTWILDCARDMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t,r;
    try {
      if (jj_2_2(3)) {
        t = jj_consume_token(REC_NUM_WILDCARD);
        jj_consume_token(MAPPING);
        r = jj_consume_token(REC_NUM_WILDCARD);
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                               jjtreeCloseNodeScope(jjtn000);
                                                              jjtn000.setRule(t.image,r.image,getCustRecordTransform());
      } else {
        switch (jj_nt.kind) {
        case REC_NUM_WILDCARD:
          t = jj_consume_token(REC_NUM_WILDCARD);
          jj_consume_token(MAPPING);
          r = jj_consume_token(REC_NAME_WILDCARD);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtreeCloseNodeScope(jjtn000);
                                                                 jjtn000.setRule(t.image,r.image,getCustRecordTransform());
          break;
        default:
          jj_la1[21] = jj_gen;
          if (jj_2_3(3)) {
            t = jj_consume_token(REC_NAME_WILDCARD);
            jj_consume_token(MAPPING);
            r = jj_consume_token(REC_NUM_WILDCARD);
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                              jjtreeCloseNodeScope(jjtn000);
                                                                             jjtn000.setRule(t.image,r.image,getCustRecordTransform());
          } else {
            switch (jj_nt.kind) {
            case REC_NAME_WILDCARD:
              t = jj_consume_token(REC_NAME_WILDCARD);
              jj_consume_token(MAPPING);
              r = jj_consume_token(REC_NAME_WILDCARD);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                   jjtreeCloseNodeScope(jjtn000);
                                                                  jjtn000.setRule(t.image,r.image,getCustRecordTransform());
              break;
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

/* Other nonterminals and their productions */
  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_9:
    while (true) {
      switch (jj_nt.kind) {
      case OR:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
            }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_10:
    while (true) {
      switch (jj_nt.kind) {
      case AND:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case EQUAL:
      case NON_EQUAL:
      case IN_OPER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      switch (jj_nt.kind) {
      case EQUAL:
        jj_consume_token(EQUAL);
        RelationalExpression();
                                      CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                      jjtreeCloseNodeScope(jjtn001);
                                      jjtn001.cmpType=EQUAL;
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
        }
        break;
      case NON_EQUAL:
        jj_consume_token(NON_EQUAL);
        RelationalExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                          jjtn002.cmpType=NON_EQUAL;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
        }
        break;
      case IN_OPER:
        jj_consume_token(IN_OPER);
        RelationalExpression();
                                        CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                        jjtreeOpenNodeScope(jjtn003);
        try {
                                        jjtree.closeNodeScope(jjtn003,  2);
                                        jjtc003 = false;
                                        jjtreeCloseNodeScope(jjtn003);
                                        jjtn003.cmpType=IN_OPER;
        } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                          jjtreeCloseNodeScope(jjtn003);
                                        }
        }
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_12:
    while (true) {
      switch (jj_nt.kind) {
      case LESS_THAN:
      case LESS_THAN_EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_EQUAL:
      case REGEX_EQUAL:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
      switch (jj_nt.kind) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        AdditiveExpression();
                                       CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
        try {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                       jjtreeCloseNodeScope(jjtn001);
                                       jjtn001.cmpType=LESS_THAN;
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
        }
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        AdditiveExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                          jjtn002.cmpType=GREATER_THAN;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
        }
        break;
      case LESS_THAN_EQUAL:
        jj_consume_token(LESS_THAN_EQUAL);
        AdditiveExpression();
                                             CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                             jjtreeOpenNodeScope(jjtn003);
        try {
                                             jjtree.closeNodeScope(jjtn003,  2);
                                             jjtc003 = false;
                                             jjtreeCloseNodeScope(jjtn003);
                                             jjtn003.cmpType=LESS_THAN_EQUAL;
        } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                               jjtreeCloseNodeScope(jjtn003);
                                             }
        }
        break;
      case GREATER_THAN_EQUAL:
        jj_consume_token(GREATER_THAN_EQUAL);
        AdditiveExpression();
                                                CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
                                                jjtreeOpenNodeScope(jjtn004);
        try {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                                jjtc004 = false;
                                                jjtreeCloseNodeScope(jjtn004);
                                                jjtn004.cmpType=GREATER_THAN_EQUAL;
        } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                  jjtreeCloseNodeScope(jjtn004);
                                                }
        }
        break;
      case REGEX_EQUAL:
        jj_consume_token(REGEX_EQUAL);
        RegexLiteral();
                                        CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                        jjtreeOpenNodeScope(jjtn005);
        try {
                                        jjtree.closeNodeScope(jjtn005,  2);
                                        jjtc005 = false;
                                        jjtreeCloseNodeScope(jjtn005);
                                        jjtn005.cmpType=REGEX_EQUAL;
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                          jjtreeCloseNodeScope(jjtn005);
                                        }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_13:
    while (true) {
      switch (jj_nt.kind) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_13;
      }
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
              CLVFAddNode jjtn001 = new CLVFAddNode(this, JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtreeCloseNodeScope(jjtn001);
              }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
               CLVFSubNode jjtn002 = new CLVFSubNode(this, JJTSUBNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_14:
    while (true) {
      switch (jj_nt.kind) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      switch (jj_nt.kind) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                 CLVFMulNode jjtn001 = new CLVFMulNode(this, JJTMULNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                   jjtreeCloseNodeScope(jjtn001);
                 }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
               CLVFDivNode jjtn002 = new CLVFDivNode(this, JJTDIVNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
        }
        break;
      case MODULO:
        jj_consume_token(MODULO);
               CLVFModNode jjtn003 = new CLVFModNode(this, JJTMODNODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtreeCloseNodeScope(jjtn003);
               }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixOp() throws ParseException {
 /*@bgen(jjtree) Operator */
  CLVFOperator jjtn000 = new CLVFOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setOperator(getToken(0).kind);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void PostfixExpression() throws ParseException {
 /*@bgen(jjtree) #PostfixExpression(> 1) */
 CLVFPostfixExpression jjtn000 = new CLVFPostfixExpression(this, JJTPOSTFIXEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      PrimaryExpression();
      switch (jj_nt.kind) {
      case INCR:
      case DECR:
        PostfixOp();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void UnaryOp() throws ParseException {
 /*@bgen(jjtree) Operator */
  CLVFOperator jjtn000 = new CLVFOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case INCR:
        jj_consume_token(INCR);
        break;
      case DECR:
        jj_consume_token(DECR);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TILDA:
        jj_consume_token(TILDA);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setOperator(getToken(0).kind);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
 /*@bgen(jjtree) #UnaryExpression(> 1) */
  CLVFUnaryExpression jjtn000 = new CLVFUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case UNTERMINATED_STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case STRING_PLAIN_LITERAL:
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_ID:
      case REC_NAME_ID:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
      case RETURN_RECORD_SKIP:
      case RETURN_RECORD_SEND_ALL:
      case RETURN_RECORD_OK:
      case RETURN_RECORD_ERROR:
      case YEAR:
      case MONTH:
      case WEEK:
      case DAY:
      case HOUR:
      case MINUTE:
      case SECOND:
      case MILLISEC:
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 112:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        PostfixExpression();
        break;
      case NOT:
      case MINUS:
      case PLUS:
      case INCR:
      case DECR:
      case TILDA:
        UnaryOp();
        UnaryExpression();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    if (jj_2_4(3)) {
      FunctionCall();
    } else {
      switch (jj_nt.kind) {
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
      case YEAR:
      case MONTH:
      case WEEK:
      case DAY:
      case HOUR:
      case MINUTE:
      case SECOND:
      case MILLISEC:
        SymbolNameExp();
        break;
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case UNTERMINATED_STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case STRING_PLAIN_LITERAL:
      case RETURN_RECORD_SKIP:
      case RETURN_RECORD_SEND_ALL:
      case RETURN_RECORD_OK:
      case RETURN_RECORD_ERROR:
      case 112:
        LitExp();
        break;
      case IDENTIFIER:
        VarExp();
        break;
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_ID:
      case REC_NAME_ID:
        InputFieldExp();
        break;
      case OPEN_PAR:
        jj_consume_token(OPEN_PAR);
        Expression();
        jj_consume_token(CLOSE_PAR);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FunctionCall() throws ParseException {
    switch (jj_nt.kind) {
    case READ_DICT:
    case WRITE_DICT:
    case DELETE_DICT:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 129:
    case 131:
    case 132:
    case 133:
      BuildInFunction();
      break;
    case IDENTIFIER:
      FunctionCallStatement();
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LitExp() throws ParseException {
        Token t;
    switch (jj_nt.kind) {
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtreeCloseNodeScope(jjtn001);
          jjtn001.setVal(FLOATING_POINT_LITERAL,t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    case HEX_LITERAL:
      t = jj_consume_token(HEX_LITERAL);
          CLVFLiteral jjtn002 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtreeCloseNodeScope(jjtn002);
          jjtn002.setVal(HEX_LITERAL,t.image);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
      }
      break;
    case OCTAL_LITERAL:
      t = jj_consume_token(OCTAL_LITERAL);
          CLVFLiteral jjtn003 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
      try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtreeCloseNodeScope(jjtn003);
          jjtn003.setVal(OCTAL_LITERAL,t.image);
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtreeCloseNodeScope(jjtn003);
          }
      }
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
          CLVFLiteral jjtn004 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtreeOpenNodeScope(jjtn004);
      try {
          jjtree.closeNodeScope(jjtn004, true);
          jjtc004 = false;
          jjtreeCloseNodeScope(jjtn004);
          jjtn004.setVal(INTEGER_LITERAL,t.image);
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtreeCloseNodeScope(jjtn004);
          }
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
          CLVFLiteral jjtn005 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtreeOpenNodeScope(jjtn005);
      try {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtreeCloseNodeScope(jjtn005);
          jjtn005.setVal(STRING_LITERAL,StringUtils.stringToSpecChar(unquote(t.image)));
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtreeCloseNodeScope(jjtn005);
          }
      }
      break;
    case STRING_PLAIN_LITERAL:
      t = jj_consume_token(STRING_PLAIN_LITERAL);
          CLVFLiteral jjtn006 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtreeOpenNodeScope(jjtn006);
      try {
          jjtree.closeNodeScope(jjtn006, true);
          jjtc006 = false;
          jjtreeCloseNodeScope(jjtn006);
          jjtn006.setVal(STRING_LITERAL,t.image);
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtreeCloseNodeScope(jjtn006);
          }
      }
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
          CLVFLiteral jjtn007 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtreeOpenNodeScope(jjtn007);
      try {
          jjtree.closeNodeScope(jjtn007, true);
          jjtc007 = false;
          jjtreeCloseNodeScope(jjtn007);
          jjtn007.setVal(BOOLEAN_LITERAL,t.image);
      } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtreeCloseNodeScope(jjtn007);
          }
      }
      break;
    case DATE_LITERAL:
      t = jj_consume_token(DATE_LITERAL);
          CLVFLiteral jjtn008 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtreeOpenNodeScope(jjtn008);
      try {
          jjtree.closeNodeScope(jjtn008, true);
          jjtc008 = false;
          jjtreeCloseNodeScope(jjtn008);
          jjtn008.setVal(DATE_LITERAL,t.image);
      } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtreeCloseNodeScope(jjtn008);
          }
      }
      break;
    case DATETIME_LITERAL:
      t = jj_consume_token(DATETIME_LITERAL);
          CLVFLiteral jjtn009 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
          jjtreeOpenNodeScope(jjtn009);
      try {
          jjtree.closeNodeScope(jjtn009, true);
          jjtc009 = false;
          jjtreeCloseNodeScope(jjtn009);
          jjtn009.setVal(DATETIME_LITERAL,t.image);
      } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
            jjtreeCloseNodeScope(jjtn009);
          }
      }
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
          CLVFLiteral jjtn010 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          jjtreeOpenNodeScope(jjtn010);
      try {
          jjtree.closeNodeScope(jjtn010, true);
          jjtc010 = false;
          jjtreeCloseNodeScope(jjtn010);
          jjtn010.setVal(NULL_LITERAL,t.image);
      } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
            jjtreeCloseNodeScope(jjtn010);
          }
      }
      break;
    case RETURN_RECORD_SEND_ALL:
      t = jj_consume_token(RETURN_RECORD_SEND_ALL);
          CLVFLiteral jjtn011 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          jjtreeOpenNodeScope(jjtn011);
      try {
          jjtree.closeNodeScope(jjtn011, true);
          jjtc011 = false;
          jjtreeCloseNodeScope(jjtn011);
          jjtn011.setConstant(RecordTransform.ALL);
      } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, true);
            jjtreeCloseNodeScope(jjtn011);
          }
      }
      break;
    case RETURN_RECORD_SKIP:
      t = jj_consume_token(RETURN_RECORD_SKIP);
          CLVFLiteral jjtn012 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
          jjtreeOpenNodeScope(jjtn012);
      try {
          jjtree.closeNodeScope(jjtn012, true);
          jjtc012 = false;
          jjtreeCloseNodeScope(jjtn012);
          jjtn012.setConstant(RecordTransform.SKIP);
      } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
            jjtreeCloseNodeScope(jjtn012);
          }
      }
      break;
    case RETURN_RECORD_OK:
      t = jj_consume_token(RETURN_RECORD_OK);
          CLVFLiteral jjtn013 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc013 = true;
          jjtree.openNodeScope(jjtn013);
          jjtreeOpenNodeScope(jjtn013);
      try {
          jjtree.closeNodeScope(jjtn013, true);
          jjtc013 = false;
          jjtreeCloseNodeScope(jjtn013);
          jjtn013.setConstant(RecordTransform.OK);
      } finally {
          if (jjtc013) {
            jjtree.closeNodeScope(jjtn013, true);
            jjtreeCloseNodeScope(jjtn013);
          }
      }
      break;
    case RETURN_RECORD_ERROR:
      t = jj_consume_token(RETURN_RECORD_ERROR);
          CLVFLiteral jjtn014 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc014 = true;
          jjtree.openNodeScope(jjtn014);
          jjtreeOpenNodeScope(jjtn014);
      try {
          jjtree.closeNodeScope(jjtn014, true);
          jjtc014 = false;
          jjtreeCloseNodeScope(jjtn014);
          jjtn014.setConstant(RecordTransform.ERROR);
      } finally {
          if (jjtc014) {
            jjtree.closeNodeScope(jjtn014, true);
            jjtreeCloseNodeScope(jjtn014);
          }
      }
      break;
    case 112:
      ListOfLiterals();
      break;
    case UNTERMINATED_STRING_LITERAL:
      t = jj_consume_token(UNTERMINATED_STRING_LITERAL);
       {if (true) throw new ParseException(t,"unterminated string literal (starts at line "+t.beginLine+", column "+t.beginColumn+")");}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListOfLiterals() throws ParseException {
 /*@bgen(jjtree) ListOfLiterals */
        CLVFListOfLiterals jjtn000 = new CLVFListOfLiterals(this, JJTLISTOFLITERALS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);boolean negative = false;
        CLVFLiteral lit = null;
    try {
      jj_consume_token(112);
      switch (jj_nt.kind) {
      case MINUS:
        jj_consume_token(MINUS);
                        negative = true;
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      LitExp();
                        lit = (CLVFLiteral)jjtree.peekNode();
                        lit.setNegative(negative);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case 109:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_15;
        }
        jj_consume_token(109);
        switch (jj_nt.kind) {
        case MINUS:
          jj_consume_token(MINUS);
                              negative = true;
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        LitExp();
                        lit = (CLVFLiteral)jjtree.peekNode();
                        lit.setNegative(negative);
      }
      jj_consume_token(113);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void InputFieldExp() throws ParseException {
 /*@bgen(jjtree) InputFieldLiteral */
  CLVFInputFieldLiteral jjtn000 = new CLVFInputFieldLiteral(this, JJTINPUTFIELDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case FIELD_ID:
        t = jj_consume_token(FIELD_ID);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                   jjtn000.setFieldName(t,t.image);
        break;
      case REC_NAME_FIELD_ID:
        t = jj_consume_token(REC_NAME_FIELD_ID);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtreeCloseNodeScope(jjtn000);
                              jjtn000.setRecordFieldName(t,t.image);
        break;
      case REC_NUM_FIELD_ID:
        t = jj_consume_token(REC_NUM_FIELD_ID);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtreeCloseNodeScope(jjtn000);
                             jjtn000.setRecordNumFieldName(t,t.image);
        break;
      case REC_NUM_FIELD_NUM:
        t = jj_consume_token(REC_NUM_FIELD_NUM);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtreeCloseNodeScope(jjtn000);
                              jjtn000.setRecordNumFieldNum(t,t.image);
        break;
      case REC_NAME_FIELD_NUM:
        t = jj_consume_token(REC_NAME_FIELD_NUM);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                               jjtn000.setRecordNameFieldNum(t,t.image);
        break;
      case REC_NAME_ID:
        t = jj_consume_token(REC_NAME_ID);
        switch (jj_nt.kind) {
        case 112:
          jj_consume_token(112);
          AdditiveExpression();
          jj_consume_token(113);
                                                     jjtn000.indexSet=true;
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtreeCloseNodeScope(jjtn000);
                                                                                 jjtn000.setRecordName(t,t.image);
        break;
      case REC_NUM_ID:
        t = jj_consume_token(REC_NUM_ID);
        switch (jj_nt.kind) {
        case 112:
          jj_consume_token(112);
          AdditiveExpression();
          jj_consume_token(113);
                                                    jjtn000.indexSet=true;
          break;
        default:
          jj_la1[44] = jj_gen;
          ;
        }
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                                jjtreeCloseNodeScope(jjtn000);
                                                                                jjtn000.setRecordNum(t,t.image);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
void OutputFieldExp() #void :// IDExp -> ID
{
  Token t;
}
{
  t = <FIELD_ID> { jjtThis.setFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); } #OutputFieldLiteral
}
*/
  final public void VarExp() throws ParseException {
 /*@bgen(jjtree) VariableLiteral */
        CLVFVariableLiteral jjtn000 = new CLVFVariableLiteral(this, JJTVARIABLELITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t,u;
        int varSlot;
        int varType=0;
    try {
      try {
        // primitive type
          t = jj_consume_token(IDENTIFIER);
                // first, look for local var reference
                if (parserHelper.inFunctionDeclaration &&
                                (varSlot=parserHelper.getLocalVariableSlot(t.image))>=0){
                        jjtn000.setLocalVariale(true);
                        varType=parserHelper.getLocalVariableType(t.image);
                }else{
                if ((varSlot=parserHelper.getGlobalVariableSlot(t.image))<0){
                                {if (true) throw new ParseException(t,"variable ["+t.image+"] is not declared");}
                }
                jjtn000.setLocalVariale(false);
                varType=parserHelper.getGlobalVariableType(t.image);
                }
        jjtn000.setVarSlot(varSlot);
        jjtn000.setVarName(t.image);
        jjtn000.setVarType(varType);
        switch (jj_nt.kind) {
        case 112:
          jj_consume_token(112);
          switch (jj_nt.kind) {
          case INTEGER_LITERAL:
          case HEX_LITERAL:
          case OCTAL_LITERAL:
          case FLOATING_POINT_LITERAL:
          case STRING_LITERAL:
          case UNTERMINATED_STRING_LITERAL:
          case BOOLEAN_LITERAL:
          case DATE_LITERAL:
          case DATETIME_LITERAL:
          case NULL_LITERAL:
          case STRING_PLAIN_LITERAL:
          case NOT:
          case MINUS:
          case PLUS:
          case INCR:
          case DECR:
          case TILDA:
          case FIELD_ID:
          case REC_NAME_FIELD_ID:
          case REC_NAME_FIELD_NUM:
          case REC_NUM_FIELD_ID:
          case REC_NUM_FIELD_NUM:
          case REC_NUM_ID:
          case REC_NAME_ID:
          case OPEN_PAR:
          case INT_VAR:
          case LONG_VAR:
          case DATE_VAR:
          case DOUBLE_VAR:
          case DECIMAL_VAR:
          case BOOLEAN_VAR:
          case STRING_VAR:
          case BYTE_VAR:
          case LIST_VAR:
          case MAP_VAR:
          case RECORD_VAR:
          case OBJECT_VAR:
          case RETURN_RECORD_SKIP:
          case RETURN_RECORD_SEND_ALL:
          case RETURN_RECORD_OK:
          case RETURN_RECORD_ERROR:
          case YEAR:
          case MONTH:
          case WEEK:
          case DAY:
          case HOUR:
          case MINUTE:
          case SECOND:
          case MILLISEC:
          case READ_DICT:
          case WRITE_DICT:
          case DELETE_DICT:
          case IDENTIFIER:
          case 112:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 129:
          case 131:
          case 132:
          case 133:
            AdditiveExpression();
                                                        jjtn000.indexSet=true;
            break;
          default:
            jj_la1[46] = jj_gen;
            ;
          }
          jj_consume_token(113);
                     jjtn000.scalarContext=true;
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                parseExceptions.add(e);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void RegexLiteral() throws ParseException {
 /*@bgen(jjtree) RegexLiteral */
        CLVFRegexLiteral jjtn000 = new CLVFRegexLiteral(this, JJTREGEXLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtreeCloseNodeScope(jjtn000);
                       jjtn000.setRegex(unquote(t.image));
        break;
      case STRING_PLAIN_LITERAL:
        t = jj_consume_token(STRING_PLAIN_LITERAL);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtreeCloseNodeScope(jjtn000);
                              jjtn000.setRegex(t.image);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SymbolNameExp() throws ParseException {
 /*@bgen(jjtree) SymbolNameExp */
  CLVFSymbolNameExp jjtn000 = new CLVFSymbolNameExp(this, JJTSYMBOLNAMEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case INT_VAR:
        jj_consume_token(INT_VAR);
        break;
      case LONG_VAR:
        jj_consume_token(LONG_VAR);
        break;
      case DATE_VAR:
        jj_consume_token(DATE_VAR);
        break;
      case DOUBLE_VAR:
        jj_consume_token(DOUBLE_VAR);
        break;
      case DECIMAL_VAR:
        jj_consume_token(DECIMAL_VAR);
        break;
      case BOOLEAN_VAR:
        jj_consume_token(BOOLEAN_VAR);
        break;
      case STRING_VAR:
        jj_consume_token(STRING_VAR);
        break;
      case BYTE_VAR:
        jj_consume_token(BYTE_VAR);
        break;
      case LIST_VAR:
        jj_consume_token(LIST_VAR);
        break;
      case MAP_VAR:
        jj_consume_token(MAP_VAR);
        break;
      case RECORD_VAR:
        jj_consume_token(RECORD_VAR);
        break;
      case OBJECT_VAR:
        jj_consume_token(OBJECT_VAR);
        break;
      case YEAR:
        jj_consume_token(YEAR);
        break;
      case MONTH:
        jj_consume_token(MONTH);
        break;
      case WEEK:
        jj_consume_token(WEEK);
        break;
      case DAY:
        jj_consume_token(DAY);
        break;
      case HOUR:
        jj_consume_token(HOUR);
        break;
      case MINUTE:
        jj_consume_token(MINUTE);
        break;
      case SECOND:
        jj_consume_token(SECOND);
        break;
      case MILLISEC:
        jj_consume_token(MILLISEC);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                jjtn000.setType(getToken(0).kind);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
  Token t;
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case BLOCK_START:
      Block();
      break;
    case IF:
      IfStatement();
      break;
    case SWITCH:
      SwitchStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case FOR_EACH:
      ForeachStatement();
      break;
    case DO:
      DoStatement();
      break;
    case TRY:
      TryCatchStatement();
      break;
    case BREAK:
      BreakStatement();
      break;
    case CONTINUE:
      ContinueStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case READ_DICT:
    case WRITE_DICT:
    case DELETE_DICT:
    case IDENTIFIER:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 129:
    case 131:
    case 132:
    case 133:
      StatementExpression();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*
* void LabeledStatement() #void :
* {}
*  {
*    <IDENTIFIER> ":" Statement()
*  }
*/
  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  CLVFBlock jjtn000 = new CLVFBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BLOCK_START);
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case SEMICOLON:
        case BLOCK_START:
        case BREAK:
        case CONTINUE:
        case FOR:
        case FOR_EACH:
        case IF:
        case RETURN:
        case WHILE:
        case SWITCH:
        case DO:
        case TRY:
        case READ_DICT:
        case WRITE_DICT:
        case DELETE_DICT:
        case IDENTIFIER:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 129:
        case 131:
        case 132:
        case 133:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_16;
        }
        Statement();
      }
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void StatementExpression() throws ParseException {
    if (jj_2_5(2147483647)) {
      Assignment();
    } else if (jj_2_6(2)) {
      IncrDecrStatement();
    } else {
      switch (jj_nt.kind) {
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        FunctionCall();
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(SEMICOLON);
  }

  final public void IncrDecrStatement() throws ParseException {
 /*@bgen(jjtree) #IncrDecrStatement(true) */
 CLVFIncrDecrStatement jjtn000 = new CLVFIncrDecrStatement(this, JJTINCRDECRSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      VarExp();
      switch (jj_nt.kind) {
      case INCR:
        t = jj_consume_token(INCR);
        break;
      case DECR:
        t = jj_consume_token(DECR);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtreeCloseNodeScope(jjtn000);
                                          jjtn000.setKind(t.kind);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  CLVFIfStatement jjtn000 = new CLVFIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
      Statement();
      if (jj_2_7(2)) {
        jj_consume_token(ELSE);
        Statement();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  CLVFSwitchStatement jjtn000 = new CLVFSwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(BLOCK_START);
      CaseExpression();
      label_17:
      while (true) {
        switch (jj_nt.kind) {
        case CASE:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_17;
        }
        CaseExpression();
      }
      switch (jj_nt.kind) {
      case CASE_DEFAULT:
        jj_consume_token(CASE_DEFAULT);
        jj_consume_token(111);
        Statement();
                                                         jjtn000.setDefaultClause(true);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(BLOCK_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void CaseExpression() throws ParseException {
 /*@bgen(jjtree) CaseExpression */
  CLVFCaseExpression jjtn000 = new CLVFCaseExpression(this, JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(111);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  CLVFWhileStatement jjtn000 = new CLVFWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  CLVFForStatement jjtn000 = new CLVFForStatement(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(SEMICOLON);
      Expression();
      jj_consume_token(SEMICOLON);
      Expression();
      jj_consume_token(CLOSE_PAR);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ForeachStatement() throws ParseException {
 /*@bgen(jjtree) ForeachStatement */
  CLVFForeachStatement jjtn000 = new CLVFForeachStatement(this, JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR_EACH);
      jj_consume_token(OPEN_PAR);
      VarExp();
      jj_consume_token(111);
      VarExp();
      jj_consume_token(CLOSE_PAR);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) #DoStatement( 2) */
  CLVFDoStatement jjtn000 = new CLVFDoStatement(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(OPEN_PAR);
      Expression();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TryCatchStatement() throws ParseException {
 /*@bgen(jjtree) TryCatchStatement */
  CLVFTryCatchStatement jjtn000 = new CLVFTryCatchStatement(this, JJTTRYCATCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      Statement();
      jj_consume_token(CATCH);
      jj_consume_token(OPEN_PAR);
      switch (jj_nt.kind) {
      case IDENTIFIER:
        VarExp();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  CLVFBreakStatement jjtn000 = new CLVFBreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  CLVFContinueStatement jjtn000 = new CLVFContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
  CLVFReturnStatement jjtn000 = new CLVFReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      if (jj_2_8(2)) {
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
  }

  final public void FunctionCallStatement() throws ParseException {
 /*@bgen(jjtree) FunctionCallStatement */
  CLVFFunctionCallStatement jjtn000 = new CLVFFunctionCallStatement(this, JJTFUNCTIONCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
  CLVFFunctionDeclaration functionNode;
    try {
      t = jj_consume_token(IDENTIFIER);
                jjtn000.setName( t.image);
                // is it already declared function ??
                if ((functionNode=(CLVFFunctionDeclaration)parserHelper.functionSymbol.get(t.image))!=null){
                                        jjtn000.setCallNode(functionNode);
                }else if (parserHelper.isExternalFunction(t.image)){
                                        jjtn000.setExternalFunction(parserHelper.getExternalFunction(t.image));
                }else{
                        {if (true) throw new ParseException(t,"function \u005c""+t.image+"\u005c" not declared");}
                }
      jj_consume_token(OPEN_PAR);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case HEX_LITERAL:
      case OCTAL_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case UNTERMINATED_STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case DATE_LITERAL:
      case DATETIME_LITERAL:
      case NULL_LITERAL:
      case STRING_PLAIN_LITERAL:
      case NOT:
      case MINUS:
      case PLUS:
      case INCR:
      case DECR:
      case TILDA:
      case FIELD_ID:
      case REC_NAME_FIELD_ID:
      case REC_NAME_FIELD_NUM:
      case REC_NUM_FIELD_ID:
      case REC_NUM_FIELD_NUM:
      case REC_NUM_ID:
      case REC_NAME_ID:
      case OPEN_PAR:
      case INT_VAR:
      case LONG_VAR:
      case DATE_VAR:
      case DOUBLE_VAR:
      case DECIMAL_VAR:
      case BOOLEAN_VAR:
      case STRING_VAR:
      case BYTE_VAR:
      case LIST_VAR:
      case MAP_VAR:
      case RECORD_VAR:
      case OBJECT_VAR:
      case RETURN_RECORD_SKIP:
      case RETURN_RECORD_SEND_ALL:
      case RETURN_RECORD_OK:
      case RETURN_RECORD_ERROR:
      case YEAR:
      case MONTH:
      case WEEK:
      case DAY:
      case HOUR:
      case MINUTE:
      case SECOND:
      case MILLISEC:
      case READ_DICT:
      case WRITE_DICT:
      case DELETE_DICT:
      case IDENTIFIER:
      case 112:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 129:
      case 131:
      case 132:
      case 133:
        FunctionCallParameter();
        label_18:
        while (true) {
          switch (jj_nt.kind) {
          case 109:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_18;
          }
          jj_consume_token(109);
          FunctionCallParameter();
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
         // verify number of call parameters
                if (!jjtn000.validateParams()){
                        //System.err.println("wrong #arguments");
                        {if (true) throw new ParseException(t,"wrong number of parameters when calling \u005c""+t.image+"\u005c"");}
                }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void FunctionCallParameter() throws ParseException {
    ConditionalOrExpression();
  }

/* !!!! INTERNAL FUNCTIONS && PROCEDURES START HERE !!!! */
  final public void BuildInFunction() throws ParseException {
    switch (jj_nt.kind) {
    case 114:
      jj_consume_token(114);
      AdditiveExpression();
                                         CLVFIsNullNode jjtn001 = new CLVFIsNullNode(this, JJTISNULLNODE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  1);
                                           jjtreeCloseNodeScope(jjtn001);
                                         }
      }
      break;
    case 115:
      jj_consume_token(115);
      AdditiveExpression();
      jj_consume_token(109);
      AdditiveExpression();
                                                                CLVFNVLNode jjtn002 = new CLVFNVLNode(this, JJTNVLNODE);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                                jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                }
      }
      break;
    case 116:
      jj_consume_token(116);
      AdditiveExpression();
      jj_consume_token(109);
      AdditiveExpression();
      jj_consume_token(109);
      AdditiveExpression();
                                                                                           CLVFNVL2Node jjtn003 = new CLVFNVL2Node(this, JJTNVL2NODE);
                                                                                           boolean jjtc003 = true;
                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                           jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                                           if (jjtc003) {
                                                                                             jjtree.closeNodeScope(jjtn003,  3);
                                                                                             jjtreeCloseNodeScope(jjtn003);
                                                                                           }
      }
      break;
    case 117:
      jj_consume_token(117);
      ConditionalOrExpression();
      jj_consume_token(109);
      AdditiveExpression();
      jj_consume_token(109);
      AdditiveExpression();
                                                                                              CLVFIffNode jjtn004 = new CLVFIffNode(this, JJTIFFNODE);
                                                                                              boolean jjtc004 = true;
                                                                                              jjtree.openNodeScope(jjtn004);
                                                                                              jjtreeOpenNodeScope(jjtn004);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                                              if (jjtc004) {
                                                                                                jjtree.closeNodeScope(jjtn004,  3);
                                                                                                jjtreeCloseNodeScope(jjtn004);
                                                                                              }
      }
      break;
    case 125:
      SequenceNode();
      break;
    case 129:
    case 131:
    case 132:
    case 133:
      LookupNode();
      break;
    case 122:
    case 123:
      EvalNode();
      break;
    case READ_DICT:
    case WRITE_DICT:
    case DELETE_DICT:
      DictionaryNode();
      break;
    case 121:
      PrintErrNode();
      break;
    case 118:
      jj_consume_token(118);
                          CLVFPrintStackNode jjtn005 = new CLVFPrintStackNode(this, JJTPRINTSTACKNODE);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                          jjtreeOpenNodeScope(jjtn005);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  0);
                            jjtreeCloseNodeScope(jjtn005);
                          }
      }
      break;
    case 119:
      jj_consume_token(119);
                         CLVFBreakpointNode jjtn006 = new CLVFBreakpointNode(this, JJTBREAKPOINTNODE);
                         boolean jjtc006 = true;
                         jjtree.openNodeScope(jjtn006);
                         jjtreeOpenNodeScope(jjtn006);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                         if (jjtc006) {
                           jjtree.closeNodeScope(jjtn006,  0);
                           jjtreeCloseNodeScope(jjtn006);
                         }
      }
      break;
    case 124:
      PrintLogNode();
      break;
    case 120:
      jj_consume_token(120);
      AdditiveExpression();
                                               CLVFRaiseErrorNode jjtn007 = new CLVFRaiseErrorNode(this, JJTRAISEERRORNODE);
                                               boolean jjtc007 = true;
                                               jjtree.openNodeScope(jjtn007);
                                               jjtreeOpenNodeScope(jjtn007);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                               if (jjtc007) {
                                                 jjtree.closeNodeScope(jjtn007,  1);
                                                 jjtreeCloseNodeScope(jjtn007);
                                               }
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrintErrNode() throws ParseException {
 /*@bgen(jjtree) PrintErrNode */
  CLVFPrintErrNode jjtn000 = new CLVFPrintErrNode(this, JJTPRINTERRNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(121);
      AdditiveExpression();
      switch (jj_nt.kind) {
      case 109:
        jj_consume_token(109);
        ConditionalOrExpression();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void EvalNode() throws ParseException {
 /*@bgen(jjtree) EvalNode */
  CLVFEvalNode jjtn000 = new CLVFEvalNode(this, JJTEVALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch (jj_nt.kind) {
      case 122:
        jj_consume_token(122);
        AdditiveExpression();
        switch (jj_nt.kind) {
        case 109:
          jj_consume_token(109);
          AdditiveExpression();
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        jj_consume_token(CLOSE_PAR);
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtreeCloseNodeScope(jjtn000);
                                                                  hasEvalNode=true;  jjtn000.setExpMode(false);
        break;
      case 123:
        jj_consume_token(123);
        AdditiveExpression();
        jj_consume_token(CLOSE_PAR);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            jjtreeCloseNodeScope(jjtn000);
                                            jjtn000.setExpMode(true);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void PrintLogNode() throws ParseException {
 /*@bgen(jjtree) PrintLogNode */
        CLVFPrintLogNode jjtn000 = new CLVFPrintLogNode(this, JJTPRINTLOGNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(124);
      jj_consume_token(IDENTIFIER);
                try{
                        jjtn000.setLevel(getToken(0).image);
                }catch (Exception ex){
                        {if (true) throw new ParseException(getToken(0),ex.getMessage());}
                }
      jj_consume_token(109);
      AdditiveExpression();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void SequenceNode() throws ParseException {
 /*@bgen(jjtree) SequenceNode */
        CLVFSequenceNode jjtn000 = new CLVFSequenceNode(this, JJTSEQUENCENODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(125);
      t = jj_consume_token(IDENTIFIER);
                         jjtn000.setName(t.image);
      switch (jj_nt.kind) {
      case 109:
        jj_consume_token(109);
        switch (jj_nt.kind) {
        case INT_VAR:
          jj_consume_token(INT_VAR);
                       jjtn000.setReturnType(INT_VAR);
          break;
        case LONG_VAR:
          jj_consume_token(LONG_VAR);
                        jjtn000.setReturnType(LONG_VAR);
          break;
        case STRING_VAR:
          jj_consume_token(STRING_VAR);
                         jjtn000.setReturnType(STRING_VAR);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      switch (jj_nt.kind) {
      case 126:
      case 127:
      case 128:
        switch (jj_nt.kind) {
        case 126:
          jj_consume_token(126);
                                  jjtn000.setOperation(0);
          break;
        case 127:
          jj_consume_token(127);
                         jjtn000.setOperation(1);
          break;
        case 128:
          jj_consume_token(128);
                       jjtn000.setOperation(2);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LookupNode() throws ParseException {
 /*@bgen(jjtree) LookupNode */
        CLVFLookupNode jjtn000 = new CLVFLookupNode(this, JJTLOOKUPNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t,k;
    try {
      switch (jj_nt.kind) {
      case 129:
        jj_consume_token(129);
        t = jj_consume_token(IDENTIFIER);
                                 jjtn000.setOperation(0); jjtn000.setLookupName(t.image);
        jj_consume_token(109);
        AdditiveExpression();
        label_19:
        while (true) {
          switch (jj_nt.kind) {
          case 109:
            ;
            break;
          default:
            jj_la1[67] = jj_gen;
            break label_19;
          }
          jj_consume_token(109);
          AdditiveExpression();
        }
        jj_consume_token(CLOSE_PAR);
        switch (jj_nt.kind) {
        case 130:
          jj_consume_token(130);
          k = jj_consume_token(IDENTIFIER);
                                      jjtn000.setLookupField(k.image);
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        break;
      case 131:
        jj_consume_token(131);
        t = jj_consume_token(IDENTIFIER);
                                 jjtn000.setOperation(1); jjtn000.setLookupName(t.image);
        jj_consume_token(CLOSE_PAR);
        switch (jj_nt.kind) {
        case 130:
          jj_consume_token(130);
          k = jj_consume_token(IDENTIFIER);
                                       jjtn000.setLookupField(k.image);
          break;
        default:
          jj_la1[69] = jj_gen;
          ;
        }
        break;
      case 132:
        jj_consume_token(132);
        t = jj_consume_token(IDENTIFIER);
                                 jjtn000.setOperation(2); jjtn000.setLookupName(t.image);
        jj_consume_token(CLOSE_PAR);
        break;
      case 133:
        jj_consume_token(133);
        t = jj_consume_token(IDENTIFIER);
                                 jjtn000.setLookupName(t.image);
        jj_consume_token(109);
        k = jj_consume_token(IDENTIFIER);
                                 if (k.image.equalsIgnoreCase("init"))  jjtn000.setOperation(3); else jjtn000.setOperation(4);
        jj_consume_token(CLOSE_PAR);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void DictionaryNode() throws ParseException {
 /*@bgen(jjtree) DictionaryNode */
        CLVFDictionaryNode jjtn000 = new CLVFDictionaryNode(this, JJTDICTIONARYNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t,name;
    try {
      switch (jj_nt.kind) {
      case READ_DICT:
        jj_consume_token(READ_DICT);
        jj_consume_token(OPEN_PAR);
        Expression();
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                  jjtn000.setOperation(0);
        break;
      case WRITE_DICT:
        jj_consume_token(WRITE_DICT);
        jj_consume_token(OPEN_PAR);
        Expression();
        jj_consume_token(109);
        Expression();
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                  jjtn000.setOperation(1);
        break;
      case DELETE_DICT:
        jj_consume_token(DELETE_DICT);
        jj_consume_token(OPEN_PAR);
        Expression();
        jj_consume_token(CLOSE_PAR);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                  jjtn000.setOperation(2);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(DELETE_DICT)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(STRING_PLAIN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(WRITE_DICT)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(READ_DICT)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(112)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(130)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(133)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(109)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(130)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(132)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(131)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(129)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSE_PAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(126)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(128)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(127)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(112)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(112)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(STRING_VAR)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(LONG_VAR)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(INT_VAR)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(109)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(125)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(REC_NUM_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(REC_NAME_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(REC_NAME_FIELD_NUM)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(REC_NUM_FIELD_NUM)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(REC_NUM_FIELD_ID)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(REC_NAME_FIELD_ID)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(109)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(FIELD_ID)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(124)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(112)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(123)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(122)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(121)) return true;
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(120)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(UNTERMINATED_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(119)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(118)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(RETURN_RECORD_ERROR)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(RETURN_RECORD_OK)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(RETURN_RECORD_SKIP)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(RETURN_RECORD_SEND_ALL)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(117)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(116)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(115)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(DATETIME_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(114)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(STRING_PLAIN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(OCTAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(HEX_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_117()) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(FOR_EACH)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(REGEX_EQUAL)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(GREATER_THAN_EQUAL)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(LESS_THAN_EQUAL)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(GREATER_THAN)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(IN_OPER)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(NON_EQUAL)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(110)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(REC_NUM_WILDCARD)) return true;
    if (jj_scan_token(MAPPING)) return true;
    if (jj_scan_token(REC_NUM_WILDCARD)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(REC_NAME_WILDCARD)) return true;
    if (jj_scan_token(MAPPING)) return true;
    if (jj_scan_token(REC_NUM_WILDCARD)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(BLOCK_START)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(110)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(110)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_57()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public TransformLangParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[72];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x18000000,0x18000000,0x0,0x80040000,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0xc655c400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc655c400,0xc655c400,0x0,0xc655c400,0x0,0x0,0x0,0x0,0x0,0x0,0xc655c400,0x0,0x80040000,0x0,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc655c400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0xfe00000,0x0,0x0,0x0,0x0,0x0,0xfe00000,0x0,0xfe00000,0x0,0x40000000,0x0,0x0,0x30000000,0x73fc6008,0xfe00000,0x3e00000,0x0,0x4000000,0x8000000,0x2,0x4,0x70,0x70,0xf80,0xf80,0x6000,0x6000,0x38000,0x38000,0xc0000,0xc0000,0x1c6008,0x73fc6008,0x73e00000,0x0,0x0,0x2000,0x0,0x2000,0x0,0x0,0x33e00000,0x73fc6008,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0x0,0x0,0x0,0x0,0x73fc6008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x800000,0xd1fbfff,0xd1fbfff,0x0,0x0,0x0,0x0,0xfff,0xd1db000,0x0,0x80000,0x0,0xfff,0x0,0x0,0x0,0x0,0xe0000fff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000fff,0xe0000fff,0x0,0xe0000000,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000fff,0x0,0x0,0xfff,0xd1db000,0xd1db000,0x0,0x0,0x200000,0x2000000,0x0,0x0,0xe0000fff,0x0,0x0,0x0,0x0,0x43,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x3ffc1e00,0x3ffc1e00,0x0,0x0,0x2000,0x1000,0x0,0x3ffc1e00,0x0,0x0,0x0,0x0,0x0,0x4000,0x2000,0x1000,0x3ffd1fff,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffd1fff,0x111ff,0x3ffc1e00,0x10001,0x0,0x2000,0x0,0x10000,0x10000,0x0,0x3ffd1fff,0x10000,0x0,0x1fe,0x3ffc1e00,0x3ffc1e00,0x3ffc1e00,0x0,0x0,0x0,0x1000,0x2000,0x3ffd1fff,0x3ffc0e00,0x2000,0x2000,0xc000000,0x0,0x2000,0xc0000000,0xc0000000,0x2000,0x0,0x0,0x0,0xe00,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x3a,0x3a,0x0,0x0,0x0,0x0,0x0,0x3a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3a,0x0,0x3a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3a,0x0,0x0,0x0,0x3a,0x3a,0x3a,0x0,0x0,0x0,0x0,0x0,0x3a,0x3a,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x4,0x4,0x3a,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TransformLangParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TransformLangParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TransformLangParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TransformLangParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new TransformLangParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TransformLangParser(TransformLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TransformLangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 72; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[136];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 72; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 136; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
