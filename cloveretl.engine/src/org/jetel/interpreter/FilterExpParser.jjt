/*
    Clover.ETL - filtering conditions grammar.
    (c) 2004 David.Pavlis <david_pavlis@hotmail.com>
    Released under LGPL license.
    
    (Adapted from Ken Beesley and Metamata's javacc 'Interpreter' example.)
 
*/

options {
   MULTI=true;
   STATIC=false;
   VISITOR=true; 
   NODE_USES_PARSER=true;
   NODE_PREFIX="CLVF";
   NODE_PACKAGE="org.jetel.interpreter";
}


/* *** Specifcation of the parser class *** */

PARSER_BEGIN(FilterExpParser)

package org.jetel.interpreter;

import org.jetel.data.DataRecord;

public class FilterExpParser {

       DataRecord dataRecord;

       public FilterExpParser(DataRecord record,java.io.InputStream stream){
              this(stream);
              dataRecord=record;
      }

      public DataRecord getDataRecord(){
             return dataRecord;
      }
}

PARSER_END(FilterExpParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" | "\n\r" }

/* Logical operators */
TOKEN [IGNORE_CASE]: {
  < OR: "or" | "||" >
| < AND: "and" | "&&" >
| < NOT: "not" | "!" >
}

/* Literals */
TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DIGIT: ["0"-"9"]>
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|<FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <STRING_LITERAL: <QUOTED_STRING> | <DQUOTED_STRING> >
|  <#QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'">
|  <#DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
// |<BOOLEAN_LITERAL: "true" | "false" >
|<DATE_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? >
|<DATETIME_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? " " <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)?>
}

/* Comparison Operators */
TOKEN: {
  < EQUAL: "==" | ".eq.">
| < NON_EQUAL: "!=" | "<>" | ".ne." >
| < LESS_THAN: "<" | ".lt." >
| < LESS_THAN_EQUAL: "<=" | ".le." >
| < GREATER_THAN: ">" | ".gt.">
| < GREATER_THAN_EQUAL: ">=" | ".ge." >
| < REGEX_EQUAL: "~=" | ".regex." >
}

TOKEN: {
<CMPOPERATOR : <EQUAL> | <NON_EQUAL> | <LESS_THAN> | <LESS_THAN_EQUAL> | <GREATER_THAN>
| <GREATER_THAN_EQUAL> | <REGEX_EQUAL> >
}

/* Numeric Operators */
TOKEN: {
 <MINUS: "-" >
| <PLUS: "+">
| <MULTIPLY: "*">
| <DIVIDE: "/">
| <MODULO: "%">
}

/* Field Identifiers */
TOKEN: {
  < FIELD_ID: "$"(["A"-"Z", "a"-"z"])(["A"-"Z", "a"-"z", "_","0"-"9"])* >
}

/* Parenthesis */
TOKEN: {
  <OPEN_PAR: "("> |
  <CLOSE_PAR: ")">
}

/* The start nonterminal and its productions. */

CLVFStart Start() : {}        // Start -> Exp
{
  CompilationUnit() <EOF>
  { return jjtThis; }
}

void CompilationUnit() #void :
{
}
{
	Statement()
   ( ";" 
       Statement()
   )*
}

void Statement() #void : {}
{
    //LOOKAHEAD(3) AdditiveExpression()
    ConditionalOrExpression()
    
}

/* Other nonterminals and their productions */

void ConditionalOrExpression() #void : {}        
{
   ConditionalAndExpression()
   ( <OR> ConditionalAndExpression() #Or(2) )*
}

void ConditionalAndExpression() #void : {}
{
   EqualityExpression()
   ( <AND> EqualityExpression() #And(2) ) *
}

void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
     <EQUAL> RelationalExpression() { jjtThis.cmpType=EQUAL; } #Comparison(2)
   |
     <NON_EQUAL> RelationalExpression() { jjtThis.cmpType=NON_EQUAL; } #Comparison(2)
  )*
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression()
  (
    <LESS_THAN> AdditiveExpression() { jjtThis.cmpType=LESS_THAN; } #Comparison(2)
   |
    <GREATER_THAN> AdditiveExpression() { jjtThis.cmpType=GREATER_THAN; } #Comparison(2)
   |
    <LESS_THAN_EQUAL> AdditiveExpression() { jjtThis.cmpType=LESS_THAN_EQUAL; } #Comparison(2)
   |
    <GREATER_THAN_EQUAL> AdditiveExpression() { jjtThis.cmpType=GREATER_THAN_EQUAL; } #Comparison(2)
   | 
   	<REGEX_EQUAL>  RegexLiteral() { jjtThis.cmpType=REGEX_EQUAL; } #Comparison(2)
  )*
}

void AdditiveExpression() #void : {}
{
 MultiplicativeExpression()
 (
     <PLUS> MultiplicativeExpression() #AddNode(2)
   |
     <MINUS> MultiplicativeExpression() #SubNode(2)
  )*
}

void MultiplicativeExpression() #void : {}
{
     UnaryExpression()
  (
    <MULTIPLY> UnaryExpression() #MulNode(2)
   |
    <DIVIDE> UnaryExpression() #DivNode(2)
   |
    <MODULO> UnaryExpression() #ModNode(2)
  )*
}

void UnaryExpression() #void :
{}
{
	 PrimaryExpression()
	 | LOOKAHEAD(3) "-" PrimaryExpression() #MinusNode(1)
	 | <NOT> UnaryExpression() #Negation(1)
} 

void PrimaryExpression() #void : {}
{
     
     LitExp()
     |BuildInFunction()     
     |IDExp()
     |<OPEN_PAR> Statement() <CLOSE_PAR>
}

void BuildInFunction() #void : {}
{
	"substring" "(" AdditiveExpression() "," AdditiveExpression() "," AdditiveExpression() ")" #SubStrNode(3) // (string,from index,length)
	|"uppercase" "(" AdditiveExpression() ")" #UppercaseNode(1)
	|"lowercase" "(" AdditiveExpression() ")" #LowercaseNode(1)
	|"trim" "(" AdditiveExpression() ")" #TrimNode(1)
	|"length" "(" AdditiveExpression() ")" #LengthNode(1)
	|ConcatNode()
	|DateAddNode()
	|DateDiffNode()
	|"today" "(" ")" #TodayNode(0)
	|"isnull" "(" IDExp() ")" #IsNullNode(1)
}

void LitExp() #void :            // 
{
	Token t;
}
{
 t=<FLOATING_POINT_LITERAL>
  	{ jjtThis.setVal(FLOATING_POINT_LITERAL,t.image);} #Literal
 |t=<INTEGER_LITERAL>
  	{ jjtThis.setVal(INTEGER_LITERAL,t.image);}   #Literal
 |t=<STRING_LITERAL>
  	{ jjtThis.setVal(STRING_LITERAL,t.image.substring(1,t.image.length()-1)); }   #Literal
 //|t=<BOOLEAN_LITERAL>
 // 	{ jjtThis.setVal(BOOLEAN_LITERAL,t.image);}   #Literal
 |t=<DATE_LITERAL>
 	{ jjtThis.setVal(DATE_LITERAL,t.image);}   #Literal
 |t=<DATETIME_LITERAL>
  	{ jjtThis.setVal(DATETIME_LITERAL,t.image);}   #Literal
}

void IDExp() #void :               // IDExp -> ID
{
	Token t;
}
{
  t=<FIELD_ID> { jjtThis.setFieldName(t.image); } #JetelFieldLiteral
}

void RegexLiteral() #void :
{
	Token t;
}
{
  t=<STRING_LITERAL> { jjtThis.setRegex(t.image); } #RegexLiteral
}

void ConcatNode() : // concatenates strings
{}
{
   "concat" "(" AdditiveExpression() ( "," AdditiveExpression() )+ ")"
}

void DateAddNode() :
{ Token t;}
{
	"dateadd" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtThis.setCalendarField(t.image); }
	")"
}

void DateDiffNode() :
{ Token t;}
{
	"datediff" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtThis.setCalendarField(t.image); }
	")"
}

TOKEN : { <DATE_FIELD_LITERAL : "year" |"month" | "week" | "day" | "sec" > }
