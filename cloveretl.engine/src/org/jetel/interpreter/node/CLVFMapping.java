/* Generated By:JJTree: Do not edit this line. CLVFMapping.java */

package org.jetel.interpreter.node;

import org.jetel.interpreter.ExpParser;
import org.jetel.data.DataField;
import org.jetel.data.DataRecord;
import org.jetel.interpreter.TransformLangExecutorRuntimeException;
import org.jetel.interpreter.ParseException;
import org.jetel.interpreter.TransformLangParserVisitor;
import org.jetel.metadata.DataRecordMetadata;

public class CLVFMapping extends SimpleNode {
 
    public DataField field;
    public int recordNo=-1;
    public int fieldNo=-1;
    public String fieldName;
    public int arity;
    
  public CLVFMapping(int id) {
    super(id);
  }

  public CLVFMapping(ExpParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  /**
   * Get field of input record (1st record)
   * 
     * @param fName
     * @throws ParseException
     */
    public void setFieldName(String fName) throws ParseException{
        // get rid of leading '$' character (the 1st character)
      fieldName=fName;
      recordNo=0;
      DataRecordMetadata record= parser.getOutRecordMeta(0);
      if (record==null){
          throw new ParseException("Unknown data field \""+fName+"\"");
      }
        fieldNo=record.getFieldPosition(fName.substring(1));
        if (fieldNo==-1){
            throw new ParseException("Unknown data field \""+fName+"\"");
        }
    }
   public void setRecordFieldName(String fRecName) throws ParseException{
          // get rid of leading '$' character (the 1st character)
          fieldName=fRecName;   
          String recFieldName[]=fRecName.substring(1).split("\\.");
          DataRecordMetadata record;
          try{
        	  recordNo=parser.getOutRecordNum(recFieldName[0]);
              record=parser.getOutRecordMeta(recordNo);
          }catch(Exception ex){
              throw new ParseException("Error accessing record \""+recFieldName[0]+"\" "+ex.getMessage());
          }
          if (record==null){
              throw new ParseException("Unknown record \""+recFieldName[0]+"\""); 
          }
          fieldNo=record.getFieldPosition(recFieldName[1]);
          if (fieldNo==-1){
              throw new ParseException("Unknown data field ["+fRecName+"]");
          }
      }
   
   public void setRecordNumFieldName(String fRecName) throws ParseException{
       // get rid of leading '$' character (the 1st character)
       fieldName=fRecName;
       String recFieldName[]=fRecName.substring(1).split("\\.");
       DataRecordMetadata record=null;
       try{
    	   recordNo=Integer.parseInt(recFieldName[0]);
           record=parser.getOutRecordMeta(recordNo);
       }catch(NumberFormatException ignore){
       }
       if (record==null){
           throw new ParseException("Unknown record \""+recFieldName[0]+"\""); 
       }
       fieldNo=record.getFieldPosition(recFieldName[1]);
       if (fieldNo==-1){
           throw new ParseException("Unknown data field \""+fRecName+"\"");
       }
   }   
   
   
   public void bindToField(DataRecord[] records){
       try{
           field=records[recordNo].getField(fieldNo);
       }catch(NullPointerException ex){
           throw new TransformLangExecutorRuntimeException("can't determine "+fieldName);
       }
   }
   
   public void setArity(int arity){
       this.arity=arity;
   }
   
   public void dump(String prefix) {
	    System.out.println(toString(prefix));
	    if (children != null) {
	      for (int i = 0; i < children.length; ++i) {
		SimpleNode n = (SimpleNode)children[i];
		if (n != null) {
		  n.dump(prefix + " ");
		}
	      }
	    }
	    System.out.println("Rec:"+recordNo+" field: "+fieldNo+" fieldName:"+fieldName);
	  }
   
}
