/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:\projects\eclipse\workspace\cloveretl.engine\src\org\jetel\interpreter\TransformLangParser.jj */
/*@egen*//*
    Clover.ETL - filtering conditions grammar.
    (c) 2004-06 David.Pavlis <david_pavlis@hotmail.com>
    Released under LGPL license.
    
    (Adapted from Ken Beesley and Metamata's javacc 'Interpreter' example.)
 
*/

options {                
   STATIC=false;                                                                                                                                           // save line & column number
   JAVA_UNICODE_ESCAPE = true ;                             // change to True only if new Node has been added 
}


/* *** Specifcation of the parser class *** */

PARSER_BEGIN(TransformLangParser)

package org.jetel.interpreter;

import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.node.*;
import org.jetel.util.StringUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;

public class TransformLangParser extends ExpParser/*@bgen(jjtree)*/implements TransformLangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTransformLangParserState jjtree = new JJTTransformLangParserState();

/*@egen*/

       DataRecordMetadata[] inRecordsMetadata;
       DataRecordMetadata[] outRecordsMetadata;
       Map inDataRecordsMap;
       Map outDataRecordsMap;
	   ParserHelper parserHelper;       
       List parseExceptions;

       public TransformLangParser(DataRecordMetadata recordMetadata,java.io.InputStream stream){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],stream,"UTF-8");
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream){
			this(inRecordsMetadata,outRecordsMetadata,stream,"UTF-8");
       							
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream,String encoding){
              this(stream,encoding);
              parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList();
              for(int i=0;i<inRecordsMetadata.length;i++){
                inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
                outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }
      }

      public final DataRecordMetadata getInRecordMeta(){
             return inRecordsMetadata[0];
      }
      
      public final int getInRecordNum(String name){
      	try{
             return ((Integer)inDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final int getOutRecordNum(String name){
        try{
             return ((Integer)outDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final DataRecordMetadata getInRecordMeta(int num){
      	try{
             return inRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
      public final DataRecordMetadata getOutRecordMeta(int num){
      	try{
             return outRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
      
     /**
      *  Returns map of function symbols where
      *  under function name is saved reference to appropriate 
      *  function definition/declaration node - upon that node
      *  visit() method of TransformationLangExecutor can be called to
      *  execute function's body. 
      */
      
      public final Map getFunctions(){
        return parserHelper.functionSymbol;
    }
    
     public final CLVFFunctionDeclaration getFunction(String name){
     	return (CLVFFunctionDeclaration) parserHelper.functionSymbol.get(name);
     }
      
     
     /**
      *  Returns map of global variable symbols where
      *  under variable name is saved appropriate slot in 
      *  which variable's value is saved. 
      */
      public final Map getGlobalVariables(){
     	return parserHelper.globalVariableSymbol;
     }
     
     public final int getGlobalVariableSlot(String name){
     	return parserHelper.getGlobalVariableSlot(name);
     }
      
   /**
    * Save the current line number for run-time error messages
    */
   void jjtreeOpenNodeScope(Node n)
    {
       Token t = getToken(0);
       if (t!= null) {
           ((SimpleNode) n).setLineNumber(t.beginLine);
           ((SimpleNode) n).setColumnNumber(t.beginColumn);
       }
    }

   /**
    * Dummy routine, required because NODE_SCOPE_HOOK is true
    */
    void jjtreeCloseNodeScope(Node n)
    {
    }
    
    public List getParseExceptions(){
    	return parseExceptions;
    }
      
}

PARSER_END(TransformLangParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" | "\n\r" }


/* HANDLING COMMENTS */
SPECIAL_TOKEN: {  <"/*"> : WithinComment }
<WithinComment> SPECIAL_TOKEN:
{
    <"*/"> : DEFAULT
}
<WithinComment> MORE: { <~[]> }

SPECIAL_TOKEN: {  <"//"> : WithinLineComment }
<WithinLineComment> SPECIAL_TOKEN:
{
    <"\n"> : DEFAULT
}
<WithinLineComment> MORE: { <~[]> }


/* Literals */
TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DIGIT: ["0"-"9"]>
|  <#LETTER: [ "a"-"z", "A"-"Z" ] >
|  <#UNDERSCORE: [ "_" ] >
|  <DECIMAL_LITERAL:  ["1"-"9"] (["0"-"9"])*>
|  <HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <OCTAL_LITERAL: "0" (["0"-"7"])*>
|<FLOATING_POINT_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <STRING_LITERAL: <QUOTED_STRING> | <DQUOTED_STRING> >
|  <#QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'">
|  <#DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
| <UNTERMINATED_STRING_LITERAL: <UNTERMINATED_QUOTED_STRING> | <UNTERMINATED_DQUOTED_STRING> >
|  <#UNTERMINATED_QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|  <#UNTERMINATED_DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|<BOOLEAN_LITERAL: <TRUE> | <FALSE> >
| <#TRUE: "true">
| <#FALSE: "false">
|<DATE_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? >
|<DATETIME_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? " " <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)?>
|<SEMICOLON: ";">
|<NULL_LITERAL: "null">
}

TOKEN : {
<MAPPING: ":=">
}

/* Logical operators */
TOKEN [IGNORE_CASE]: {
  < OR: "or" | "||" >
| < AND: "and" | "&&" >
| < NOT: "not" | "!" >
}


/* Comparison Operators */
TOKEN [IGNORE_CASE]: {
  < EQUAL: "==" | ".eq.">
| < NON_EQUAL: "!=" | "<>" | ".ne." >
| < LESS_THAN: "<" | ".lt." >
| < LESS_THAN_EQUAL: "<=" | "=<" | ".le." >
| < GREATER_THAN: ">" | ".gt.">
| < GREATER_THAN_EQUAL: ">=" | "=>" | ".ge." >
| < REGEX_EQUAL: "~=" | ".regex." >
}

TOKEN: {
<CMPOPERATOR : <EQUAL> | <NON_EQUAL> | <LESS_THAN> | <LESS_THAN_EQUAL> | <GREATER_THAN>
| <GREATER_THAN_EQUAL> | <REGEX_EQUAL> >
}

/* Numeric Operators */
TOKEN: {
 <MINUS: "-" >
| <PLUS: "+" >
| <MULTIPLY: "*" >
| <DIVIDE: "/" >
| <MODULO: "%" >
| <PLUS_PLUS: "++" >
| <MINUS_MINUS: "--" >
}

/* Clover Field Identifiers */
TOKEN: {
  < FIELD_ID: "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}

/* Clover Record Field Identifiers */
TOKEN: {
  < REC_NAME_FIELD_ID:  "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* "." (<LETTER>|<DIGIT>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
  | < REC_NUM_FIELD_ID:  "$" <DIGIT> (<DIGIT>)* "." (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}


/* CloverParameter Identifier */
TOKEN: {
  < GLOBAL_PARAMETER_ID: "$" "{" <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* "}"	>
}

/* Parenthesis */
TOKEN: {
  <OPEN_PAR: "("> |
  <CLOSE_PAR: ")">
}


TOKEN : /* variable Types */
{ 
   < INT_VAR: "int" >
 |  < LONG_VAR: "long" >
 |  < DATE_VAR: "date" >
 |  < DOUBLE_VAR: "number" | "double" >
 |  < DECIMAL_VAR: "decimal" >
 |  < BOOLEAN_VAR: "boolean" >
 |  < STRING_VAR: "string" >
 }

/* 
 *  The start nonterminal and its productions. 
 *  Nonterminal & productions for transformation language
 */

CLVFStart Start() : {/*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}        // Start -> Exp
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  CompilationUnit() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { 
  	if (parseExceptions.size()>0){
  		throw (ParseException)parseExceptions.get(0);
  	}	
  	return jjtn000; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* 
 *  The start expression nonterminal and its productions. 
 *  Nonterminal & productions for expressions only
 */


CLVFStartExpression StartExpression() : {/*@bgen(jjtree) StartExpression */
  CLVFStartExpression jjtn000 = new CLVFStartExpression(this, JJTSTARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartExpression */
        try {
/*@egen*/
	ConditionalOrExpression() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{ 
		if (parseExceptions.size()>0){
  			throw (ParseException)parseExceptions.get(0);
  		}		
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CompilationUnit()       :
{
   String name;
}
{
   (
       VarDeclaration() ";"
   
     |
       Statement()
       
     |
       FunctionDeclaration()
   )*
   
   (
  		Mapping() ";"
   	)*
   	
   <EOF>
}

void FunctionDeclaration() :
{/*@bgen(jjtree) FunctionDeclaration */
        CLVFFunctionDeclaration jjtn000 = new CLVFFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
 	int order=0; 
 }
{/*@bgen(jjtree) FunctionDeclaration */
        try {
/*@egen*/
	"function"
	t = <IDENTIFIER> { 
		jjtn000.setName(t.image); 
		if (parserHelper.functionSymbol.put(t.image,jjtn000)!=null){
			 throw new ParseException(t,"function "+t.image+" already declared");	
			}
		parserHelper.enteredFunctionDeclaration(t.image);
		}
		
	"("  
		 [t = <IDENTIFIER> { jjtn000.addVarName(order++, t.image); 
							if (!parserHelper.addLocalVariable(t.image)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} ]
		
		( "," t = <IDENTIFIER> { jjtn000.addVarName(order++,t.image); 
							if (!parserHelper.addLocalVariable(t.image)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} )* 
	
	")"
	"{"
	  ( VarDeclaration() ";" )*
	  ( Statement() )* 
	  [ ( Mapping() ";" )+ [ ReturnStatement() ] ]
	 
	 "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		parserHelper.exitedFunctionDeclaration();	
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}
/*
 JAVACODE
    void FuncDeclarationExit() #void {
	
	  parserHelper.exitedFunctionDeclaration();	
    }
*/

void VarDeclaration():
{/*@bgen(jjtree) VarDeclaration */
  CLVFVarDeclaration jjtn000 = new CLVFVarDeclaration(this, JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/  Token t,l,p;  int varSlot;}{/*@bgen(jjtree) VarDeclaration */
  try {
/*@egen*/  try {    (<INT_VAR>{      jjtn000.setType(INT_VAR);    }    | <LONG_VAR>{      jjtn000.setType(LONG_VAR);    }    | <DOUBLE_VAR>{      jjtn000.setType(DOUBLE_VAR);    }    | <DECIMAL_VAR>{      jjtn000.setType(DECIMAL_VAR);    }    | <STRING_VAR>{      jjtn000.setType(STRING_VAR);    }    | <DATE_VAR>{      jjtn000.setType(DATE_VAR);    }    | <BOOLEAN_VAR>{      jjtn000.setType(BOOLEAN_VAR);    }    )

    ["(" l=<INTEGER_LITERAL> { jjtn000.setLength(l.image);} [ "," p=<INTEGER_LITERAL>  { jjtn000.setPrecision(p.image); } ] ")"   ] 
      
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtreeCloseNodeScope(jjtn000);
                    }
/*@egen*/{      if (!parserHelper.addVariable(t.image)){        throw new ParseException(t, "variable ["+t.image+"] already declared");
      }      else {        // is it local variable declaration ?
		if (parserHelper.inFunctionDeclaration){          jjtn000.setVarSlot(parserHelper.getLocalVariableSlot(t.image));          jjtn000.setLocalVariale(true);        }        else {          jjtn000.setVarSlot(parserHelper.getGlobalVariableSlot(t.image));          jjtn000.setLocalVariale(false);        }        jjtn000.setName(t.image);      }    }
 }catch (ParseException e){    parseExceptions.add(e);//following code causes parser to cough     
//do {//      t = getNextToken();//    }//    while (t.kind != SEMICOLON);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/}

void Expression()       : {}
{
  //LOOKAHEAD( PrimaryExpression() "=" )
  LOOKAHEAD( VarExp() "=" )
  		Assignment()
  |
  	ConditionalOrExpression()   
  
}

void Assignment()                :
{/*@bgen(jjtree) #Assignment( 2) */
  CLVFAssignment jjtn000 = new CLVFAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Assignment( 2) */
        try {
/*@egen*/
 // PrimaryExpression() "=" Expression()
 	VarExp() "=" Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  2);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Mapping() : // assignment of value to Clover field
{/*@bgen(jjtree) Mapping */
  CLVFMapping jjtn000 = new CLVFMapping(this, JJTMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t ;}
{/*@bgen(jjtree) Mapping */
  try {
/*@egen*/	
  	/*OutputFieldExp() */
  (	t = <FIELD_ID> { jjtn000.setFieldName(t.image); } 
  | t = <REC_NAME_FIELD_ID> { jjtn000.setRecordFieldName(t.image); }
  | t = <REC_NUM_FIELD_ID> { jjtn000.setRecordNumFieldName(t.image); }
  	)
  	<MAPPING> 
  	
  	ConditionalOrExpression() (":" ConditionalOrExpression())*/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                     jjtreeCloseNodeScope(jjtn000);
                                                                   }
/*@egen*/ {jjtn000.setArity(jjtree.nodeArity());}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* Other nonterminals and their productions */

void ConditionalOrExpression()       : {}        
{
   ConditionalAndExpression()
   ( <OR>/*@bgen(jjtree) #Or( 2) */
          {
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/ )*
}

void ConditionalAndExpression()       : {}
{
   EqualityExpression()
   ( <AND>/*@bgen(jjtree) #And( 2) */
           {
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/ ) *
}

void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
     <EQUAL> RelationalExpression()/*@bgen(jjtree) #Comparison( 2) */
                                    {
                                      CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
/*@egen*/ { jjtn001.cmpType=EQUAL; }/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
                                    }
/*@egen*/
   |
     <NON_EQUAL> RelationalExpression()/*@bgen(jjtree) #Comparison( 2) */
                                        {
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
/*@egen*/ { jjtn002.cmpType=NON_EQUAL; }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
                                        }
/*@egen*/
  )*
}

void RelationalExpression()       :
{}
{
  AdditiveExpression()
  (
    <LESS_THAN> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                     {
                                       CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
/*@egen*/ { jjtn001.cmpType=LESS_THAN; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/
   |
    <GREATER_THAN> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                        {
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
/*@egen*/ { jjtn002.cmpType=GREATER_THAN; }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
                                        }
/*@egen*/
   |
    <LESS_THAN_EQUAL> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                           {
                                             CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                             jjtreeOpenNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn003,  2);
                                             jjtc003 = false;
                                             jjtreeCloseNodeScope(jjtn003);
                                           }
/*@egen*/ { jjtn003.cmpType=LESS_THAN_EQUAL; }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                               jjtreeCloseNodeScope(jjtn003);
                                             }
                                           }
/*@egen*/
   |
    <GREATER_THAN_EQUAL> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                              {
                                                CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
                                                jjtreeOpenNodeScope(jjtn004);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                                jjtc004 = false;
                                                jjtreeCloseNodeScope(jjtn004);
                                              }
/*@egen*/ { jjtn004.cmpType=GREATER_THAN_EQUAL; }/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                  jjtreeCloseNodeScope(jjtn004);
                                                }
                                              }
/*@egen*/
   | 
   	<REGEX_EQUAL>  RegexLiteral()/*@bgen(jjtree) #Comparison( 2) */
                                      {
                                        CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                        jjtreeOpenNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn005,  2);
                                        jjtc005 = false;
                                        jjtreeCloseNodeScope(jjtn005);
                                      }
/*@egen*/ { jjtn005.cmpType=REGEX_EQUAL; }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                          jjtreeCloseNodeScope(jjtn005);
                                        }
                                      }
/*@egen*/
  )*
}

void AdditiveExpression()       : {}
{
 MultiplicativeExpression()
 (
     <PLUS>/*@bgen(jjtree) #AddNode( 2) */
            {
              CLVFAddNode jjtn001 = new CLVFAddNode(this, JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtreeCloseNodeScope(jjtn001);
              }
            }
/*@egen*/
   |
     <MINUS>/*@bgen(jjtree) #SubNode( 2) */
             {
               CLVFSubNode jjtn002 = new CLVFSubNode(this, JJTSUBNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/
  )*
}

void MultiplicativeExpression()       : {}
{
     UnaryExpression()
  (
    <MULTIPLY>/*@bgen(jjtree) #MulNode( 2) */
               {
                 CLVFMulNode jjtn001 = new CLVFMulNode(this, JJTMULNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/
   |
    <DIVIDE>/*@bgen(jjtree) #DivNode( 2) */
             {
               CLVFDivNode jjtn002 = new CLVFDivNode(this, JJTDIVNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/
   |
    <MODULO>/*@bgen(jjtree) #ModNode( 2) */
             {
               CLVFModNode jjtn003 = new CLVFModNode(this, JJTMODNODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
             }
             try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtreeCloseNodeScope(jjtn003);
               }
             }
/*@egen*/
  )*
}

void UnaryExpression()       :
{}
{
	 LOOKAHEAD(2) PrimaryExpression()
	 | "-"/*@bgen(jjtree) #MinusNode( 1) */
               {
                 CLVFMinusNode jjtn001 = new CLVFMinusNode(this, JJTMINUSNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/ PrimaryExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/
	 | ( LOOKAHEAD( PrimaryExpression() )/*@bgen(jjtree) #PlusPlusNode( 1) */
                                              {
                                                CLVFPlusPlusNode jjtn002 = new CLVFPlusPlusNode(this, JJTPLUSPLUSNODE);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ <PLUS_PLUS>/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  1);
                                                  jjtreeCloseNodeScope(jjtn002);
                                                }
                                              }
/*@egen*/
	 	|<PLUS_PLUS>/*@bgen(jjtree) #PlusPlusNode( 1) */
                             {
                               CLVFPlusPlusNode jjtn003 = new CLVFPlusPlusNode(this, JJTPLUSPLUSNODE);
                               boolean jjtc003 = true;
                               jjtree.openNodeScope(jjtn003);
                               jjtreeOpenNodeScope(jjtn003);
                             }
                             try {
/*@egen*/ PrimaryExpression()/*@bgen(jjtree)*/
                             } catch (Throwable jjte003) {
                               if (jjtc003) {
                                 jjtree.clearNodeScope(jjtn003);
                                 jjtc003 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte003 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte003;
                               }
                               if (jjte003 instanceof ParseException) {
                                 throw (ParseException)jjte003;
                               }
                               throw (Error)jjte003;
                             } finally {
                               if (jjtc003) {
                                 jjtree.closeNodeScope(jjtn003,  1);
                                 jjtreeCloseNodeScope(jjtn003);
                               }
                             }
/*@egen*/ )
	 | LOOKAHEAD(PrimaryExpression())/*@bgen(jjtree) #MinusMinusNode( 1) */
                                          {
                                            CLVFMinusMinusNode jjtn004 = new CLVFMinusMinusNode(this, JJTMINUSMINUSNODE);
                                            boolean jjtc004 = true;
                                            jjtree.openNodeScope(jjtn004);
                                            jjtreeOpenNodeScope(jjtn004);
                                          }
                                          try {
/*@egen*/ <MINUS_MINUS>/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc004) {
                                              jjtree.closeNodeScope(jjtn004,  1);
                                              jjtreeCloseNodeScope(jjtn004);
                                            }
                                          }
/*@egen*/
	 | <MINUS_MINUS>/*@bgen(jjtree) #MinusMinusNode( 1) */
                         {
                           CLVFMinusMinusNode jjtn005 = new CLVFMinusMinusNode(this, JJTMINUSMINUSNODE);
                           boolean jjtc005 = true;
                           jjtree.openNodeScope(jjtn005);
                           jjtreeOpenNodeScope(jjtn005);
                         }
                         try {
/*@egen*/ PrimaryExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte005) {
                           if (jjtc005) {
                             jjtree.clearNodeScope(jjtn005);
                             jjtc005 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte005 instanceof RuntimeException) {
                             throw (RuntimeException)jjte005;
                           }
                           if (jjte005 instanceof ParseException) {
                             throw (ParseException)jjte005;
                           }
                           throw (Error)jjte005;
                         } finally {
                           if (jjtc005) {
                             jjtree.closeNodeScope(jjtn005,  1);
                             jjtreeCloseNodeScope(jjtn005);
                           }
                         }
/*@egen*/
	 | <NOT>/*@bgen(jjtree) #Negation( 1) */
                 {
                   CLVFNegation jjtn006 = new CLVFNegation(this, JJTNEGATION);
                   boolean jjtc006 = true;
                   jjtree.openNodeScope(jjtn006);
                   jjtreeOpenNodeScope(jjtn006);
                 }
                 try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte006) {
                   if (jjtc006) {
                     jjtree.clearNodeScope(jjtn006);
                     jjtc006 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte006 instanceof RuntimeException) {
                     throw (RuntimeException)jjte006;
                   }
                   if (jjte006 instanceof ParseException) {
                     throw (ParseException)jjte006;
                   }
                   throw (Error)jjte006;
                 } finally {
                   if (jjtc006) {
                     jjtree.closeNodeScope(jjtn006,  1);
                     jjtreeCloseNodeScope(jjtn006);
                   }
                 }
/*@egen*/
	 
	 
} 


void PrimaryExpression()       : {}
{
	 LOOKAHEAD(2) FunctionCall()
     |LitExp()
     |VarExp()
     |InputFieldExp()
     |GlobalParameterExp()
     |<OPEN_PAR> Expression() <CLOSE_PAR>
   
  
}

void FunctionCall()       : {}
{
 	BuildInFunction()
 	|FunctionCallStatement()
}

void LitExp()       :            // 
{
	Token t;
}
{
 t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtreeCloseNodeScope(jjtn001);
        }
/*@egen*/
  	{ jjtn001.setVal(FLOATING_POINT_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
 |t=<HEX_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn002 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtreeCloseNodeScope(jjtn002);
        }
/*@egen*/
  	{ jjtn002.setVal(HEX_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/
 |t=<OCTAL_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn003 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtreeCloseNodeScope(jjtn003);
        }
/*@egen*/
  	{ jjtn003.setVal(OCTAL_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtreeCloseNodeScope(jjtn003);
          }
        }
/*@egen*/
 |t=<INTEGER_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn004 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtreeOpenNodeScope(jjtn004);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn004, true);
          jjtc004 = false;
          jjtreeCloseNodeScope(jjtn004);
        }
/*@egen*/
  	{ jjtn004.setVal(INTEGER_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtreeCloseNodeScope(jjtn004);
          }
        }
/*@egen*/
 |t=<STRING_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn005 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtreeOpenNodeScope(jjtn005);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtreeCloseNodeScope(jjtn005);
        }
/*@egen*/
  	{ jjtn005.setVal(STRING_LITERAL,StringUtils.stringToSpecChar(t.image.substring(1,t.image.length()-1))); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtreeCloseNodeScope(jjtn005);
          }
        }
/*@egen*/
 |t=<BOOLEAN_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn006 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtreeOpenNodeScope(jjtn006);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn006, true);
          jjtc006 = false;
          jjtreeCloseNodeScope(jjtn006);
        }
/*@egen*/
  	{ jjtn006.setVal(BOOLEAN_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtreeCloseNodeScope(jjtn006);
          }
        }
/*@egen*/
 |t=<DATE_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn007 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtreeOpenNodeScope(jjtn007);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn007, true);
          jjtc007 = false;
          jjtreeCloseNodeScope(jjtn007);
        }
/*@egen*/
 	{ jjtn007.setVal(DATE_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtreeCloseNodeScope(jjtn007);
          }
        }
/*@egen*/
 |t=<DATETIME_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn008 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtreeOpenNodeScope(jjtn008);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn008, true);
          jjtc008 = false;
          jjtreeCloseNodeScope(jjtn008);
        }
/*@egen*/
  	{ jjtn008.setVal(DATETIME_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtreeCloseNodeScope(jjtn008);
          }
        }
/*@egen*/
 |t=<NULL_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn009 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
          jjtreeOpenNodeScope(jjtn009);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn009, true);
          jjtc009 = false;
          jjtreeCloseNodeScope(jjtn009);
        }
/*@egen*/
 	{ jjtn009.setVal(NULL_LITERAL,t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
            jjtreeCloseNodeScope(jjtn009);
          }
        }
/*@egen*/
 |t = <UNTERMINATED_STRING_LITERAL>
  {
       throw new ParseException(t,"unterminated string literal");
  }
}

void InputFieldExp()       :// IDExp -> ID
{  Token t;}{  t = <FIELD_ID>/*@bgen(jjtree) InputFieldLiteral */
                 {
                   CLVFInputFieldLiteral jjtn001 = new CLVFInputFieldLiteral(this, JJTINPUTFIELDLITERAL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtreeCloseNodeScope(jjtn001);
                 }
/*@egen*/ { jjtn001.setFieldName(t.image); }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/  | t = <REC_NAME_FIELD_ID>/*@bgen(jjtree) InputFieldLiteral */
                            {
                              CLVFInputFieldLiteral jjtn002 = new CLVFInputFieldLiteral(this, JJTINPUTFIELDLITERAL);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtc002 = false;
                              jjtreeCloseNodeScope(jjtn002);
                            }
/*@egen*/ { jjtn002.setRecordFieldName(t.image); }/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtreeCloseNodeScope(jjtn002);
                              }
                            }
/*@egen*/
  | t = <REC_NUM_FIELD_ID>/*@bgen(jjtree) InputFieldLiteral */
                           {
                             CLVFInputFieldLiteral jjtn003 = new CLVFInputFieldLiteral(this, JJTINPUTFIELDLITERAL);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                             jjtreeOpenNodeScope(jjtn003);
                           }
                           try {
/*@egen*//*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtc003 = false;
                             jjtreeCloseNodeScope(jjtn003);
                           }
/*@egen*/ { jjtn003.setRecordNumFieldName(t.image); }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                               jjtreeCloseNodeScope(jjtn003);
                             }
                           }
/*@egen*/}/*
void OutputFieldExp() #void :// IDExp -> ID
{
  Token t;
}
{
  t = <FIELD_ID> { jjtThis.setFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); } #OutputFieldLiteral
}
*/
void GlobalParameterExp()       :           
{
	Token t;
}
{
  t=<GLOBAL_PARAMETER_ID>/*@bgen(jjtree) GlobalParameterLiteral */
                          {
                            CLVFGlobalParameterLiteral jjtn001 = new CLVFGlobalParameterLiteral(this, JJTGLOBALPARAMETERLITERAL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                            jjtreeCloseNodeScope(jjtn001);
                          }
/*@egen*/ { jjtn001.setParameterName(t.image.substring(2,t.image.length()-1)); }/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
                          }
/*@egen*/
}


void VarExp()       :               // IDExp -> ID
{
	Token t;
	int varSlot;
}
{
	try{
  t=<IDENTIFIER>/*@bgen(jjtree) VariableLiteral */
                 {
                   CLVFVariableLiteral jjtn001 = new CLVFVariableLiteral(this, JJTVARIABLELITERAL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtreeCloseNodeScope(jjtn001);
                 }
/*@egen*/ { 

  		// first, look for local var reference
  		if (parserHelper.inFunctionDeclaration && 
  				(varSlot=parserHelper.getLocalVariableSlot(t.image))>=0){
  			jjtn001.setLocalVariale(true);
  		}else{
    		if ((varSlot=parserHelper.getGlobalVariableSlot(t.image))<0){
  				throw new ParseException(t,"variable ["+t.image+"] is not declared");
    		}
    		jjtn001.setLocalVariale(false);
	  	}
  	jjtn001.setVarSlot(varSlot); 
  	jjtn001.setVarName(t.image);
  	}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/
	}catch(ParseException e){
		parseExceptions.add(e);
	}
}

void RegexLiteral()       :
{
	Token t;
}
{
  t=<STRING_LITERAL>/*@bgen(jjtree) RegexLiteral */
                     {
                       CLVFRegexLiteral jjtn001 = new CLVFRegexLiteral(this, JJTREGEXLITERAL);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtreeCloseNodeScope(jjtn001);
                     }
/*@egen*/ { jjtn001.setRegex(t.image); }/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtreeCloseNodeScope(jjtn001);
                       }
                     }
/*@egen*/
}


/*
 * Statement syntax follows.
 */

void Statement()       :
{}
{
	
	try{
		(
		  <SEMICOLON>
		/*|
		  LOOKAHEAD(2)
		  LabeledStatement() */
		|
		  Block()
		| 
		  IfStatement()
		|
		  SwitchStatement()
		|
		  WhileStatement()
		|
		  ForStatement()
		|
		  DoStatement() 
		|
		   BreakStatement()
		|
		   ContinueStatement()
		|
		   ReturnStatement()
		| 
		  BuildInProcedure()
		| 
		  StatementExpression()
		
		  )
	}catch (ParseException e) {
		parseExceptions.add(e);
// following code causes strange behaviour in case of certain bugs
//    Token t;//    do {//      t = getNextToken();//    } while (t.kind != SEMICOLON);
  }
}

/*
* void LabeledStatement() #void :
* {}
*  {
*    <IDENTIFIER> ":" Statement()
*  }
*/

void Block() :
{/*@bgen(jjtree) Block */
  CLVFBlock jjtn000 = new CLVFBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  "{" ( Statement() )* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void StatementExpression()       :
/*
 * The last expansion of this production accepts more than the legal
 * SPL expansions for StatementExpression.
 */
{}
{
	
   (
   	LOOKAHEAD(<PLUS_PLUS>)PlusplusStatement()
   |LOOKAHEAD(<MINUS_MINUS>)MinusMinusStatement()
   |LOOKAHEAD(2) Assignment() 
   |FunctionCallStatement() 
   ) ";"
}

void PlusplusStatement()      :
{}
{/*@bgen(jjtree) #PlusPlusNode( 1) */
        {
          CLVFPlusPlusNode jjtn001 = new CLVFPlusPlusNode(this, JJTPLUSPLUSNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(  VarExp() <PLUS_PLUS>  
	 |  <PLUS_PLUS> VarExp() )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
}

void MinusMinusStatement()      :
{}
{/*@bgen(jjtree) #MinusMinusNode( 1) */
        {
          CLVFMinusMinusNode jjtn001 = new CLVFMinusMinusNode(this, JJTMINUSMINUSNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( VarExp() <MINUS_MINUS>
	| <MINUS_MINUS> VarExp() )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) IfStatement */
  CLVFIfStatement jjtn000 = new CLVFIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(2) "else" Statement() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void SwitchStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) SwitchStatement */
  CLVFSwitchStatement jjtn000 = new CLVFSwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  "switch"  "(" Expression() ")"
  "{"
  	 CaseExpression()
     ( CaseExpression() )*
  	 [ LOOKAHEAD(1) "default" ":" Statement() ] { jjtn000.setDefaultClause(true); }
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void CaseExpression() :
{/*@bgen(jjtree) CaseExpression */
  CLVFCaseExpression jjtn000 = new CLVFCaseExpression(this, JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseExpression */
  try {
/*@egen*/
  "case" Expression() ":" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  CLVFWhileStatement jjtn000 = new CLVFWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  "while" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  CLVFForStatement jjtn000 = new CLVFForStatement(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  "for" "(" Expression() ";" Expression() ";" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void DoStatement()                 :
{/*@bgen(jjtree) #DoStatement( 2) */
  CLVFDoStatement jjtn000 = new CLVFDoStatement(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #DoStatement( 2) */
  try {
/*@egen*/
  "do" Statement() "while" "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ 
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  CLVFBreakStatement jjtn000 = new CLVFBreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	"break"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  CLVFContinueStatement jjtn000 = new CLVFContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
	"continue"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ReturnStatement() : {/*@bgen(jjtree) ReturnStatement */
  CLVFReturnStatement jjtn000 = new CLVFReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    "return" [LOOKAHEAD(2) Expression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
	

//(  [ Expression() ] ) #EmptyExpression(jjtree.nodeArity()==0)
}

void FunctionCallStatement() :
{/*@bgen(jjtree) FunctionCallStatement */
  CLVFFunctionCallStatement jjtn000 = new CLVFFunctionCallStatement(this, JJTFUNCTIONCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
  CLVFFunctionDeclaration functionNode;
}
{/*@bgen(jjtree) FunctionCallStatement */
         try {
/*@egen*/
	 t=<IDENTIFIER> { 
	 	jjtn000.setName( t.image); 
	 	if ((functionNode=(CLVFFunctionDeclaration)parserHelper.functionSymbol.get(t.image))==null){
	 		throw new ParseException(t,"function \""+t.image+"\" not declared");
	 	}
	 	jjtn000.setCallNode(functionNode);
	 	}
	"(" [ FunctionCallParameter() ] ( "," FunctionCallParameter() )* ")"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtreeCloseNodeScope(jjtn000);
         }
/*@egen*/
	
	 // verify number of call parameters
	 {
	 	if (functionNode.numParams!=jjtn000.jjtGetNumChildren())
	  		throw new ParseException(t,"wrong number of parameters when calling \""+functionNode.name+"\"");
	 }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void FunctionCallParameter()       : {}
{
	Expression()
}


/* !!!! INTERNAL FUNCTIONS && PROCEDURES START HERE !!!! */

void BuildInFunction()       :
{ Token t;}
{
	"substring" "(" AdditiveExpression() "," AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #SubStrNode( 3) */
                                                                                               {
                                                                                                 CLVFSubStrNode jjtn001 = new CLVFSubStrNode(this, JJTSUBSTRNODE);
                                                                                                 boolean jjtc001 = true;
                                                                                                 jjtree.openNodeScope(jjtn001);
                                                                                                 jjtreeOpenNodeScope(jjtn001);
                                                                                               }
                                                                                               try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                               } finally {
                                                                                                 if (jjtc001) {
                                                                                                   jjtree.closeNodeScope(jjtn001,  3);
                                                                                                   jjtreeCloseNodeScope(jjtn001);
                                                                                                 }
                                                                                               }
/*@egen*/ // (string,from index,length)
	|"uppercase" "(" AdditiveExpression()/*@bgen(jjtree) #UppercaseNode( 1) */
                                              {
                                                CLVFUppercaseNode jjtn002 = new CLVFUppercaseNode(this, JJTUPPERCASENODE);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  1);
                                                  jjtreeCloseNodeScope(jjtn002);
                                                }
                                              }
/*@egen*/
	|"lowercase" "(" AdditiveExpression()/*@bgen(jjtree) #LowercaseNode( 1) */
                                              {
                                                CLVFLowercaseNode jjtn003 = new CLVFLowercaseNode(this, JJTLOWERCASENODE);
                                                boolean jjtc003 = true;
                                                jjtree.openNodeScope(jjtn003);
                                                jjtreeOpenNodeScope(jjtn003);
                                              }
                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc003) {
                                                  jjtree.closeNodeScope(jjtn003,  1);
                                                  jjtreeCloseNodeScope(jjtn003);
                                                }
                                              }
/*@egen*/
	|"trim" "(" AdditiveExpression()/*@bgen(jjtree) #TrimNode( 1) */
                                         {
                                           CLVFTrimNode jjtn004 = new CLVFTrimNode(this, JJTTRIMNODE);
                                           boolean jjtc004 = true;
                                           jjtree.openNodeScope(jjtn004);
                                           jjtreeOpenNodeScope(jjtn004);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc004) {
                                             jjtree.closeNodeScope(jjtn004,  1);
                                             jjtreeCloseNodeScope(jjtn004);
                                           }
                                         }
/*@egen*/
	|"length" "(" AdditiveExpression()/*@bgen(jjtree) #LengthNode( 1) */
                                           {
                                             CLVFLengthNode jjtn005 = new CLVFLengthNode(this, JJTLENGTHNODE);
                                             boolean jjtc005 = true;
                                             jjtree.openNodeScope(jjtn005);
                                             jjtreeOpenNodeScope(jjtn005);
                                           }
                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc005) {
                                               jjtree.closeNodeScope(jjtn005,  1);
                                               jjtreeCloseNodeScope(jjtn005);
                                             }
                                           }
/*@egen*/
	|ConcatNode()
	|DateAddNode()
	|DateDiffNode()
	|"today" "("/*@bgen(jjtree) #TodayNode( 0) */
                     {
                       CLVFTodayNode jjtn006 = new CLVFTodayNode(this, JJTTODAYNODE);
                       boolean jjtc006 = true;
                       jjtree.openNodeScope(jjtn006);
                       jjtreeOpenNodeScope(jjtn006);
                     }
                     try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc006) {
                         jjtree.closeNodeScope(jjtn006,  0);
                         jjtreeCloseNodeScope(jjtn006);
                       }
                     }
/*@egen*/
	|"isnull" "(" AdditiveExpression()/*@bgen(jjtree) #IsNullNode( 1) */
                                           {
                                             CLVFIsNullNode jjtn007 = new CLVFIsNullNode(this, JJTISNULLNODE);
                                             boolean jjtc007 = true;
                                             jjtree.openNodeScope(jjtn007);
                                             jjtreeOpenNodeScope(jjtn007);
                                           }
                                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc007) {
                                               jjtree.closeNodeScope(jjtn007,  1);
                                               jjtreeCloseNodeScope(jjtn007);
                                             }
                                           }
/*@egen*/
	|"nvl" "(" AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #NVLNode( 2) */
                                                                 {
                                                                   CLVFNVLNode jjtn008 = new CLVFNVLNode(this, JJTNVLNODE);
                                                                   boolean jjtc008 = true;
                                                                   jjtree.openNodeScope(jjtn008);
                                                                   jjtreeOpenNodeScope(jjtn008);
                                                                 }
                                                                 try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc008) {
                                                                     jjtree.closeNodeScope(jjtn008,  2);
                                                                     jjtreeCloseNodeScope(jjtn008);
                                                                   }
                                                                 }
/*@egen*/
	|"replace" "(" AdditiveExpression() "," AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #ReplaceNode( 3) */
                                                                                              {
                                                                                                CLVFReplaceNode jjtn009 = new CLVFReplaceNode(this, JJTREPLACENODE);
                                                                                                boolean jjtc009 = true;
                                                                                                jjtree.openNodeScope(jjtn009);
                                                                                                jjtreeOpenNodeScope(jjtn009);
                                                                                              }
                                                                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                              } finally {
                                                                                                if (jjtc009) {
                                                                                                  jjtree.closeNodeScope(jjtn009,  3);
                                                                                                  jjtreeCloseNodeScope(jjtn009);
                                                                                                }
                                                                                              }
/*@egen*/ // (string,pattern,new_content)
	|Str2NumNode()
	|Num2StrNode()
	|"iif" "(" ConditionalOrExpression() "," AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #IffNode( 3) */
                                                                                               {
                                                                                                 CLVFIffNode jjtn010 = new CLVFIffNode(this, JJTIFFNODE);
                                                                                                 boolean jjtc010 = true;
                                                                                                 jjtree.openNodeScope(jjtn010);
                                                                                                 jjtreeOpenNodeScope(jjtn010);
                                                                                               }
                                                                                               try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                               } finally {
                                                                                                 if (jjtc010) {
                                                                                                   jjtree.closeNodeScope(jjtn010,  3);
                                                                                                   jjtreeCloseNodeScope(jjtn010);
                                                                                                 }
                                                                                               }
/*@egen*/ // (condition, express if true, express else)
	|Date2StrNode()
	|Str2DateNode()
	|"sqrt" "(" AdditiveExpression()/*@bgen(jjtree) #SqrtNode( 1) */
                                         {
                                           CLVFSqrtNode jjtn011 = new CLVFSqrtNode(this, JJTSQRTNODE);
                                           boolean jjtc011 = true;
                                           jjtree.openNodeScope(jjtn011);
                                           jjtreeOpenNodeScope(jjtn011);
                                         }
                                         try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc011) {
                                             jjtree.closeNodeScope(jjtn011,  1);
                                             jjtreeCloseNodeScope(jjtn011);
                                           }
                                         }
/*@egen*/
	|"log" "(" AdditiveExpression()/*@bgen(jjtree) #LogNode( 1) */
                                        {
                                          CLVFLogNode jjtn012 = new CLVFLogNode(this, JJTLOGNODE);
                                          boolean jjtc012 = true;
                                          jjtree.openNodeScope(jjtn012);
                                          jjtreeOpenNodeScope(jjtn012);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc012) {
                                            jjtree.closeNodeScope(jjtn012,  1);
                                            jjtreeCloseNodeScope(jjtn012);
                                          }
                                        }
/*@egen*/
	|"log10" "(" AdditiveExpression()/*@bgen(jjtree) #Log10Node( 1) */
                                          {
                                            CLVFLog10Node jjtn013 = new CLVFLog10Node(this, JJTLOG10NODE);
                                            boolean jjtc013 = true;
                                            jjtree.openNodeScope(jjtn013);
                                            jjtreeOpenNodeScope(jjtn013);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc013) {
                                              jjtree.closeNodeScope(jjtn013,  1);
                                              jjtreeCloseNodeScope(jjtn013);
                                            }
                                          }
/*@egen*/
	|"exp" "(" AdditiveExpression()/*@bgen(jjtree) #ExpNode( 1) */
                                        {
                                          CLVFExpNode jjtn014 = new CLVFExpNode(this, JJTEXPNODE);
                                          boolean jjtc014 = true;
                                          jjtree.openNodeScope(jjtn014);
                                          jjtreeOpenNodeScope(jjtn014);
                                        }
                                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc014) {
                                            jjtree.closeNodeScope(jjtn014,  1);
                                            jjtreeCloseNodeScope(jjtn014);
                                          }
                                        }
/*@egen*/
	|"pow" "(" AdditiveExpression()"," AdditiveExpression()/*@bgen(jjtree) #PowNode( 2) */
                                                                {
                                                                  CLVFPowNode jjtn015 = new CLVFPowNode(this, JJTPOWNODE);
                                                                  boolean jjtc015 = true;
                                                                  jjtree.openNodeScope(jjtn015);
                                                                  jjtreeOpenNodeScope(jjtn015);
                                                                }
                                                                try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                } finally {
                                                                  if (jjtc015) {
                                                                    jjtree.closeNodeScope(jjtn015,  2);
                                                                    jjtreeCloseNodeScope(jjtn015);
                                                                  }
                                                                }
/*@egen*/
	|"pi" "("/*@bgen(jjtree) #PINode( 0) */
                  {
                    CLVFPINode jjtn016 = new CLVFPINode(this, JJTPINODE);
                    boolean jjtc016 = true;
                    jjtree.openNodeScope(jjtn016);
                    jjtreeOpenNodeScope(jjtn016);
                  }
                  try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc016) {
                      jjtree.closeNodeScope(jjtn016,  0);
                      jjtreeCloseNodeScope(jjtn016);
                    }
                  }
/*@egen*/
	|"round" "(" AdditiveExpression()/*@bgen(jjtree) #RoundNode( 1) */
                                          {
                                            CLVFRoundNode jjtn017 = new CLVFRoundNode(this, JJTROUNDNODE);
                                            boolean jjtc017 = true;
                                            jjtree.openNodeScope(jjtn017);
                                            jjtreeOpenNodeScope(jjtn017);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc017) {
                                              jjtree.closeNodeScope(jjtn017,  1);
                                              jjtreeCloseNodeScope(jjtn017);
                                            }
                                          }
/*@egen*/
	|"trunc" "(" AdditiveExpression()/*@bgen(jjtree) #TruncNode( 1) */
                                          {
                                            CLVFTruncNode jjtn018 = new CLVFTruncNode(this, JJTTRUNCNODE);
                                            boolean jjtc018 = true;
                                            jjtree.openNodeScope(jjtn018);
                                            jjtreeOpenNodeScope(jjtn018);
                                          }
                                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc018) {
                                              jjtree.closeNodeScope(jjtn018,  1);
                                              jjtreeCloseNodeScope(jjtn018);
                                            }
                                          }
/*@egen*/
	|Date2NumNode()
	
}


void BuildInProcedure()       : {}
{
	"print_err" "(" AdditiveExpression()/*@bgen(jjtree) #PrintErrNode( 1) */
                                             {
                                               CLVFPrintErrNode jjtn001 = new CLVFPrintErrNode(this, JJTPRINTERRNODE);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
                                               jjtreeOpenNodeScope(jjtn001);
                                             }
                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  1);
                                                 jjtreeCloseNodeScope(jjtn001);
                                               }
                                             }
/*@egen*/
	|"print_stack" "("/*@bgen(jjtree) #PrintStackNode( 0) */
                           {
                             CLVFPrintStackNode jjtn002 = new CLVFPrintStackNode(this, JJTPRINTSTACKNODE);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                             jjtreeOpenNodeScope(jjtn002);
                           }
                           try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002,  0);
                               jjtreeCloseNodeScope(jjtn002);
                             }
                           }
/*@egen*/
	|"breakpoint" "("/*@bgen(jjtree) #BreakpointNode( 0) */
                          {
                            CLVFBreakpointNode jjtn003 = new CLVFBreakpointNode(this, JJTBREAKPOINTNODE);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
                            jjtreeOpenNodeScope(jjtn003);
                          }
                          try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003,  0);
                              jjtreeCloseNodeScope(jjtn003);
                            }
                          }
/*@egen*/
}

void ConcatNode() : // concatenates strings
{/*@bgen(jjtree) ConcatNode */
  CLVFConcatNode jjtn000 = new CLVFConcatNode(this, JJTCONCATNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConcatNode */
   try {
/*@egen*/
   "concat" "(" AdditiveExpression() ( "," AdditiveExpression() )+ ")"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

void DateAddNode() :
{/*@bgen(jjtree) DateAddNode */
  CLVFDateAddNode jjtn000 = new CLVFDateAddNode(this, JJTDATEADDNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) DateAddNode */
        try {
/*@egen*/
	"dateadd" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtn000.setCalendarField(t.image); }
	")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void DateDiffNode() :
{/*@bgen(jjtree) DateDiffNode */
  CLVFDateDiffNode jjtn000 = new CLVFDateDiffNode(this, JJTDATEDIFFNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) DateDiffNode */
        try {
/*@egen*/
	"datediff" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtn000.setCalendarField(t.image); }
	")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Date2StrNode() :
{/*@bgen(jjtree) Date2StrNode */
  CLVFDate2StrNode jjtn000 = new CLVFDate2StrNode(this, JJTDATE2STRNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Date2StrNode */
        try {
/*@egen*/
	"date2str" "(" AdditiveExpression() "," t=<STRING_LITERAL> { jjtn000.setFormat(t.image.substring(1,t.image.length()-1)); } 
	 ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Str2DateNode() :
{/*@bgen(jjtree) Str2DateNode */
  CLVFStr2DateNode jjtn000 = new CLVFStr2DateNode(this, JJTSTR2DATENODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Str2DateNode */
        try {
/*@egen*/
	"str2date" "(" AdditiveExpression() "," t=<STRING_LITERAL> { jjtn000.setFormat(t.image.substring(1,t.image.length()-1)); }
	")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void Date2NumNode() :
{/*@bgen(jjtree) Date2NumNode */
  CLVFDate2NumNode jjtn000 = new CLVFDate2NumNode(this, JJTDATE2NUMNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Date2NumNode */
        try {
/*@egen*/
	"date2num" "(" AdditiveExpression() "," t=<DATE_FIELD_LITERAL> { jjtn000.setCalendarField(t.image); } ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void Str2NumNode() :
{/*@bgen(jjtree) Str2NumNode */
        CLVFStr2NumNode jjtn000 = new CLVFStr2NumNode(this, JJTSTR2NUMNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/ 
	Token t;
}
{/*@bgen(jjtree) Str2NumNode */
        try {
/*@egen*/
	"str2num" "(" AdditiveExpression() 
	
	[ ","  
	 (<INT_VAR>{
      jjtn000.setType(INT_VAR);
    }
    | <LONG_VAR>{
      jjtn000.setType(LONG_VAR);
    }
    | <DOUBLE_VAR>{
      jjtn000.setType(DOUBLE_VAR);
    }
    | <DECIMAL_VAR>{
      jjtn000.setType(DECIMAL_VAR);
    }
    )
    [ "," t=<INTEGER_LITERAL> {jjtn000.setRadix(t.image);}]
    ] 
    
    ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Num2StrNode() :
{/*@bgen(jjtree) Num2StrNode */
        CLVFNum2StrNode jjtn000 = new CLVFNum2StrNode(this, JJTNUM2STRNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/ 
	Token t;
}
{/*@bgen(jjtree) Num2StrNode */
        try {
/*@egen*/
	"num2str" "(" AdditiveExpression() 
    [ "," t=<INTEGER_LITERAL> {jjtn000.setRadix(t.image);}]
    ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


TOKEN : { <DATE_FIELD_LITERAL : "year" |"month" | "week" | "day" | "hour" | "minute" | "sec" | "second" | "millisec" | "millisecond" > }


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}

/* error token which is generated by lexer if it can't match with any other */
TOKEN:
{
   <ERROR: ~[] >
}
