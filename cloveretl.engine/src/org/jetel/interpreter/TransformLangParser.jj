/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TransformLangParser.jj */
/*@egen*/
/*
    Clover.ETL - Transformation language grammar.
    (c) 2004-07 David.Pavlis <david.pavlis@centrum.cz>
    Released under LGPL license.
    
    (Adapted from Ken Beesley and Metamata's javacc 'Interpreter' example.)
 
*/


/*
 * Generated ParseException.java must be modified in order to report only one erroneous token.
 * Update getMessge() method to contain only
 		for (int i = 0; i < maxSize; i++) {
			if (i != 0)
				retval += " ";
			if (tok.kind == 0) {
				retval += tokenImage[0];
				break;
			}
			retval += add_escapes(tok.image);
			tok = tok.next;
		}
 *
 */
options {
              
   STATIC=false; 
                 
   JDK_VERSION = "1.5";
   CACHE_TOKENS=true;
                         
                      
                                                  
                                        
                         // save line & column number
   JAVA_UNICODE_ESCAPE = true ;
                           // change to True only if new Node has been added 
   
}


/* *** Specifcation of the parser class *** */

PARSER_BEGIN(TransformLangParser)

package org.jetel.interpreter;

import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.ASTnode.*;
import org.jetel.util.string.StringUtils;
import org.jetel.util.file.FileUtils;
import org.jetel.util.string.CharSequenceReader;
import org.jetel.component.CustomizedRecordTransform;
import org.jetel.component.RecordTransform;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.channels.Channels;
import java.net.MalformedURLException;
import java.net.URL;

public class TransformLangParser extends ExpParser/*@bgen(jjtree)*/implements TransformLangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTransformLangParserState jjtree = new JJTTransformLangParserState();

/*@egen*/

	   public static final String SRC_ENCODING = "UTF-8";
		
       DataRecordMetadata[] inRecordsMetadata;
       DataRecordMetadata[] outRecordsMetadata;
       Map inDataRecordsMap;
       Map outDataRecordsMap;
	   ParserHelper parserHelper;       
       List<Throwable> parseExceptions;
       CustomizedRecordTransform custRecordTransform;
       String sourceFilename;       
       boolean hasEvalNode=false;
       URL projectDirURL = null;

       public TransformLangParser(DataRecordMetadata recordMetadata,java.io.InputStream stream){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],stream,SRC_ENCODING);
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream){
			this(inRecordsMetadata,outRecordsMetadata,stream,SRC_ENCODING);
       							
       }
       
       public TransformLangParser(DataRecordMetadata recordMetadata,CharSequence source){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],source);
       }

	   public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							CharSequence source){
       							this(new CharSequenceReader(source));
       		  parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList<Throwable>();
              for(int i=0;i<inRecordsMetadata.length;i++){
            	  if (inRecordsMetadata[i] != null)
            		  inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
            	  if (outRecordsMetadata[i] != null)
            		  outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }
       							
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream,String encoding){
              this(stream,encoding);
              parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList<Throwable>();
              for(int i=0;i<inRecordsMetadata.length;i++){
            	  if (inRecordsMetadata[i] != null)
            		  inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
            	  if (outRecordsMetadata[i] != null)
            		  outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }
      }
      
      public TransformLangParser(TransformLangParser parent,String filename,java.io.InputStream stream){
			  this(stream);
			  this.sourceFilename=filename;
			  this.parserHelper=parent.parserHelper;
              this.inRecordsMetadata=parent.inRecordsMetadata;
              this.outRecordsMetadata=parent.outRecordsMetadata;
              this.inDataRecordsMap=parent.inDataRecordsMap;
              this.outDataRecordsMap=parent.outDataRecordsMap;
              this.parseExceptions=parent.parseExceptions;    	
      }

	 public TransformLangParser(TransformLangParser parent,String sourcename,CharSequence source){
			  this(new CharSequenceReader(source));
			  this.sourceFilename=sourcename;
			  this.parserHelper=parent.parserHelper;
              this.inRecordsMetadata=parent.inRecordsMetadata;
              this.outRecordsMetadata=parent.outRecordsMetadata;
              this.inDataRecordsMap=parent.inDataRecordsMap;
              this.outDataRecordsMap=parent.outDataRecordsMap;
              this.parseExceptions=parent.parseExceptions;
      }
      
      public void ReInit(CharSequence source, boolean reset){
      	if (reset){
      		this.parserHelper.reset();
      	}
      	this.parseExceptions.clear();
      	this.ReInit(new CharSequenceReader(source));
      }
      
      public void setTabSize(int size){
      		this.token_source.input_stream.setTabSize(size);
      }
      
      /** 
      	* Sets project root directory from where relative paths will be resolved
      	* in import statements. This should be in common cases PROJECT_DIR definition
      	* from workspace.prm
      	*
      	* If set to null or invalid URL, relative paths will be resolved from working directory
      	* where java is running.
      	*/
      @Deprecated
      public void setProjectDir(String projectDir) {
      		try {
      			this.projectDirURL = StringUtils.isEmpty(projectDir) 
      								? null 
      								: FileUtils.getFileURL(projectDir);
      		} catch (MalformedURLException e) {
      			// nowhere to report unfortunately...
      			this.projectDirURL = null;
      		}
      }

      /**
        * Sets project root directory from where relative paths will be resolved
        * in import statements. This should be in common cases PROJECT_DIR definition
        * from workspace.prm
        * 
        * @param projectURL
      */
      public void setProjectURL(URL projectURL) {
        this.projectDirURL = projectURL;
      }

      public final DataRecordMetadata getInRecordMeta(){
    	  if (inRecordsMetadata.length>0)
              return inRecordsMetadata[0];
    	  else 
    		  return null;
      }
      
      public final int getInRecordNum(String name){
      	try{
             return ((Integer)inDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final int getOutRecordNum(String name){
        try{
             return ((Integer)outDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final DataRecordMetadata getInRecordMeta(int num){
      	try{
             return inRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
      public final DataRecordMetadata getOutRecordMeta(int num){
      	try{
             return outRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
       public final DataRecordMetadata[] getInRecordMetadata(){
             return inRecordsMetadata;
      }
      
      public final DataRecordMetadata[] getOutRecordMetadata(){
             return outRecordsMetadata;
      }
      
      
     /**
      *  Returns map of function symbols where
      *  under function name is saved reference to appropriate 
      *  function definition/declaration node - upon that node
      *  visit() method of TransformationLangExecutor can be called to
      *  execute function's body. 
      */
      
      public final Map getFunctions(){
        return parserHelper.functionSymbol;
    }
    
     public final CLVFFunctionDeclaration getFunction(String name){
     	return (CLVFFunctionDeclaration) parserHelper.functionSymbol.get(name);
     }
      
      
     public CustomizedRecordTransform getCustRecordTransform() {
		if (custRecordTransform==null)
			custRecordTransform=new CustomizedRecordTransform(null);
		return custRecordTransform;
	}
     
     /**
      *  Returns map of global variable symbols where
      *  under variable name is saved appropriate slot in 
      *  which variable's value is saved. 
      */
      public final Map getGlobalVariables(){
     	return parserHelper.globalVariableSymbol;
     }
     
     public final int getGlobalVariableSlot(String name){
     	return parserHelper.getGlobalVariableSlot(name);
     }
     
     public static final String unquote(String image){
     	return image.substring(1,image.length()-1);
     }
      
   /**
    * Save the current line number for run-time error messages
    */
   void jjtreeOpenNodeScope(Node n)
    {
       Token t = getToken(0);
       if (t!= null) {
           ((SimpleNode) n).setLineNumber(t.beginLine);
           ((SimpleNode) n).setColumnNumber(t.beginColumn);
       }
       ((SimpleNode) n).setSourceFilename(sourceFilename);
    }

   /**
    * Dummy routine, required because NODE_SCOPE_HOOK is true
    */
    void jjtreeCloseNodeScope(Node n)
    {
    }
    
    public List<Throwable> getParseExceptions(){
    	return parseExceptions;
    }
    
    /**
     * Does the parsed AST tree contain any "eval" node ?
     * If so, executor will need reference to parser to process such
     * nodes
     *
     */
    
    public boolean hasEvalNode(){
    	return hasEvalNode;
    }
      
}

PARSER_END(TransformLangParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" | "\n\r" }


/* HANDLING COMMENTS */
SPECIAL_TOKEN: {  <"/*"> : WithinComment }
<WithinComment> SPECIAL_TOKEN:
{
    <"*/"> : DEFAULT
}
<WithinComment> MORE: { <~[]> }

SPECIAL_TOKEN : 
{
    < SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > 
} 


/*
SPECIAL_TOKEN: { <"'"> : WithinSingleQuote }
<WithinSingleQuote> SPECIAL_TOKEN:
{
	<"'"> : DEFAULT
}
<WithinSingleQuote> MORE: { <~[]> }
*/

/* Literals */
TOKEN : {
  <INTEGER_LITERAL:  ["1"-"9"] (["0"-"9"])* (["l","L"])? >
|  <#DIGIT: ["0"-"9"]>
|  <#LETTER: [ "a"-"z", "A"-"Z" ] >
|  <#UNDERSCORE: [ "_" ] > 
| <HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])?> 
|  <OCTAL_LITERAL: "0" (["0"-"7"])* (["l","L"])?> 
|<FLOATING_POINT_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|<STRING_LITERAL: /* <QUOTED_STRING> | */ <DQUOTED_STRING> >
//  <#QUOTED_STRING: "\'" (~["\"","\\","\n","\r"])* "\'">
|  <#DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
| <UNTERMINATED_STRING_LITERAL: /*<UNTERMINATED_QUOTED_STRING> | */ <UNTERMINATED_DQUOTED_STRING> >
// |  <#UNTERMINATED_QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|  <#UNTERMINATED_DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|<BOOLEAN_LITERAL: <TRUE> | <FALSE> >
| <#TRUE: "true">
| <#FALSE: "false">
|<DATE_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? >
|<DATETIME_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? " " <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)?>
|<SEMICOLON: ";">
|<BLOCK_START: "{">
|<BLOCK_END: "}">
|<NULL_LITERAL: "null">
}


TOKEN: {
	< STRING_PLAIN_LITERAL:
      "'"
        >
        {
        	char inChar,prevChar=' ';
        	image.setLength(0);
        	int startLine=input_stream.getBeginLine();
        	int startCol=input_stream.getBeginColumn();
        	try{
        		LOOP: while(true){
        			inChar=input_stream.readChar();
        			switch(inChar){
        			case '\'':
        				if (prevChar=='\\')
        					image.setLength(image.length()-1);
        				else
        					break LOOP;
        			break;
        			case '\r':
        			case '\n':
        				if (prevChar=='\\')
        					image.setLength(image.length()-1);
        				else
        					throw new TokenMgrError("unterminated string starting on line "+startLine+" column "+startCol,0);
        				break;
        			}
        			image.append(inChar);
        			prevChar=inChar;
        		}
        	}catch(java.io.IOException ioe){
        		throw new TokenMgrError(ioe.getMessage(),0);
        	}
        	matchedToken.image=image.toString();
        }
}

TOKEN : {
<MAPPING: ":=">
}

/* Logical operators */
TOKEN [IGNORE_CASE]: {
  < OR: "or" | "||" >
| < AND: "and" | "&&" >
| < NOT: "not" | "!" >
}


/* Comparison Operators */
TOKEN [IGNORE_CASE]: {
  < EQUAL: "==" | ".eq.">
| < NON_EQUAL: "!=" | "<>" | ".ne." >
| < IN_OPER:  ".in." >
| < LESS_THAN: "<" | ".lt." >
| < LESS_THAN_EQUAL: "<=" | "=<" | ".le." >
| < GREATER_THAN: ">" | ".gt.">
| < GREATER_THAN_EQUAL: ">=" | "=>" | ".ge." >
| < REGEX_EQUAL: "~=" | ".regex." >
}

TOKEN: {
<CMPOPERATOR : <EQUAL> | <NON_EQUAL> | <LESS_THAN> | <LESS_THAN_EQUAL> | <GREATER_THAN>
| <GREATER_THAN_EQUAL> | <REGEX_EQUAL> >
}

/* Numeric Operators */
TOKEN: {
 <MINUS: "-" >
| <PLUS: "+" >
| <MULTIPLY: "*" >
| <DIVIDE: "/" >
| <MODULO: "%" >
| <INCR: "++" >
| <DECR: "--" >
| <TILDA: "~" >
}


/* Clover Field Identifiers */
TOKEN: {
  < FIELD_ID: "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}

/* Clover Record Field Identifiers */
TOKEN: {
  < REC_NAME_FIELD_ID:  "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* "." (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
  | < REC_NAME_FIELD_NUM:  "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* "." <DIGIT> (<DIGIT>)* >
  | < REC_NUM_FIELD_ID:  "$" <DIGIT> (<DIGIT>)* "." (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
  | < REC_NUM_FIELD_NUM: "$" <DIGIT> (<DIGIT>)* "." <DIGIT> (<DIGIT>)* >
  | <REC_NUM_WILDCARD: "$" (<DIGIT>) (<DIGIT>)* "." "*" >
  | <REC_NAME_WILDCARD: "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* "." "*" >
}

/* Clover Record Identifiers */
TOKEN: {
	<REC_NUM_ID: "@" (<DIGIT>) (<DIGIT>)* >
	|<REC_NAME_ID: "@" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}


/* Parenthesis */
TOKEN: {
  <OPEN_PAR: "("> |
  <CLOSE_PAR: ")">
}


TOKEN : /* variable Types */
{ /*<VARIABLE_TYPE: <INT_VAR>|<LONG_VAR>|<DATE_VAR>|<DOUBLE_VAR>|<DECIMAL_VAR>|
	<BOOLEAN_VAR>|<STRING_VAR>|<LIST_VAR>|<MAP_VAR>|<RECORD_VAR>|<OBJECT_VAR>> |*/
   <INT_VAR: "int" >
 |  <LONG_VAR: "long" >
 |  <DATE_VAR: "date" >
 |  <DOUBLE_VAR: "number" | "double" >
 |  <DECIMAL_VAR: "decimal" >
 |  <BOOLEAN_VAR: "boolean" >
 |  <STRING_VAR: "string" >
 |  <BYTE_VAR: "bytearray" >
 |  <LIST_VAR: "list" >
 |  <MAP_VAR: "map" >
 |  <RECORD_VAR: "record" >
 |  <OBJECT_VAR: "object" >
 }

/* reserved workds */
TOKEN :
{
  < BREAK: "break" >
| < CONTINUE: "continue" >
| < ELSE: "else" >
| < FOR: "for" >
| < FOR_EACH: "foreach" >
| < FUNCTION: "function" >
| < IF: "if" >
| < RETURN: "return" >
| < WHILE: "while" >
| < CASE: "case" >
| < ENUM: "enum" >
| < IMPORT: "import" >
| < SWITCH: "switch" >
| < CASE_DEFAULT: "default" >
| < DO: "do" >
| < TRY: "try" >
| < CATCH: "catch" >
| < RETURN_RECORD_SKIP: "SKIP" >
| < RETURN_RECORD_SEND_ALL: "ALL" >
| < RETURN_RECORD_OK: "OK" >
| < RETURN_RECORD_ERROR: "ERROR" >
}

TOKEN :  /* date parts */
{ <YEAR: "year" >
  |<MONTH: "month" > 
  |<WEEK: "week" >
  |<DAY:  "day" >
  |<HOUR:  "hour" >
  |<MINUTE: "minute" >
  |<SECOND: "second" >
  |<MILLISEC: "millisec" >
}

/* DICTIONARY TOKENS */
TOKEN:
{
	<READ_DICT: "read_dict">
	|<WRITE_DICT: "write_dict">
	|<DELETE_DICT: "delete_dict">
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}
  

/* 
 *  The start nonterminal and its productions. 
 *  Nonterminal & productions for transformation language
 */

CLVFStart Start() : {/*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}        // Start -> Exp
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  CompilationUnit() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { 
  	if (parseExceptions.size()>0){
  		throw (ParseException)parseExceptions.get(0);
  	}	
  	return jjtn000; 
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* 
 *  The start expression nonterminal and its productions. 
 *  Nonterminal & productions for expressions only
 */


CLVFStartExpression StartExpression() : {/*@bgen(jjtree) StartExpression */
  CLVFStartExpression jjtn000 = new CLVFStartExpression(this, JJTSTARTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartExpression */
        try {
/*@egen*/
	ConditionalOrExpression() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{ 
		if (parseExceptions.size()>0){
  			throw (ParseException)parseExceptions.get(0);
  		}		
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CompilationUnit()       :
{
   String name;
}
{
	(ImportSource() ";" )*

   (
       VarDeclaration() ";"
   
     |
       Statement()
       
     |
       FunctionDeclaration()
   )*
   
   (
  		Mapping() ";"
   	)*
   	
   <EOF>
}

void ImportSource() :{/*@bgen(jjtree) ImportSource */
        CLVFImportSource jjtn000 = new CLVFImportSource(this, JJTIMPORTSOURCE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/	Token t;
	String filenameURL;}{/*@bgen(jjtree) ImportSource */
        try {
/*@egen*/	// must parse whole tree and insert it at this place	<IMPORT> ( t=<STRING_LITERAL> { filenameURL=unquote(t.image); }
				| t=<STRING_PLAIN_LITERAL> { filenameURL=t.image; } )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/	{		// save line number - as openNodeScope hook does not work reliably
		jjtn000.setLineNumber(t.beginLine);
		InputStream stream;
		jjtn000.setSourceToImport(filenameURL);
		try{
			stream=Channels.newInputStream(FileUtils.getReadableChannel(projectDirURL, filenameURL)); 
			// stream=new BufferedInputStream(new FileInputStream(filenameURL));
		}catch(Exception ex){
			throw new ParseException(t,"can't open import file \""+filenameURL+"\"",ex);
		} 
		CLVFStart parseTree;
		try{
			TransformLangParser parser = new TransformLangParser(this,filenameURL,stream);
		 	parseTree = parser.Start();
		}catch(ParseException e){
			e.setFilename(filenameURL);
			throw e;
			//new ParseException(t,"error when parsing import file \""+filenameURL+"\"",e);
		}		jjtn000.jjtAddChild(parseTree, 0);	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/}

void FunctionDeclaration() :
{/*@bgen(jjtree) FunctionDeclaration */
        CLVFFunctionDeclaration jjtn000 = new CLVFFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t,r;
 	int order=0; 
 }
{/*@bgen(jjtree) FunctionDeclaration */
        try {
/*@egen*/
	//TODO: add function types
	
	<FUNCTION>
	t = <IDENTIFIER> { 
		jjtn000.setName(t.image); 
		if (parserHelper.functionSymbol.put(t.image,jjtn000)!=null){
			 throw new ParseException(t,"function "+t.image+" already declared");	
			}
		parserHelper.enteredFunctionDeclaration(t.image);
		// save line number - as openNodeScope hook does not work reliably
		jjtn000.setLineNumber(t.beginLine);
		}
		
	"("  
		 [ 
		 	t = <IDENTIFIER> { jjtn000.addVarName(order++, t.image); 
							if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} 
		
		( ","  
			  t = <IDENTIFIER> { jjtn000.addVarName(order++,t.image); 
							if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} )*
		] 
	
	")"
	"{"
	  ( VarDeclaration() ";" )*
	  ( Statement() )* 
	  [ ( Mapping() ";" )+ [ ReturnStatement() ] ]
	 
	 "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		parserHelper.exitedFunctionDeclaration();	
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}
/*
 JAVACODE
    void FuncDeclarationExit() #void {
	
	  parserHelper.exitedFunctionDeclaration();	
    }
*/

void VarDeclaration():
{/*@bgen(jjtree) VarDeclaration */
  CLVFVarDeclaration jjtn000 = new CLVFVarDeclaration(this, JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/  Token t,l,p;  int varSlot;
}{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/    (<INT_VAR> |  <LONG_VAR> | <DOUBLE_VAR> | <DECIMAL_VAR> | <STRING_VAR>		| <DATE_VAR> | <BYTE_VAR> | <BOOLEAN_VAR> | <LIST_VAR> | <MAP_VAR> | <OBJECT_VAR> | <RECORD_VAR> ) 
    
    {
    	jjtn000.setType(getToken(0).kind);
    	// set line number as the openNodeScope hook does not work reliably for this
    	jjtn000.setLineNumber(getToken(0).beginLine);
    }

    [	"("  VarSpec(jjtn000)
    ")"   ] 
      
    t = <IDENTIFIER>{      if (!parserHelper.addVariable(t.image,jjtn000.getType())){        throw new ParseException(t, "variable ["+t.image+"] already declared");
      }      else {        // is it local variable declaration ?
		if (parserHelper.inFunctionDeclaration){          jjtn000.setVarSlot(parserHelper.getLocalVariableSlot(t.image));          jjtn000.setLocalVariale(true);        }        else {          jjtn000.setVarSlot(parserHelper.getGlobalVariableSlot(t.image));          jjtn000.setLocalVariale(false);        }        jjtn000.setName(t.image);      }    }
    
    ["=" ConditionalOrExpression() {jjtn000.hasInitValue(true);} ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
    
    
// }catch (ParseException e){//    parseExceptions.add(e);//following code causes parser to cough     
//do {//      t = getNextToken();//    }//    while (t.kind != SEMICOLON);//  }}

void VarSpec(CLVFVarDeclaration node)       : 
{
	Token l,p;
}
{
	  l=<IDENTIFIER> { node.setMetadataId(l.image);} 
  	|  		
  	l=<INTEGER_LITERAL> { node.setLength(l.image);} [ "," p=<INTEGER_LITERAL>  { node.setPrecision(p.image); } ]
  	|
  	 l=<REC_NUM_ID> {  node.setRecordNum(l,l.image);}
  	|
  	 l=<REC_NAME_ID> { node.setRecordName(l,l.image); }
   	
}

void Expression()       : {}
{
  //LOOKAHEAD( PrimaryExpression() "=" )
  LOOKAHEAD( VarExp() "=" )
  		Assignment()
  |
  	ConditionalOrExpression()   
  
}

void Assignment()             :
{/*@bgen(jjtree) Assignment */
  CLVFAssignment jjtn000 = new CLVFAssignment(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
 // PrimaryExpression() "=" Expression()
 	VarExp() "=" ConditionalOrExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Mapping()       : 
{ }
{	
  	DirectMapping()
  	|WildCardMapping()
}


void DirectMapping() : // assignment of value to Clover field
{/*@bgen(jjtree) DirectMapping */
  CLVFDirectMapping jjtn000 = new CLVFDirectMapping(this, JJTDIRECTMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t ;}
{/*@bgen(jjtree) DirectMapping */
        try {
/*@egen*/	
  	/*OutputFieldExp() */
  	try{
  	
  (	t = <FIELD_ID> { jjtn000.setFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform()); } 
  | t = <REC_NAME_FIELD_ID> { jjtn000.setRecordFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform()); }
  | t= <REC_NAME_FIELD_NUM>  { jjtn000.setRecordNameFieldNum(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform()); }
  | t = <REC_NUM_FIELD_ID> { jjtn000.setRecordNumFieldName(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform()); }
  | t = <REC_NUM_FIELD_NUM> { jjtn000.setRecordNumFieldNum(t.image); jjtn000.updateMappingMatrix(getCustRecordTransform()); } 
  	)
  	}catch(ParseException ex){
  		ex.setCurrentToken(getToken(0));
  		throw ex;
  	}
  	
  	<MAPPING> 
  	
  	ConditionalOrExpression() (":" ConditionalOrExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void WildCardMapping() :
{/*@bgen(jjtree) WildCardMapping */
  CLVFWildCardMapping jjtn000 = new CLVFWildCardMapping(this, JJTWILDCARDMAPPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t,r;}
{/*@bgen(jjtree) WildCardMapping */
         try {
/*@egen*/
	 ( 	 LOOKAHEAD(3)
	 t=<REC_NUM_WILDCARD> <MAPPING> r=<REC_NUM_WILDCARD>/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                               jjtreeCloseNodeScope(jjtn000);
                                                             }
/*@egen*/ {jjtn000.setRule(t.image,r.image,getCustRecordTransform()); }
	 | t=<REC_NUM_WILDCARD> <MAPPING> r=<REC_NAME_WILDCARD>/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtreeCloseNodeScope(jjtn000);
                                                                }
/*@egen*/ {jjtn000.setRule(t.image,r.image,getCustRecordTransform()); }
	 |LOOKAHEAD(3) t=<REC_NAME_WILDCARD> <MAPPING> r=<REC_NUM_WILDCARD>/*@bgen(jjtree)*/
                                                                            {
                                                                              jjtree.closeNodeScope(jjtn000, true);
                                                                              jjtc000 = false;
                                                                              jjtreeCloseNodeScope(jjtn000);
                                                                            }
/*@egen*/ {jjtn000.setRule(t.image,r.image,getCustRecordTransform()); }
	 | t=<REC_NAME_WILDCARD> <MAPPING> r=<REC_NAME_WILDCARD>/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                   jjtreeCloseNodeScope(jjtn000);
                                                                 }
/*@egen*/ {jjtn000.setRule(t.image,r.image,getCustRecordTransform()); }
	 )/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

/* Other nonterminals and their productions */

void ConditionalOrExpression()       : {}        
{
   ConditionalAndExpression()
   ( <OR>/*@bgen(jjtree) #Or( 2) */
          {
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ ConditionalAndExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/        )*
}

void ConditionalAndExpression()       : {}
{
   EqualityExpression()
   ( <AND>/*@bgen(jjtree) #And( 2) */
           {
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/         ) *
}

void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
     <EQUAL> RelationalExpression()/*@bgen(jjtree) #Comparison( 2) */
                                    {
                                      CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                      jjtreeCloseNodeScope(jjtn001);
                                    }
/*@egen*/ { jjtn001.cmpType=EQUAL; }/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
                                    }
/*@egen*/               
   |
     <NON_EQUAL> RelationalExpression()/*@bgen(jjtree) #Comparison( 2) */
                                        {
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
/*@egen*/ { jjtn002.cmpType=NON_EQUAL; }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
                                        }
/*@egen*/               
   |
     <IN_OPER> RelationalExpression()/*@bgen(jjtree) #Comparison( 2) */
                                      {
                                        CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc003 = true;
                                        jjtree.openNodeScope(jjtn003);
                                        jjtreeOpenNodeScope(jjtn003);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn003,  2);
                                        jjtc003 = false;
                                        jjtreeCloseNodeScope(jjtn003);
                                      }
/*@egen*/ { jjtn003.cmpType=IN_OPER; }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc003) {
                                          jjtree.closeNodeScope(jjtn003,  2);
                                          jjtreeCloseNodeScope(jjtn003);
                                        }
                                      }
/*@egen*/               
  )*
}

void RelationalExpression()       :
{}
{
  AdditiveExpression()
  (
    <LESS_THAN> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                     {
                                       CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                       jjtreeCloseNodeScope(jjtn001);
                                     }
/*@egen*/ { jjtn001.cmpType=LESS_THAN; }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/               
   |
    <GREATER_THAN> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                        {
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
/*@egen*/ { jjtn002.cmpType=GREATER_THAN; }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
                                        }
/*@egen*/               
   |
    <LESS_THAN_EQUAL> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                           {
                                             CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                             jjtreeOpenNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn003,  2);
                                             jjtc003 = false;
                                             jjtreeCloseNodeScope(jjtn003);
                                           }
/*@egen*/ { jjtn003.cmpType=LESS_THAN_EQUAL; }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                               jjtreeCloseNodeScope(jjtn003);
                                             }
                                           }
/*@egen*/               
   |
    <GREATER_THAN_EQUAL> AdditiveExpression()/*@bgen(jjtree) #Comparison( 2) */
                                              {
                                                CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
                                                jjtreeOpenNodeScope(jjtn004);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                                jjtc004 = false;
                                                jjtreeCloseNodeScope(jjtn004);
                                              }
/*@egen*/ { jjtn004.cmpType=GREATER_THAN_EQUAL; }/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                  jjtreeCloseNodeScope(jjtn004);
                                                }
                                              }
/*@egen*/               
   | 
   	<REGEX_EQUAL>  RegexLiteral()/*@bgen(jjtree) #Comparison( 2) */
                                      {
                                        CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
                                        jjtreeOpenNodeScope(jjtn005);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn005,  2);
                                        jjtc005 = false;
                                        jjtreeCloseNodeScope(jjtn005);
                                      }
/*@egen*/ { jjtn005.cmpType=REGEX_EQUAL; }/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                          jjtreeCloseNodeScope(jjtn005);
                                        }
                                      }
/*@egen*/               
  )*
}

void AdditiveExpression()       : {}
{
 MultiplicativeExpression()
 (
     <PLUS>/*@bgen(jjtree) #AddNode( 2) */
            {
              CLVFAddNode jjtn001 = new CLVFAddNode(this, JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
                jjtreeCloseNodeScope(jjtn001);
              }
            }
/*@egen*/            
   |
     <MINUS>/*@bgen(jjtree) #SubNode( 2) */
             {
               CLVFSubNode jjtn002 = new CLVFSubNode(this, JJTSUBNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/            
  )*
}

void MultiplicativeExpression()       : {}
{
     UnaryExpression()
  (
    <MULTIPLY>/*@bgen(jjtree) #MulNode( 2) */
               {
                 CLVFMulNode jjtn001 = new CLVFMulNode(this, JJTMULNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/            
   |
    <DIVIDE>/*@bgen(jjtree) #DivNode( 2) */
             {
               CLVFDivNode jjtn002 = new CLVFDivNode(this, JJTDIVNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/            
   |
    <MODULO>/*@bgen(jjtree) #ModNode( 2) */
             {
               CLVFModNode jjtn003 = new CLVFModNode(this, JJTMODNODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
             }
             try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtreeCloseNodeScope(jjtn003);
               }
             }
/*@egen*/            
  )*
}




void PostfixOp()           :
{/*@bgen(jjtree) Operator */
  CLVFOperator jjtn000 = new CLVFOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/
  ( <INCR> | <DECR>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void PostfixExpression()                        :
{/*@bgen(jjtree) #PostfixExpression(> 1) */
 CLVFPostfixExpression jjtn000 = new CLVFPostfixExpression(this, JJTPOSTFIXEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
        try {
/*@egen*/
	PrimaryExpression() [ PostfixOp() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ // [ ( t=<INCR> | t=<DECR>) { jjtThis.setOperator(t.kind); } ] 
}


void UnaryOp()           :
{/*@bgen(jjtree) Operator */
  CLVFOperator jjtn000 = new CLVFOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Operator */
  try {
/*@egen*/ 
  (  <INCR> | <DECR> | <PLUS> | <MINUS> | <TILDA> | <NOT> )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setOperator(getToken(0).kind);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
void UnaryExpression()                      :
{/*@bgen(jjtree) #UnaryExpression(> 1) */
  CLVFUnaryExpression jjtn000 = new CLVFUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
         try {
/*@egen*/ 
	
	 PostfixExpression()
	|	UnaryOp() UnaryExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}


void PrimaryExpression()       : {}
{
	 LOOKAHEAD(3 /*<IDENTIFIER> "(" */ ) FunctionCall()
	 | SymbolNameExp()
     |LitExp()
	 |VarExp()
     |InputFieldExp()
     |<OPEN_PAR> Expression() <CLOSE_PAR>
   
  
}

void FunctionCall()       : {}
{
 	 BuildInFunction()
 	| FunctionCallStatement()
 	
}

void LitExp()       :            // 
{
	Token t;
}
{
 t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtreeCloseNodeScope(jjtn001);
        }
/*@egen*/
  	{ jjtn001.setVal(FLOATING_POINT_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/         
 |t=<HEX_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn002 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtreeCloseNodeScope(jjtn002);
        }
/*@egen*/
  	{ jjtn002.setVal(HEX_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/           
 |t=<OCTAL_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn003 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtreeCloseNodeScope(jjtn003);
        }
/*@egen*/
  	{ jjtn003.setVal(OCTAL_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtreeCloseNodeScope(jjtn003);
          }
        }
/*@egen*/           
 |t=<INTEGER_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn004 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          jjtreeOpenNodeScope(jjtn004);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn004, true);
          jjtc004 = false;
          jjtreeCloseNodeScope(jjtn004);
        }
/*@egen*/
  	{ jjtn004.setVal(INTEGER_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
            jjtreeCloseNodeScope(jjtn004);
          }
        }
/*@egen*/           
 |t=<STRING_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn005 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          jjtreeOpenNodeScope(jjtn005);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtreeCloseNodeScope(jjtn005);
        }
/*@egen*/
  	{ jjtn005.setVal(STRING_LITERAL,StringUtils.stringToSpecChar(unquote(t.image))); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
            jjtreeCloseNodeScope(jjtn005);
          }
        }
/*@egen*/           
 | t=<STRING_PLAIN_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn006 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          jjtreeOpenNodeScope(jjtn006);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn006, true);
          jjtc006 = false;
          jjtreeCloseNodeScope(jjtn006);
        }
/*@egen*/
 	{ jjtn006.setVal(STRING_LITERAL,t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
            jjtreeCloseNodeScope(jjtn006);
          }
        }
/*@egen*/           
 |t=<BOOLEAN_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn007 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc007 = true;
          jjtree.openNodeScope(jjtn007);
          jjtreeOpenNodeScope(jjtn007);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn007, true);
          jjtc007 = false;
          jjtreeCloseNodeScope(jjtn007);
        }
/*@egen*/
  	{ jjtn007.setVal(BOOLEAN_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc007) {
            jjtree.closeNodeScope(jjtn007, true);
            jjtreeCloseNodeScope(jjtn007);
          }
        }
/*@egen*/           
 |t=<DATE_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn008 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtreeOpenNodeScope(jjtn008);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn008, true);
          jjtc008 = false;
          jjtreeCloseNodeScope(jjtn008);
        }
/*@egen*/
 	{ jjtn008.setVal(DATE_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc008) {
            jjtree.closeNodeScope(jjtn008, true);
            jjtreeCloseNodeScope(jjtn008);
          }
        }
/*@egen*/           
 |t=<DATETIME_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn009 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc009 = true;
          jjtree.openNodeScope(jjtn009);
          jjtreeOpenNodeScope(jjtn009);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn009, true);
          jjtc009 = false;
          jjtreeCloseNodeScope(jjtn009);
        }
/*@egen*/
  	{ jjtn009.setVal(DATETIME_LITERAL,t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc009) {
            jjtree.closeNodeScope(jjtn009, true);
            jjtreeCloseNodeScope(jjtn009);
          }
        }
/*@egen*/           
 |t=<NULL_LITERAL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn010 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          jjtreeOpenNodeScope(jjtn010);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn010, true);
          jjtc010 = false;
          jjtreeCloseNodeScope(jjtn010);
        }
/*@egen*/
 	{ jjtn010.setVal(NULL_LITERAL,t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc010) {
            jjtree.closeNodeScope(jjtn010, true);
            jjtreeCloseNodeScope(jjtn010);
          }
        }
/*@egen*/         
 |t=<RETURN_RECORD_SEND_ALL>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn011 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          jjtreeOpenNodeScope(jjtn011);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn011, true);
          jjtc011 = false;
          jjtreeCloseNodeScope(jjtn011);
        }
/*@egen*/
 	{ jjtn011.setConstant(RecordTransform.ALL); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, true);
            jjtreeCloseNodeScope(jjtn011);
          }
        }
/*@egen*/         
 |t=<RETURN_RECORD_SKIP>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn012 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc012 = true;
          jjtree.openNodeScope(jjtn012);
          jjtreeOpenNodeScope(jjtn012);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn012, true);
          jjtc012 = false;
          jjtreeCloseNodeScope(jjtn012);
        }
/*@egen*/
 	{ jjtn012.setConstant(RecordTransform.SKIP); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc012) {
            jjtree.closeNodeScope(jjtn012, true);
            jjtreeCloseNodeScope(jjtn012);
          }
        }
/*@egen*/         
 |t=<RETURN_RECORD_OK>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn013 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc013 = true;
          jjtree.openNodeScope(jjtn013);
          jjtreeOpenNodeScope(jjtn013);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn013, true);
          jjtc013 = false;
          jjtreeCloseNodeScope(jjtn013);
        }
/*@egen*/
 	{ jjtn013.setConstant(RecordTransform.OK); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc013) {
            jjtree.closeNodeScope(jjtn013, true);
            jjtreeCloseNodeScope(jjtn013);
          }
        }
/*@egen*/         
 |t=<RETURN_RECORD_ERROR>/*@bgen(jjtree) Literal */
        {
          CLVFLiteral jjtn014 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc014 = true;
          jjtree.openNodeScope(jjtn014);
          jjtreeOpenNodeScope(jjtn014);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn014, true);
          jjtc014 = false;
          jjtreeCloseNodeScope(jjtn014);
        }
/*@egen*/
 	{ jjtn014.setConstant(RecordTransform.ERROR); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc014) {
            jjtree.closeNodeScope(jjtn014, true);
            jjtreeCloseNodeScope(jjtn014);
          }
        }
/*@egen*/         
 | ListOfLiterals()
 |t = <UNTERMINATED_STRING_LITERAL>
  {
       throw new ParseException(t,"unterminated string literal (starts at line "+t.beginLine+", column "+t.beginColumn+")");
  }
}

void ListOfLiterals() :
{/*@bgen(jjtree) ListOfLiterals */
        CLVFListOfLiterals jjtn000 = new CLVFListOfLiterals(this, JJTLISTOFLITERALS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	boolean negative = false;
	CLVFLiteral lit = null;
}
{/*@bgen(jjtree) ListOfLiterals */
        try {
/*@egen*/
	"[" 
		[ "-" { negative = true; } ] LitExp() 
		{
			lit = (CLVFLiteral)jjtree.peekNode();
			lit.setNegative(negative);
		}
		( "," [ "-" { negative = true; } ]LitExp() 
		{
			lit = (CLVFLiteral)jjtree.peekNode();
			lit.setNegative(negative);
		}
		)* 
	"]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

void InputFieldExp()                    :
{/*@bgen(jjtree) InputFieldLiteral */
  CLVFInputFieldLiteral jjtn000 = new CLVFInputFieldLiteral(this, JJTINPUTFIELDLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) InputFieldLiteral */
  try {
/*@egen*/  t = <FIELD_ID>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                 }
/*@egen*/ { jjtn000.setFieldName(t,t.image); }   | t = <REC_NAME_FIELD_ID>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtreeCloseNodeScope(jjtn000);
                            }
/*@egen*/ { jjtn000.setRecordFieldName(t,t.image); } 
  | t = <REC_NUM_FIELD_ID>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtreeCloseNodeScope(jjtn000);
                           }
/*@egen*/ { jjtn000.setRecordNumFieldName(t,t.image); }
  | t = <REC_NUM_FIELD_NUM>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtreeCloseNodeScope(jjtn000);
                            }
/*@egen*/ { jjtn000.setRecordNumFieldNum(t,t.image); }
  | t= <REC_NAME_FIELD_NUM>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtreeCloseNodeScope(jjtn000);
                             }
/*@egen*/  { jjtn000.setRecordNameFieldNum(t,t.image); } 
  | t= <REC_NAME_ID> [ "[" AdditiveExpression() "]" {jjtn000.indexSet=true;} ]/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtreeCloseNodeScope(jjtn000);
                                                                               }
/*@egen*/ { jjtn000.setRecordName(t,t.image); } 
  | t= <REC_NUM_ID> [ "[" AdditiveExpression() "]" {jjtn000.indexSet=true;} ]/*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                                jjtreeCloseNodeScope(jjtn000);
                                                                              }
/*@egen*/ { jjtn000.setRecordNum(t,t.image); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ }/*
void OutputFieldExp() #void :// IDExp -> ID
{
  Token t;
}
{
  t = <FIELD_ID> { jjtThis.setFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); } #OutputFieldLiteral
}
*/


void VarExp()                  :
{/*@bgen(jjtree) VariableLiteral */
        CLVFVariableLiteral jjtn000 = new CLVFVariableLiteral(this, JJTVARIABLELITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t,u;
	int varSlot;
	int varType=0;
	//boolean indexSet=false;
}
{/*@bgen(jjtree) VariableLiteral */
        try {
/*@egen*/
	try{
	
	// primitive type
  t=<IDENTIFIER> { 

  		// first, look for local var reference
  		if (parserHelper.inFunctionDeclaration && 
  				(varSlot=parserHelper.getLocalVariableSlot(t.image))>=0){
  			jjtn000.setLocalVariale(true);
  			varType=parserHelper.getLocalVariableType(t.image);
  		}else{
    		if ((varSlot=parserHelper.getGlobalVariableSlot(t.image))<0){
  				throw new ParseException(t,"variable ["+t.image+"] is not declared");
    		}
    		jjtn000.setLocalVariale(false);
    		varType=parserHelper.getGlobalVariableType(t.image);
	  	}
  	jjtn000.setVarSlot(varSlot); 
  	jjtn000.setVarName(t.image);
  	jjtn000.setVarType(varType); 
  	} 
  	
  	 // it may be element of LIST , MAP or RECORD
	 [  "[" 
	 		[ 
	 			/* this won't work - conflict with variable inds: LOOKAHEAD( 2 ) u=<IDENTIFIER> { jjtThis.setFieldID(u.image); jjtThis.indexSet=true; } 
	 			|*/
	 			  AdditiveExpression() {jjtn000.indexSet=true;} 
	 		]  
	 	"]" {jjtn000.scalarContext=true;} 
	 ]
  	
//  	{//  	if (!indexset){//  		if (varType==LIST_VAR)//	  		throw new ParseException(t,"variable ["+t.image+"] is a list and requires index to be specified");//	  	else if (varType==MAP_VAR)//	  		throw new ParseException(t,"variable ["+t.image+"] is a map and requires key to be specified");//  	}
//  	}
  	
	}catch(ParseException e){
		parseExceptions.add(e);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
	
}

void RegexLiteral() :
{/*@bgen(jjtree) RegexLiteral */
        CLVFRegexLiteral jjtn000 = new CLVFRegexLiteral(this, JJTREGEXLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) RegexLiteral */
  try {
/*@egen*/
  t=<STRING_LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtreeCloseNodeScope(jjtn000);
                     }
/*@egen*/ { jjtn000.setRegex(unquote(t.image)); } 
  |t=<STRING_PLAIN_LITERAL>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtreeCloseNodeScope(jjtn000);
                                }
/*@egen*/	{ jjtn000.setRegex(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ 
}


void SymbolNameExp() :
{/*@bgen(jjtree) SymbolNameExp */
  CLVFSymbolNameExp jjtn000 = new CLVFSymbolNameExp(this, JJTSYMBOLNAMEEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SymbolNameExp */
 try {
/*@egen*/
 (	
	 <INT_VAR>
 |  <LONG_VAR>
 |  <DATE_VAR>
 |  <DOUBLE_VAR>
 |  <DECIMAL_VAR>
 |  <BOOLEAN_VAR>
 |  <STRING_VAR>
 |  <BYTE_VAR>
 |  <LIST_VAR>
 |  <MAP_VAR>
 |  <RECORD_VAR>
	 |  <OBJECT_VAR>
	|<YEAR>
  	|<MONTH> 
  	|<WEEK>
  	|<DAY>
  	|<HOUR>
  	|<MINUTE>
  	|<SECOND>
  	|<MILLISEC> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
  	{
  	 	jjtn000.setType(getToken(0).kind);
  	 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
 }
/*@egen*/
}


/*
 * Statement syntax follows.
 */

void Statement()       :
{ Token t;}
{
	
	//try{
		(
		  <SEMICOLON>
		/*|
		  LOOKAHEAD(2)
		  LabeledStatement() */
		|
		  Block()
		| 
		  IfStatement()
		|
		  SwitchStatement()
		|
		  WhileStatement()
		|
		  ForStatement()
		| 
		  ForeachStatement()
		|
		  DoStatement() 
		|
		  TryCatchStatement()
		|
		   BreakStatement()
		|
		   ContinueStatement()
		|
		   ReturnStatement()
		| 
		  StatementExpression()
		  
		
		  )
/*	}catch (ParseException e) {
		parseExceptions.add(e);

// following code causes strange behaviour in case of certain bugs
// let's put some cap on interations

	int i=0;
    do {    	  t = getNextToken();
	      i++;	    } while (t.kind != SEMICOLON || t.kind != BLOCK_END || t.kind != EOF || i < 99);
	    jjtree.popNode();
	   
  }*/
}

/*
* void LabeledStatement() #void :
* {}
*  {
*    <IDENTIFIER> ":" Statement()
*  }
*/

void Block() :
{/*@bgen(jjtree) Block */
  CLVFBlock jjtn000 = new CLVFBlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  "{" ( Statement() )* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void StatementExpression()       :
{}
{
	
   (
 	
    LOOKAHEAD( VarExp() "=" ) Assignment() 
	| LOOKAHEAD( 2 )  IncrDecrStatement()
	|FunctionCall()
	
   ) ";"
  }
 
void IncrDecrStatement()                     :
{/*@bgen(jjtree) #IncrDecrStatement(true) */
 CLVFIncrDecrStatement jjtn000 = new CLVFIncrDecrStatement(this, JJTINCRDECRSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #IncrDecrStatement(true) */
        try {
/*@egen*/
	VarExp() ( t=<INCR> | t=<DECR> )/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtreeCloseNodeScope(jjtn000);
                                         }
/*@egen*/ {jjtn000.setKind(t.kind); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
	
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) IfStatement */
  CLVFIfStatement jjtn000 = new CLVFIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void SwitchStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) SwitchStatement */
  CLVFSwitchStatement jjtn000 = new CLVFSwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  <SWITCH>  "(" Expression() ")"
  "{"
  	 CaseExpression()
     ( CaseExpression() )*
  	 [ LOOKAHEAD(1) <CASE_DEFAULT> ":" Statement() { jjtn000.setDefaultClause(true); } ] 
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void CaseExpression() :
{/*@bgen(jjtree) CaseExpression */
  CLVFCaseExpression jjtn000 = new CLVFCaseExpression(this, JJTCASEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseExpression */
  try {
/*@egen*/
  <CASE> Expression() ":" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
  CLVFWhileStatement jjtn000 = new CLVFWhileStatement(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  <WHILE> "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  CLVFForStatement jjtn000 = new CLVFForStatement(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  <FOR> "(" Expression() ";" Expression() ";" Expression() ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ForeachStatement() :
{/*@bgen(jjtree) ForeachStatement */
  CLVFForeachStatement jjtn000 = new CLVFForeachStatement(this, JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForeachStatement */
        try {
/*@egen*/
	<FOR_EACH> "(" VarExp() ":" VarExp() ")" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void DoStatement()                 :
{/*@bgen(jjtree) #DoStatement( 2) */
  CLVFDoStatement jjtn000 = new CLVFDoStatement(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #DoStatement( 2) */
  try {
/*@egen*/
  <DO> Statement() <WHILE> "(" Expression() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/ 
}

void TryCatchStatement() :
{/*@bgen(jjtree) TryCatchStatement */
  CLVFTryCatchStatement jjtn000 = new CLVFTryCatchStatement(this, JJTTRYCATCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TryCatchStatement */
  try {
/*@egen*/
  <TRY> Statement() <CATCH>  "(" [ VarExp() ] ")" Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}



void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  CLVFBreakStatement jjtn000 = new CLVFBreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	<BREAK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  CLVFContinueStatement jjtn000 = new CLVFContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
	<CONTINUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ReturnStatement() : {/*@bgen(jjtree) ReturnStatement */
  CLVFReturnStatement jjtn000 = new CLVFReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    <RETURN> [LOOKAHEAD(2) Expression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
	

//(  [ Expression() ] ) #EmptyExpression(jjtree.nodeArity()==0)
}

void FunctionCallStatement() :
{/*@bgen(jjtree) FunctionCallStatement */
  CLVFFunctionCallStatement jjtn000 = new CLVFFunctionCallStatement(this, JJTFUNCTIONCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
  CLVFFunctionDeclaration functionNode;
}
{/*@bgen(jjtree) FunctionCallStatement */
         try {
/*@egen*/
	 t=<IDENTIFIER> { 
	 	jjtn000.setName( t.image); 
	 	// is it already declared function ??
	 	if ((functionNode=(CLVFFunctionDeclaration)parserHelper.functionSymbol.get(t.image))!=null){
	 			 	jjtn000.setCallNode(functionNode);
	 	}else if (parserHelper.isExternalFunction(t.image)){
	 				jjtn000.setExternalFunction(parserHelper.getExternalFunction(t.image));
	 	}else{ 
	 		throw new ParseException(t,"function \""+t.image+"\" not declared");
	 	}
	 	}
	"(" [ FunctionCallParameter()  ( "," FunctionCallParameter() )* ] ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/

	{
	 // verify number of call parameters
	 	if (!jjtn000.validateParams()){
	 		//System.err.println("wrong #arguments");
	  		throw new ParseException(t,"wrong number of parameters when calling \""+t.image+"\"");
	 	}
	}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void FunctionCallParameter()       : {}
{
	ConditionalOrExpression()
}


/* !!!! INTERNAL FUNCTIONS && PROCEDURES START HERE !!!! */

void BuildInFunction()       :
{ }
{
	"isnull(" AdditiveExpression()/*@bgen(jjtree) #IsNullNode( 1) */
                                       {
                                         CLVFIsNullNode jjtn001 = new CLVFIsNullNode(this, JJTISNULLNODE);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtreeOpenNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  1);
                                           jjtreeCloseNodeScope(jjtn001);
                                         }
                                       }
/*@egen*/               
	|"nvl(" AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #NVLNode( 2) */
                                                              {
                                                                CLVFNVLNode jjtn002 = new CLVFNVLNode(this, JJTNVLNODE);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                                jjtreeOpenNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                }
                                                              }
/*@egen*/            
	|"nvl2(" AdditiveExpression() "," AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #NVL2Node( 3) */
                                                                                         {
                                                                                           CLVFNVL2Node jjtn003 = new CLVFNVL2Node(this, JJTNVL2NODE);
                                                                                           boolean jjtc003 = true;
                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                           jjtreeOpenNodeScope(jjtn003);
                                                                                         }
                                                                                         try {
/*@egen*/  ")"/*@bgen(jjtree)*/
                                                                                         } finally {
                                                                                           if (jjtc003) {
                                                                                             jjtree.closeNodeScope(jjtn003,  3);
                                                                                             jjtreeCloseNodeScope(jjtn003);
                                                                                           }
                                                                                         }
/*@egen*/             
	|"iif(" ConditionalOrExpression() "," AdditiveExpression() "," AdditiveExpression()/*@bgen(jjtree) #IffNode( 3) */
                                                                                            {
                                                                                              CLVFIffNode jjtn004 = new CLVFIffNode(this, JJTIFFNODE);
                                                                                              boolean jjtc004 = true;
                                                                                              jjtree.openNodeScope(jjtn004);
                                                                                              jjtreeOpenNodeScope(jjtn004);
                                                                                            }
                                                                                            try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                                                                            } finally {
                                                                                              if (jjtc004) {
                                                                                                jjtree.closeNodeScope(jjtn004,  3);
                                                                                                jjtreeCloseNodeScope(jjtn004);
                                                                                              }
                                                                                            }
/*@egen*/             // (condition, express if true, express else)
	|SequenceNode()
	|LookupNode()
	|EvalNode()
	|DictionaryNode()

// 	procedures 
	|PrintErrNode()
	|"print_stack("/*@bgen(jjtree) #PrintStackNode( 0) */
                        {
                          CLVFPrintStackNode jjtn005 = new CLVFPrintStackNode(this, JJTPRINTSTACKNODE);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
                          jjtreeOpenNodeScope(jjtn005);
                        }
                        try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  0);
                            jjtreeCloseNodeScope(jjtn005);
                          }
                        }
/*@egen*/                   
	|"breakpoint("/*@bgen(jjtree) #BreakpointNode( 0) */
                       {
                         CLVFBreakpointNode jjtn006 = new CLVFBreakpointNode(this, JJTBREAKPOINTNODE);
                         boolean jjtc006 = true;
                         jjtree.openNodeScope(jjtn006);
                         jjtreeOpenNodeScope(jjtn006);
                       }
                       try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc006) {
                           jjtree.closeNodeScope(jjtn006,  0);
                           jjtreeCloseNodeScope(jjtn006);
                         }
                       }
/*@egen*/                   
	| PrintLogNode()
	|"raise_error(" AdditiveExpression()/*@bgen(jjtree) #RaiseErrorNode( 1) */
                                             {
                                               CLVFRaiseErrorNode jjtn007 = new CLVFRaiseErrorNode(this, JJTRAISEERRORNODE);
                                               boolean jjtc007 = true;
                                               jjtree.openNodeScope(jjtn007);
                                               jjtreeOpenNodeScope(jjtn007);
                                             }
                                             try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc007) {
                                                 jjtree.closeNodeScope(jjtn007,  1);
                                                 jjtreeCloseNodeScope(jjtn007);
                                               }
                                             }
/*@egen*/                   
}


void PrintErrNode() :
{/*@bgen(jjtree) PrintErrNode */
  CLVFPrintErrNode jjtn000 = new CLVFPrintErrNode(this, JJTPRINTERRNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintErrNode */
        try {
/*@egen*/
	"print_err(" AdditiveExpression() [ "," ConditionalOrExpression() ] ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}


void EvalNode() :
{/*@bgen(jjtree) EvalNode */
  CLVFEvalNode jjtn000 = new CLVFEvalNode(this, JJTEVALNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EvalNode */
   try {
/*@egen*/
   "eval(" AdditiveExpression() ["," AdditiveExpression() ] ")"/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                  jjtreeCloseNodeScope(jjtn000);
                                                                }
/*@egen*/ { hasEvalNode=true;  jjtn000.setExpMode(false); }
   | "eval_exp(" AdditiveExpression() ")"/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            jjtreeCloseNodeScope(jjtn000);
                                          }
/*@egen*/ { jjtn000.setExpMode(true); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

void PrintLogNode() : 
{/*@bgen(jjtree) PrintLogNode */
        CLVFPrintLogNode jjtn000 = new CLVFPrintLogNode(this, JJTPRINTLOGNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PrintLogNode */
        try {
/*@egen*/
	"print_log(" 
	( <IDENTIFIER> )
		

	{
		try{
			jjtn000.setLevel(getToken(0).image);
		}catch (Exception ex){
			throw new ParseException(getToken(0),ex.getMessage());
		}
	}
	
	","
	AdditiveExpression()
	")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void SequenceNode() :
{/*@bgen(jjtree) SequenceNode */
        CLVFSequenceNode jjtn000 = new CLVFSequenceNode(this, JJTSEQUENCENODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) SequenceNode */
        try {
/*@egen*/
	"sequence(" 
	t=<IDENTIFIER> { jjtn000.setName(t.image); } 
	[ ","
	(  <INT_VAR> { jjtn000.setReturnType(INT_VAR); }
	| <LONG_VAR> {  jjtn000.setReturnType(LONG_VAR); }
	| <STRING_VAR> { jjtn000.setReturnType(STRING_VAR); }
	) ]
	")"
	[ 
		".next" 	{ jjtn000.setOperation(0); }
	  | ".current" { jjtn000.setOperation(1); }
	  | ".reset" { jjtn000.setOperation(2); }
	]/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/  
}

void LookupNode() :
{/*@bgen(jjtree) LookupNode */
        CLVFLookupNode jjtn000 = new CLVFLookupNode(this, JJTLOOKUPNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t,k;
}
{/*@bgen(jjtree) LookupNode */
        try {
/*@egen*/
	(
	(
	"lookup("
		t=<IDENTIFIER> { jjtn000.setOperation(0); jjtn000.setLookupName(t.image); }// LOOKUP NAME/ID
		"," AdditiveExpression() //KEYS GO HERE
		("," AdditiveExpression())*
		")"
		["." k=<IDENTIFIER> { jjtn000.setLookupField(k.image); } ]  // WHICH FIELD 
		) 
	
	|("lookup_next("
		t=<IDENTIFIER> { jjtn000.setOperation(1); jjtn000.setLookupName(t.image); }
		")" 
		[ "." k=<IDENTIFIER> { jjtn000.setLookupField(k.image); } ] 
		) 
	|(// how many records we have found
		"lookup_found("
		t=<IDENTIFIER> { jjtn000.setOperation(2); jjtn000.setLookupName(t.image); }
		")"
		) 
	|(// do something with lookup
		"lookup_admin("
		t=<IDENTIFIER> { jjtn000.setLookupName(t.image); } ","
		k=<IDENTIFIER> { if (k.image.equalsIgnoreCase("init"))  jjtn000.setOperation(3); else jjtn000.setOperation(4); } 
		
		")"
		)
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void DictionaryNode() :
{/*@bgen(jjtree) DictionaryNode */
        CLVFDictionaryNode jjtn000 = new CLVFDictionaryNode(this, JJTDICTIONARYNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t,name;
}
{/*@bgen(jjtree) DictionaryNode */
        try {
/*@egen*/
	(
		"read_dict" "(" 
			Expression()
		")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                }
/*@egen*/
		{ jjtn000.setOperation(0); }
	)
	|
	(
		"write_dict" "(" 
			Expression()   "," 
			Expression() 
		")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                }
/*@egen*/
		{ jjtn000.setOperation(1);}
	)
	|
	(
		"delete_dict" "(" 
			Expression()  
		")"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                }
/*@egen*/
		{ jjtn000.setOperation(2);}
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

TOKEN : { <DATE_FIELD_LITERAL : "year" |"month" | "week" | "day" | "hour" | "minute" | "sec" | "second" | "millisec" | "millisecond" > }


/* error token which is generated by lexer if it can't match with any other */
TOKEN:
{
   <ERROR: ~[] >
}
