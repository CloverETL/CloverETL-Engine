/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserTokenManager.java */
package org.jetel.interpreter;
import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.node.*;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;

public class TransformLangParserTokenManager implements TransformLangParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000040000000L) != 0L || (active1 & 0x4800000L) != 0L)
         {
            jjmatchedKind = 109;
            return 42;
         }
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 109;
            return 54;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 109;
            return 30;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x80012010080L) != 0L)
         {
            jjmatchedKind = 109;
            return 63;
         }
         if ((active0 & 0x1180000000000000L) != 0L || (active1 & 0xf7e956e260L) != 0L)
         {
            jjmatchedKind = 109;
            return 66;
         }
         if ((active1 & 0x4L) != 0L)
            return 131;
         if ((active1 & 0x800280000L) != 0L)
         {
            jjmatchedKind = 109;
            return 26;
         }
         if ((active0 & 0xa00000000000000L) != 0L || (active1 & 0x70000001100L) != 0L)
         {
            jjmatchedKind = 109;
            return 57;
         }
         return -1;
      case 1:
         if ((active1 & 0x800080000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
            return 25;
         }
         if ((active0 & 0x7d80000040000000L) != 0L || (active1 & 0x8f5fff7efc0L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
            return 66;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x70000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
            return 56;
         }
         if ((active1 & 0x200001020L) != 0L)
            return 66;
         return -1;
      case 2:
         if ((active1 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 2;
            }
            return 204;
         }
         if ((active0 & 0x80000000000000L) != 0L || (active1 & 0x1e8800800L) != 0L)
            return 66;
         if ((active0 & 0x7f00000040000000L) != 0L || (active1 & 0xff4177fe7c0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 2;
            }
            return 66;
         }
         return -1;
      case 3:
         if ((active0 & 0x7c00000000000000L) != 0L || (active1 & 0x8fc4777e580L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 3;
            }
            return 66;
         }
         if ((active0 & 0x300000040000000L) != 0L || (active1 & 0x70010080240L) != 0L)
            return 66;
         return -1;
      case 4:
         if ((active0 & 0x7c00000000000000L) != 0L || (active1 & 0xfb00757c180L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 109;
               jjmatchedPos = 4;
            }
            return 66;
         }
         if ((active1 & 0x4c40202400L) != 0L)
            return 66;
         return -1;
      case 5:
         if ((active0 & 0x5800000000000000L) != 0L || (active1 & 0xf7007074100L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 5;
            return 66;
         }
         if ((active0 & 0x2400000000000000L) != 0L || (active1 & 0x8000508080L) != 0L)
            return 66;
         return -1;
      case 6:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xe7000074000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 6;
            return 66;
         }
         if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x10007000100L) != 0L)
            return 66;
         return -1;
      case 7:
         if ((active1 & 0x7000070000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
            return 66;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xe0000004000L) != 0L)
            return 66;
         return -1;
      case 8:
         if ((active1 & 0x6000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 8;
            return 66;
         }
         if ((active1 & 0x1000070000L) != 0L)
            return 66;
         return -1;
      case 9:
         if ((active1 & 0x4000000000L) != 0L)
            return 66;
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 9;
            return 66;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 37:
         return jjStopAtPos(0, 46);
      case 40:
         return jjStopAtPos(0, 53);
      case 41:
         return jjStopAtPos(0, 54);
      case 42:
         return jjStopAtPos(0, 44);
      case 43:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 63);
      case 45:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x0L);
      case 58:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 59:
         return jjStopAtPos(0, 29);
      case 61:
         return jjStartNfaWithStates_0(0, 66, 131);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x4000002000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000004200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xa00000000000000L, 0x70000001100L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000040L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8400020L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x60140000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000040000000L, 0x4800000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3300000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x401008000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x80012010080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800280000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 123:
         return jjStopAtPos(0, 64);
      case 125:
         return jjStopAtPos(0, 65);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 43:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 45:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x70000000200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x1108100L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 69, 66);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 105:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 76, 66);
         return jjMoveStringLiteralDfa2_0(active0, 0x1100000000000000L, active1, 0x8560244800L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7800082000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x80002000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400000040000000L, active1, 0x4010000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000002000L);
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 103:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000080480L);
      case 108:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4100000000000000L, active1, 0x8000504000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 112:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1020000L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x80012000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x240L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x70000008000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc00000000L);
      case 119:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 66);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L);
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80006000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000202100L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x8000000000L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 66);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x70000060000L);
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x1000400L);
      case 109:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 66);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3c00000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000L);
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 66);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x408000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 66);
         break;
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18001000000L);
      case 99:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xa0000000000L);
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 66);
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L);
      case 107:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x68000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x3000110000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x3000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000000000L, active1, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1060000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L);
      case 103:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 66);
         break;
      case 104:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 66);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 66);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x20000000000L);
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100L);
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 66);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60000L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 66);
         break;
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 66);
         break;
      case 109:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 66);
         break;
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 66);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x4000000000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 66);
         break;
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 66);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc0000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 66);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 66);
         break;
      case 102:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 66);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L);
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 66);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000000L);
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 66);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 66);
         break;
      case 103:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 66);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L);
      case 114:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x2000000000L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 107:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 101, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 204;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(181, 134);
                  else if (curChar == 46)
                     jjAddStates(13, 26);
                  else if (curChar == 61)
                     jjCheckNAddStates(27, 32);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 34)
                     jjCheckNAddStates(33, 35);
                  else if (curChar == 39)
                     jjCheckNAddStates(36, 38);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(39, 41);
                  }
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(186, 134);
                  else if (curChar == 60)
                     jjCheckNAddStates(42, 45);
                  else if (curChar == 48)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(46, 50);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 62)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  break;
               case 204:
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 131:
                  if (curChar == 62)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (curChar == 62)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(51, 53);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(36, 38);
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 9:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 10:
                  if (curChar == 39 && kind > 21)
                     kind = 21;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(54, 57);
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(33, 35);
                  break;
               case 16:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 18:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 19:
                  if (curChar == 34 && kind > 21)
                     kind = 21;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(58, 61);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 39:
                  if (curChar == 38 && kind > 32)
                     kind = 32;
                  break;
               case 40:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 44:
                  if (curChar == 33 && kind > 33)
                     kind = 33;
                  break;
               case 45:
                  if (curChar == 60 && kind > 36)
                     kind = 36;
                  break;
               case 46:
                  if (curChar == 62 && kind > 38)
                     kind = 38;
                  break;
               case 47:
                  if ((0x5000000000000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 77:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(39, 41);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(80);
                  break;
               case 81:
                  if (curChar != 48)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(46, 50);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(83, 79);
                  break;
               case 84:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(84, 79);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 87:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(87);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar != 46)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(62, 64);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(62, 64);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(94, 5);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(98);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(98, 5);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 101:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(102);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 5);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(108, 109);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(109);
                  break;
               case 109:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 118:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(120, 121);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(121);
                  break;
               case 121:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 124:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(127);
                  break;
               case 127:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 130:
                  if (curChar == 61)
                     jjCheckNAddStates(27, 32);
                  break;
               case 132:
                  if (curChar == 60 && kind > 37)
                     kind = 37;
                  break;
               case 133:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 134:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 135:
                  if (curChar == 60 && kind > 41)
                     kind = 41;
                  break;
               case 136:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 137:
                  if (curChar == 46)
                     jjAddStates(13, 26);
                  break;
               case 138:
                  if (curChar == 46 && kind > 34)
                     kind = 34;
                  break;
               case 141:
                  if (curChar == 46 && kind > 35)
                     kind = 35;
                  break;
               case 144:
                  if (curChar == 46 && kind > 36)
                     kind = 36;
                  break;
               case 147:
                  if (curChar == 46 && kind > 37)
                     kind = 37;
                  break;
               case 150:
                  if (curChar == 46 && kind > 38)
                     kind = 38;
                  break;
               case 153:
                  if (curChar == 46 && kind > 39)
                     kind = 39;
                  break;
               case 156:
                  if (curChar == 46 && kind > 40)
                     kind = 40;
                  break;
               case 162:
                  if (curChar == 46 && kind > 41)
                     kind = 41;
                  break;
               case 180:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(181, 134);
                  break;
               case 181:
                  if (curChar == 61 && kind > 35)
                     kind = 35;
                  break;
               case 182:
                  if (curChar == 60)
                     jjCheckNAddStates(42, 45);
                  break;
               case 183:
                  if (curChar == 62 && kind > 35)
                     kind = 35;
                  break;
               case 184:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 185:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(186, 134);
                  break;
               case 186:
                  if (curChar == 61 && kind > 39)
                     kind = 39;
                  break;
               case 188:
                  if (curChar == 61 && kind > 40)
                     kind = 40;
                  break;
               case 189:
                  if (curChar == 36)
                     jjCheckNAddStates(9, 12);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(68, 69);
                  break;
               case 194:
                  if (curChar == 46)
                     jjCheckNAdd(195);
                  break;
               case 195:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(195);
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(196, 197);
                  break;
               case 197:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 202:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(70, 71);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  else if (curChar == 126)
                     jjAddStates(72, 73);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 34;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 109)
                     jjAddStates(74, 75);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 204:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 121)
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(24);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAdd(66);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(76, 77);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 8:
                  if (curChar == 92)
                     jjAddStates(78, 80);
                  break;
               case 9:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(36, 38);
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 17:
                  if (curChar == 92)
                     jjAddStates(81, 83);
                  break;
               case 18:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 24:
                  if (curChar == 101 && kind > 24)
                     kind = 24;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 115)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x4000000040000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 33:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 124 && kind > 31)
                     kind = 31;
                  break;
               case 35:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x1000000010L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 37:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 43:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 48:
                  if (curChar == 114 && kind > 108)
                     kind = 108;
                  break;
               case 49:
                  if (curChar == 97)
                     jjCheckNAdd(48);
                  break;
               case 50:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 107 && kind > 108)
                     kind = 108;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 58:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 117)
                     jjCheckNAdd(48);
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 99 && kind > 108)
                     kind = 108;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar == 109)
                     jjAddStates(74, 75);
                  break;
               case 68:
                  if (curChar == 104 && kind > 108)
                     kind = 108;
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 101 && kind > 108)
                     kind = 108;
                  break;
               case 73:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 79:
                  if ((0x100000001000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 82:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(83, 79);
                  break;
               case 85:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(86);
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 96:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 139:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 145:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 148:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 154:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 157:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 113)
                     jjCheckNAdd(162);
                  break;
               case 164:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
               case 169:
               case 173:
                  if (curChar == 101)
                     jjCheckNAdd(162);
                  break;
               case 166:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
               case 171:
                  if (curChar == 116)
                     jjCheckNAdd(162);
                  break;
               case 168:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 170:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 174:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 120)
                     jjCheckNAdd(162);
                  break;
               case 176:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 187:
                  if (curChar == 126)
                     jjAddStates(72, 73);
                  break;
               case 190:
               case 191:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(191);
                  break;
               case 192:
               case 193:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(193, 194);
                  break;
               case 195:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
               case 199:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(199);
                  break;
               case 200:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 201:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(202, 203);
                  break;
               case 202:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(202, 203);
                  break;
               case 203:
                  if (curChar == 125 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(36, 38);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 204 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   89, 90, 95, 96, 99, 100, 5, 103, 112, 190, 192, 196, 200, 140, 143, 146, 
   149, 152, 155, 161, 164, 166, 168, 170, 172, 174, 179, 131, 132, 133, 134, 135, 
   136, 16, 17, 19, 7, 8, 10, 78, 79, 80, 183, 184, 136, 134, 82, 84, 
   79, 85, 87, 1, 2, 5, 7, 8, 12, 10, 16, 17, 21, 19, 91, 92, 
   5, 99, 100, 5, 193, 194, 202, 203, 188, 134, 71, 76, 3, 4, 9, 11, 
   13, 18, 20, 22, 93, 94, 97, 98, 101, 102, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\73", "\156\165\154\154", null, null, null, null, null, null, null, 
null, null, null, null, "\55", "\53", "\52", "\57", "\45", "\53\53", "\55\55", null, 
null, null, null, "\50", "\51", "\151\156\164", "\154\157\156\147", 
"\144\141\164\145", "\156\165\155\142\145\162", "\144\145\143\151\155\141\154", 
"\142\157\157\154\145\141\156", "\163\164\162\151\156\147", "\146\165\156\143\164\151\157\156", "\54", "\173", 
"\175", "\75", "\72\75", "\72", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\144\145\146\141\165\154\164", "\143\141\163\145", "\167\150\151\154\145", 
"\146\157\162", "\144\157", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\162\145\164\165\162\156", "\163\165\142\163\164\162\151\156\147", 
"\165\160\160\145\162\143\141\163\145", "\154\157\167\145\162\143\141\163\145", "\164\162\151\155", 
"\154\145\156\147\164\150", "\164\157\144\141\171", "\151\163\156\165\154\154", "\156\166\154", 
"\162\145\160\154\141\143\145", "\163\164\162\62\156\165\155", "\156\165\155\62\163\164\162", "\151\151\146", 
"\163\161\162\164", "\154\157\147", "\154\157\147\61\60", "\145\170\160", "\160\157\167", 
"\160\151", "\162\157\165\156\144", "\164\162\165\156\143", 
"\160\162\151\156\164\137\145\162\162", "\160\162\151\156\164\137\163\164\141\143\153", 
"\142\162\145\141\153\160\157\151\156\164", "\143\157\156\143\141\164", "\144\141\164\145\141\144\144", 
"\144\141\164\145\144\151\146\146", "\144\141\164\145\62\163\164\162", "\163\164\162\62\144\141\164\145", null, 
null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
   "WithinLineComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff92f1001L, 0x7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x6feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6c0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x900L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[204];
private final int[] jjstateSet = new int[408];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TransformLangParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TransformLangParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 204; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 110)
         {
            jjmatchedKind = 110;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
