/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserTokenManager.java */
package org.jetel.interpreter;
import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.ASTnode.*;
import org.jetel.util.string.StringUtils;
import org.jetel.util.file.FileUtils;
import org.jetel.util.string.CharSequenceReader;
import org.jetel.component.CustomizedRecordTransform;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.channels.Channels;

public class TransformLangParserTokenManager implements TransformLangParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 37:
         jjmatchedKind = 49;
         return jjMoveNfa_0(5, 0);
      case 39:
         jjmatchedKind = 31;
         return jjMoveNfa_0(5, 0);
      case 40:
         jjmatchedKind = 62;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 63;
         return jjMoveNfa_0(5, 0);
      case 42:
         jjmatchedKind = 47;
         return jjMoveNfa_0(5, 0);
      case 43:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 44:
         jjmatchedKind = 108;
         return jjMoveNfa_0(5, 0);
      case 45:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 129;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0xe000000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L);
      case 59:
         jjmatchedKind = 27;
         return jjMoveNfa_0(5, 0);
      case 61:
         jjmatchedKind = 109;
         return jjMoveNfa_0(5, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L, 0x0L);
      case 91:
         jjmatchedKind = 111;
         return jjMoveNfa_0(5, 0);
      case 93:
         jjmatchedKind = 112;
         return jjMoveNfa_0(5, 0);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000010a0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10202000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40806000014L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000404000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x12000000840001L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102L, 0x1dL);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa200000200L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0xc000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x920000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80010000080400L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000004001000040L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20400100000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 123:
         jjmatchedKind = 28;
         return jjMoveNfa_0(5, 0);
      case 125:
         jjmatchedKind = 29;
         return jjMoveNfa_0(5, 0);
      case 126:
         jjmatchedKind = 52;
         return jjMoveNfa_0(5, 0);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 75:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000810200204L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000054502080410L, active2, 0L);
      case 102:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x1000a000000100L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000400001L, active2, 0L);
      case 111:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x120001a022L, active2, 0x1dL);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8960020008001000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x20000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60c000000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 76:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600010100000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000410L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa040000400001000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000002000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9a0020001100000L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0xc048000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x2002200022002L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0x1dL);
      case 112:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10040L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x204100L, active2, 0L);
      case 116:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10080084L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000001000400000L, active2, 0L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         break;
      case 46:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         break;
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 80:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000002001000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10020000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000010880L, active2, 0L);
      case 103:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x50L, active2, 0L);
      case 107:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1dL);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600008000100020L, active2, 0L);
      case 109:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x920000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000800400L, active2, 0L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8080000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20201002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1002002000080000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 4;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active1, 0x400010000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x10080L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0x1000800L, active2, 0L);
      case 101:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x9080020000000020L, active2, 0L);
      case 104:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000002000L, active2, 0L);
      case 107:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x40000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0x2000000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active1, 0x10L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0x4000000040L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x4000000000880400L, active2, 0L);
      case 116:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x920042000020000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x2000000L, active2, 0x1dL);
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 4);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active1, 0x9a0020000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x30L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x10000L, active2, 0L);
      case 100:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x10000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x4400040000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         break;
      case 104:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x20000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x2000002000000L, active2, 0L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x1000000000002000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x40000000000000L, active2, 0x1dL);
      case 114:
         return jjMoveStringLiteralDfa6_0(active1, 0x80L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 5);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000000L, active2, 0x1cL);
      case 99:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active1, 0x180008000000000L, active2, 0L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active1, 0x10000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x800000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x4000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000020000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x80L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 6;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 6);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x80L, active2, 0x10L);
      case 99:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x10000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active1, 0x40000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x1000000000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x40020000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x400000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active1, 0x180000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x20000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 7);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 8;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active1, 0x800000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x180000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 8;
         }
         break;
      case 121:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 8);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 9;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x20040000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x80000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x8L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 9);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 10);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 11;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 11;
         }
         break;
      case 100:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 11);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 12);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 253;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(9, 15);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(207, 160);
                  else if (curChar == 46)
                     jjAddStates(16, 29);
                  else if (curChar == 61)
                     jjCheckNAddStates(30, 35);
                  else if (curChar == 34)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddStates(36, 41);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(7, 8);
                  }
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(212, 160);
                  else if (curChar == 60)
                     jjCheckNAddStates(42, 45);
                  else if (curChar == 48)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAddStates(46, 48);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(10);
                  if (curChar == 62)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(49, 51);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(49, 51);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 46)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(52, 54);
                  break;
               case 12:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 30:
                  if (curChar == 38 && kind > 34)
                     kind = 34;
                  break;
               case 31:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 35:
                  if (curChar == 33 && kind > 35)
                     kind = 35;
                  break;
               case 36:
                  if (curChar == 60 && kind > 39)
                     kind = 39;
                  break;
               case 37:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 38:
                  if ((0x5000000000000000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 91:
                  if (curChar != 48)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(46, 48);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjAddStates(55, 56);
                  break;
               case 95:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
                  if (curChar != 34)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(36, 41);
                  break;
               case 98:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 100:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 101:
                  if (curChar == 34 && kind > 18)
                     kind = 18;
                  break;
               case 102:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 63);
                  break;
               case 103:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 104:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(103);
                  break;
               case 106:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(64, 66);
                  break;
               case 108:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(64, 66);
                  break;
               case 109:
                  if ((0x2400L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 110:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(67, 70);
                  break;
               case 111:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(64, 66);
                  break;
               case 112:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(111);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(115, 116);
                  break;
               case 116:
                  if (curChar != 46)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(71, 73);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddStates(71, 73);
                  break;
               case 119:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(120, 14);
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(121, 122);
                  break;
               case 123:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(124);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAddTwoStates(124, 14);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 127:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(128);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(128, 14);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(134, 135);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(135);
                  break;
               case 135:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 141:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(144);
                  break;
               case 144:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(147);
                  break;
               case 147:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(149, 150);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(150);
                  break;
               case 150:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(153);
                  break;
               case 153:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 156:
                  if (curChar == 61)
                     jjCheckNAddStates(30, 35);
                  break;
               case 157:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 158:
                  if (curChar == 60 && kind > 40)
                     kind = 40;
                  break;
               case 159:
                  if (curChar == 62 && kind > 42)
                     kind = 42;
                  break;
               case 160:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 161:
                  if (curChar == 60 && kind > 44)
                     kind = 44;
                  break;
               case 162:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               case 163:
                  if (curChar == 46)
                     jjAddStates(16, 29);
                  break;
               case 164:
                  if (curChar == 46 && kind > 36)
                     kind = 36;
                  break;
               case 167:
                  if (curChar == 46 && kind > 37)
                     kind = 37;
                  break;
               case 170:
                  if (curChar == 46 && kind > 39)
                     kind = 39;
                  break;
               case 173:
                  if (curChar == 46 && kind > 40)
                     kind = 40;
                  break;
               case 176:
                  if (curChar == 46 && kind > 41)
                     kind = 41;
                  break;
               case 179:
                  if (curChar == 46 && kind > 42)
                     kind = 42;
                  break;
               case 182:
                  if (curChar == 46 && kind > 43)
                     kind = 43;
                  break;
               case 188:
                  if (curChar == 46 && kind > 44)
                     kind = 44;
                  break;
               case 206:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(207, 160);
                  break;
               case 207:
                  if (curChar == 61 && kind > 37)
                     kind = 37;
                  break;
               case 208:
                  if (curChar == 60)
                     jjCheckNAddStates(42, 45);
                  break;
               case 209:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 210:
                  if (curChar == 61 && kind > 40)
                     kind = 40;
                  break;
               case 211:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(212, 160);
                  break;
               case 212:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 214:
                  if (curChar == 61 && kind > 43)
                     kind = 43;
                  break;
               case 215:
                  if (curChar == 36)
                     jjCheckNAddStates(9, 15);
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 220:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 225:
                  if (curChar == 46)
                     jjCheckNAdd(226);
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(226);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 228);
                  break;
               case 228:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 232:
                  if (curChar == 46)
                     jjCheckNAdd(233);
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(233);
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(234, 235);
                  break;
               case 235:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 236:
                  if (curChar == 42 && kind > 58)
                     kind = 58;
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 239:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 240:
                  if (curChar == 42 && kind > 59)
                     kind = 59;
                  break;
               case 242:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 244;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(46);
                  }
                  else if (curChar == 64)
                     jjAddStates(83, 84);
                  else if (curChar == 126)
                     jjAddStates(85, 86);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 100)
                     jjAddStates(87, 88);
                  else if (curChar == 115)
                     jjAddStates(89, 90);
                  else if (curChar == 109)
                     jjAddStates(91, 94);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 56;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 1:
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(49, 51);
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 14:
                  if ((0x5000000050L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 15:
                  if (curChar == 101 && kind > 22)
                     kind = 22;
                  break;
               case 16:
                  if (curChar == 117)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 115)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 124 && kind > 33)
                     kind = 33;
                  break;
               case 26:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x1000000010L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 28:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if ((0x10000000100000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 33:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 39:
                  if (curChar == 114 && kind > 67)
                     kind = 67;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar == 114 && kind > 133)
                     kind = 133;
                  break;
               case 48:
                  if (curChar == 97)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 107 && kind > 133)
                     kind = 133;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 117)
                     jjCheckNAdd(47);
                  break;
               case 56:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 109)
                     jjAddStates(91, 94);
                  break;
               case 59:
                  if (curChar == 104 && kind > 133)
                     kind = 133;
                  break;
               case 60:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 101 && kind > 133)
                     kind = 133;
                  break;
               case 64:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 99 && kind > 133)
                     kind = 133;
                  break;
               case 69:
               case 86:
                  if (curChar == 101)
                     jjCheckNAdd(68);
                  break;
               case 70:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 100 && kind > 133)
                     kind = 133;
                  break;
               case 76:
               case 87:
                  if (curChar == 110)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 115)
                     jjAddStates(89, 90);
                  break;
               case 88:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(93, 94);
                  break;
               case 94:
                  if ((0x100000001000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 96:
                  if ((0x100000001000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 98:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 99:
                  if (curChar == 92)
                     jjAddStates(97, 99);
                  break;
               case 100:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 106:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(64, 66);
                  break;
               case 107:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 108:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(64, 66);
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(103, 104);
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(105, 106);
                  break;
               case 126:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(107, 108);
                  break;
               case 165:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 168:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 171:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 174:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 177:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 180:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 183:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if (curChar == 113)
                     jjCheckNAdd(188);
                  break;
               case 190:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
               case 195:
               case 199:
                  if (curChar == 101)
                     jjCheckNAdd(188);
                  break;
               case 192:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
               case 197:
                  if (curChar == 116)
                     jjCheckNAdd(188);
                  break;
               case 194:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 196:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 200:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 120)
                     jjCheckNAdd(188);
                  break;
               case 202:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 213:
                  if (curChar == 126)
                     jjAddStates(85, 86);
                  break;
               case 216:
               case 217:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(217);
                  break;
               case 218:
               case 219:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(219, 220);
                  break;
               case 221:
               case 222:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(222);
                  break;
               case 223:
               case 224:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(224, 225);
                  break;
               case 229:
               case 230:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(230);
                  break;
               case 237:
               case 238:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(238, 239);
                  break;
               case 241:
                  if (curChar == 64)
                     jjAddStates(83, 84);
                  break;
               case 243:
               case 244:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(244);
                  break;
               case 245:
                  if (curChar == 100)
                     jjAddStates(87, 88);
                  break;
               case 246:
                  if (curChar == 101 && kind > 67)
                     kind = 67;
                  break;
               case 247:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 121 && kind > 133)
                     kind = 133;
                  break;
               case 252:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(49, 51);
                  break;
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(57, 59);
                  break;
               case 106:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjAddStates(64, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 253 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   115, 116, 121, 122, 125, 126, 14, 129, 138, 216, 218, 223, 227, 231, 234, 237, 
   166, 169, 172, 175, 178, 181, 187, 190, 192, 194, 196, 198, 200, 205, 157, 158, 
   159, 160, 161, 162, 98, 99, 101, 106, 107, 109, 209, 210, 162, 160, 92, 95, 
   96, 1, 2, 4, 10, 11, 14, 93, 94, 98, 99, 101, 98, 99, 103, 101, 
   106, 107, 109, 106, 107, 111, 109, 117, 118, 14, 125, 126, 14, 219, 220, 224, 
   225, 238, 239, 242, 243, 214, 160, 250, 252, 86, 90, 62, 67, 74, 84, 12, 
   13, 100, 102, 104, 108, 110, 112, 119, 120, 123, 124, 127, 128, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", "\173", "\175", "\156\165\154\154", "\47", "\72\75", null, null, null, null, 
null, null, null, null, null, null, null, null, "\55", "\53", "\52", "\57", "\45", 
"\53\53", "\55\55", "\176", null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\151\156\164", "\154\157\156\147", "\144\141\164\145", null, 
"\144\145\143\151\155\141\154", "\142\157\157\154\145\141\156", "\163\164\162\151\156\147", 
"\142\171\164\145\141\162\162\141\171", "\154\151\163\164", "\155\141\160", "\162\145\143\157\162\144", 
"\157\142\152\145\143\164", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\145\154\163\145", "\146\157\162", "\146\157\162\145\141\143\150", 
"\146\165\156\143\164\151\157\156", "\151\146", "\162\145\164\165\162\156", "\167\150\151\154\145", 
"\143\141\163\145", "\145\156\165\155", "\151\155\160\157\162\164", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\144\157", "\164\162\171", "\143\141\164\143\150", "\123\113\111\120", 
"\101\114\114", "\117\113", "\171\145\141\162", "\155\157\156\164\150", "\167\145\145\153", 
"\144\141\171", "\150\157\165\162", "\155\151\156\165\164\145", "\163\145\143\157\156\144", 
"\155\151\154\154\151\163\145\143", "\162\145\141\144\137\144\151\143\164", 
"\167\162\151\164\145\137\144\151\143\164", "\144\145\154\145\164\145\137\144\151\143\164", null, "\54", "\75", "\72", 
"\133", "\135", "\151\163\156\165\154\154\50", "\156\166\154\50", 
"\156\166\154\62\50", "\151\151\146\50", "\160\162\151\156\164\137\163\164\141\143\153\50", 
"\142\162\145\141\153\160\157\151\156\164\50", "\162\141\151\163\145\137\145\162\162\157\162\50", 
"\160\162\151\156\164\137\145\162\162\50", "\145\166\141\154\50", "\145\166\141\154\137\145\170\160\50", 
"\160\162\151\156\164\137\154\157\147\50", "\163\145\161\165\145\156\143\145\50", "\56\156\145\170\164", 
"\56\143\165\162\162\145\156\164", "\56\162\145\163\145\164", "\154\157\157\153\165\160\50", "\56", 
"\154\157\157\153\165\160\137\156\145\170\164\50", "\154\157\157\153\165\160\137\146\157\165\156\144\50", 
"\154\157\157\153\165\160\137\141\144\155\151\156\50", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffe55c401L, 0xffffffffffffffffL, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x2feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2c0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x100L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[253];
private final int[] jjstateSet = new int[506];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TransformLangParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TransformLangParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 253; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 134)
         {
            jjmatchedKind = 134;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 31 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[31]);
                char inChar,prevChar=' ';
                image.setLength(0);
                int startLine=input_stream.getBeginLine();
                int startCol=input_stream.getBeginColumn();
                try{
                        LOOP: while(true){
                                inChar=input_stream.readChar();
                                switch(inChar){
                                case '\'':
                                        if (prevChar=='\\')
                                                image.setLength(image.length()-1);
                                        else
                                                break LOOP;
                                break;
                                case '\r':
                                case '\n':
                                        if (prevChar=='\\')
                                                image.setLength(image.length()-1);
                                        else
                                                throw new TokenMgrError("unterminated string starting on line "+startLine+" column "+startCol,0);
                                        break;
                                }
                                image.append(inChar);
                                prevChar=inChar;
                        }
                }catch(java.io.IOException ioe){
                        throw new TokenMgrError(ioe.getMessage(),0);
                }
                matchedToken.image=image.toString();
         break;
      default : 
         break;
   }
}
}
