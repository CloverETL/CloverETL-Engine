/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserTokenManager.java */
package org.jetel.interpreter;
import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.ASTnode.*;
import org.jetel.util.file.FileUtils;
import org.jetel.util.string.CharSequenceReader;
import org.jetel.util.string.StringUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.channels.Channels;

public class TransformLangParserTokenManager implements TransformLangParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0xd053f900043b1d68L) != 0L || (active2 & 0x3L) != 0L)
         {
            jjmatchedKind = 132;
            return 54;
         }
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 132;
            return 20;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 132;
            return 30;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 232;
         if ((active1 & 0x8000041800005L) != 0L)
         {
            jjmatchedKind = 132;
            return 249;
         }
         if ((active1 & 0x8000000000e000L) != 0L || (active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 132;
            return 18;
         }
         if ((active1 & 0x20000020040000L) != 0L)
         {
            jjmatchedKind = 132;
            return 48;
         }
         if ((active0 & 0x10000000000040L) != 0L)
            return 0;
         if ((active1 & 0x4000002000000L) != 0L)
         {
            jjmatchedKind = 132;
            return 14;
         }
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 132;
            return 51;
         }
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 132;
            return 44;
         }
         if ((active1 & 0x510000080L) != 0L)
         {
            jjmatchedKind = 132;
            return 59;
         }
         if ((active1 & 0x100000200400010L) != 0L)
         {
            jjmatchedKind = 132;
            return 83;
         }
         if ((active1 & 0x1000000000L) != 0L)
            return 175;
         if ((active1 & 0x2e00000000000000L) != 0L)
            return 184;
         return -1;
      case 1:
         if ((active1 & 0x200000000000000L) != 0L)
            return 186;
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 17;
         }
         if ((active1 & 0x100000200000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 86;
         }
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 58;
         }
         if ((active1 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 63;
         }
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 47;
         }
         if ((active1 & 0x800000000000000L) != 0L)
            return 204;
         if ((active1 & 0x4000002000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 13;
         }
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active1 & 0x40000001L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 250;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 39;
         }
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 50;
         }
         if ((active1 & 0x10000L) != 0L)
            return 54;
         if ((active1 & 0x1000000L) != 0L)
            return 248;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0xd07bff0004fefffcL) != 0L || (active2 & 0x7L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
            return 54;
         }
         return -1;
      case 2:
         if ((active1 & 0x800000000000000L) != 0L)
            return 203;
         if ((active1 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 46;
         }
         if ((active1 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 57;
         }
         if ((active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 62;
         }
         if ((active1 & 0x88000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 252;
         }
         if ((active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 131;
               jjmatchedPos = 2;
            }
            return 85;
         }
         if ((active0 & 0x8000001000000000L) != 0L || (active1 & 0xd1fff10004fe9f7dL) != 0L || (active2 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 54;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xe0042006080L) != 0L)
            return 54;
         if ((active1 & 0x200000000000000L) != 0L)
            return 185;
         if ((active1 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 2;
            }
            return 69;
         }
         return -1;
      case 3:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
            return 56;
         }
         if ((active1 & 0xd1cef10004e6cf3cL) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
            return 68;
         }
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
            return 84;
         }
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
            return 61;
         }
         if ((active0 & 0x8000001000000000L) != 0L || (active1 & 0x310400a8181041L) != 0L || (active2 & 0x6L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active1 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 4;
            }
            return 67;
         }
         if ((active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 4;
            }
            return 253;
         }
         if ((active1 & 0x100000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 4;
            }
            return 60;
         }
         if ((active1 & 0xd102d10000e2cb3cL) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 4;
            }
            return 54;
         }
         if ((active1 & 0xcc200014040400L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active1 & 0x102f0000080c82cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 5;
            }
            return 54;
         }
         if ((active1 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 132;
               jjmatchedPos = 5;
            }
            return 66;
         }
         if ((active1 & 0xd000010300620310L) != 0L || (active2 & 0x1L) != 0L)
            return 54;
         return -1;
      case 6:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 6;
            return 75;
         }
         if ((active1 & 0xc102f00000008820L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 6;
            return 54;
         }
         if ((active1 & 0x80400cL) != 0L)
            return 54;
         return -1;
      case 7:
         if ((active1 & 0xc002f00000000020L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 7;
            return 54;
         }
         if ((active1 & 0x400000000L) != 0L)
            return 74;
         if ((active1 & 0x100000000008800L) != 0L)
            return 54;
         return -1;
      case 8:
         if ((active1 & 0xc000700000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 8;
            return 54;
         }
         if ((active1 & 0x2800000000020L) != 0L)
            return 54;
         return -1;
      case 9:
         if ((active1 & 0xc000500000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 9;
            return 54;
         }
         if ((active1 & 0x200000000000L) != 0L)
            return 54;
         return -1;
      case 10:
         if ((active1 & 0x8000000000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 10;
            return 54;
         }
         if ((active1 & 0x4000500000000000L) != 0L)
            return 54;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L, 0x0L);
      case 37:
         return jjStopAtPos(0, 53);
      case 40:
         return jjStopAtPos(0, 60);
      case 41:
         return jjStopAtPos(0, 61);
      case 42:
         return jjStopAtPos(0, 51);
      case 43:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 99);
      case 45:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 33);
      case 61:
         return jjStartNfaWithStates_0(0, 100, 175);
      case 91:
         return jjStopAtPos(0, 102);
      case 93:
         return jjStopAtPos(0, 103);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000428L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4080800L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000041800005L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41000000101000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000e000L, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x10090000210000L, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0xd000000000000040L, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x510000080L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x60000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2900000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000020100L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000200400010L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000002000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000020040000L, 0x0L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 34);
      case 125:
         return jjStopAtPos(0, 35);
      case 126:
         return jjStartNfaWithStates_0(0, 56, 232);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 43:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 45:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 61:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa0400044080081L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x108000228820104L, active2, 0L);
      case 102:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 54);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x80500000040L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x210000000100000L, active2, 0x2L);
      case 111:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 88, 248);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0xd000000090006808L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x846b00002000400L, active2, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x8000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1060000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5000008000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000104L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa00200020000400L, active2, 0x4L);
      case 102:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000800000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2d00000440000L, active2, 0x2L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x40400000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000400L, active1, 0x10110008800L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xd000000000000008L, active2, 0x1L);
      case 112:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000004010L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x81040L, active2, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 54);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000004020021L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000080100000L, active2, 0L);
      case 121:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 89, 54);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 106, 54);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80200000800400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0x4000004008000L, active2, 0L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 54);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 54);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 54);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4220L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x14L, active2, 0L);
      case 107:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xd000000000000000L, active2, 0x1L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 54);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400040008L, active2, 0L);
      case 109:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 54);
         break;
      case 110:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2900000000000L, active2, 0L);
      case 111:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000200200100L, active2, 0L);
      case 114:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 54);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800400000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 54);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10400800L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x108010100020000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4020L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400200L, active2, 0L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 54);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x900400000000008L, active2, 0L);
      case 103:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 54);
         break;
      case 104:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 54);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000800L, active2, 0L);
      case 107:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 108:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0x10000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000010L, active2, 0L);
      case 114:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000220100L, active2, 0L);
      case 116:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(4, 121);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2900100008000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xd000000000800000L, active2, 0x1L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2d00000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xcL, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 54);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 54);
         break;
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 54);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 54);
         break;
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 54);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 108:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 54);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 54);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000800L, active2, 0L);
      case 112:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc000200000000000L, active2, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 54);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 54);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 123);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc00400000000L, active2, 0L);
      case 104:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 54);
         break;
      case 108:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 54);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 54);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000008000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L, active2, 0x1L);
      case 99:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 74);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 54);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 54);
         break;
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 54);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(7, 122);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x100000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 54);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x8000000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 54);
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x100000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 109, 54);
         break;
      case 117:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x1L);
      case 107:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 108, 54);
         break;
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 110, 54);
         break;
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 126, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 127, 54);
         break;
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(11, 128, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 252;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 232:
                  if (curChar == 61)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 61)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(225, 178);
                  else if (curChar == 46)
                     jjAddStates(12, 25);
                  else if (curChar == 61)
                     jjCheckNAddStates(26, 31);
                  else if (curChar == 34)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(32, 37);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(38, 43);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(44, 46);
                  }
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(230, 178);
                  else if (curChar == 60)
                     jjCheckNAddStates(47, 50);
                  else if (curChar == 48)
                  {
                     if (kind > 13)
                        kind = 13;
                     jjCheckNAddStates(51, 55);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if (curChar == 62)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 185:
                  if (curChar == 46)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 46)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 175:
                  if (curChar == 62)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (curChar == 62)
                  {
                     if (kind > 46)
                        kind = 46;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 184:
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(56, 58);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(59, 61);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAddStates(59, 61);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 27:
                  if (curChar == 38 && kind > 39)
                     kind = 39;
                  break;
               case 28:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 32:
                  if (curChar == 33 && kind > 40)
                     kind = 40;
                  break;
               case 33:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 34:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 35:
                  if ((0x5000000000000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 88:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(44, 46);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(89, 90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(91);
                  break;
               case 92:
                  if (curChar != 48)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddStates(51, 55);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(94, 90);
                  break;
               case 95:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(95, 90);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 98:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(98);
                  break;
               case 99:
                  if (curChar != 39)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(38, 43);
                  break;
               case 100:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 102:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 103:
                  if (curChar == 39 && kind > 22)
                     kind = 22;
                  break;
               case 104:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 68);
                  break;
               case 105:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 106:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 108:
                  if ((0xffffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 110:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 111:
                  if ((0x2400L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 112:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(72, 75);
                  break;
               case 113:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 114:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(113);
                  break;
               case 116:
                  if (curChar != 34)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(32, 37);
                  break;
               case 117:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 119:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 120:
                  if (curChar == 34 && kind > 22)
                     kind = 22;
                  break;
               case 121:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 82);
                  break;
               case 122:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 123:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(122);
                  break;
               case 125:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               case 127:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               case 128:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(86, 89);
                  break;
               case 129:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               case 130:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 131:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(129);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 134:
                  if (curChar != 46)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(90, 92);
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(90, 92);
                  break;
               case 137:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(138);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(138, 11);
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(139, 140);
                  break;
               case 141:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(142);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddTwoStates(142, 11);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(93, 95);
                  break;
               case 145:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(146);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(146, 11);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 150:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(153);
                  break;
               case 153:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 159:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(162);
                  break;
               case 162:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(164, 165);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(165);
                  break;
               case 165:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(168);
                  break;
               case 168:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(170, 171);
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(171);
                  break;
               case 171:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 174:
                  if (curChar == 61)
                     jjCheckNAddStates(26, 31);
                  break;
               case 176:
                  if (curChar == 60 && kind > 44)
                     kind = 44;
                  break;
               case 177:
                  if (curChar == 62 && kind > 46)
                     kind = 46;
                  break;
               case 178:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 179:
                  if (curChar == 60 && kind > 48)
                     kind = 48;
                  break;
               case 180:
                  if (curChar == 62 && kind > 48)
                     kind = 48;
                  break;
               case 181:
                  if (curChar == 46)
                     jjAddStates(12, 25);
                  break;
               case 182:
                  if (curChar == 46 && kind > 41)
                     kind = 41;
                  break;
               case 188:
                  if (curChar == 46 && kind > 43)
                     kind = 43;
                  break;
               case 191:
                  if (curChar == 46 && kind > 44)
                     kind = 44;
                  break;
               case 194:
                  if (curChar == 46 && kind > 45)
                     kind = 45;
                  break;
               case 197:
                  if (curChar == 46 && kind > 46)
                     kind = 46;
                  break;
               case 200:
                  if (curChar == 46 && kind > 47)
                     kind = 47;
                  break;
               case 206:
                  if (curChar == 46 && kind > 48)
                     kind = 48;
                  break;
               case 224:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(225, 178);
                  break;
               case 225:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 226:
                  if (curChar == 60)
                     jjCheckNAddStates(47, 50);
                  break;
               case 227:
                  if (curChar == 62 && kind > 42)
                     kind = 42;
                  break;
               case 228:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 229:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(230, 178);
                  break;
               case 230:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 233:
                  if (curChar == 36)
                     jjCheckNAddStates(9, 11);
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 238:
                  if (curChar == 46)
                     jjCheckNAdd(239);
                  break;
               case 239:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(239);
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 241:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 243:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 243;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 99)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 204:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(42);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  else if (curChar == 126)
                     jjAddStates(98, 99);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 100)
                     jjAddStates(100, 101);
                  else if (curChar == 115)
                     jjAddStates(102, 103);
                  else if (curChar == 109)
                     jjAddStates(104, 107);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 250:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 121)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 97)
                     jjCheckNAdd(42);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 203:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 248:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 253:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if (curChar == 99)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 110)
                     jjCheckNAdd(72);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 107)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 184:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 209;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 207;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 213;
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 215;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 86;
                  if (curChar == 101)
                     jjCheckNAdd(65);
                  break;
               case 66:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if (curChar == 101)
                     jjCheckNAdd(65);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(12);
                  break;
               case 186:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if (curChar == 101)
                     jjCheckNAdd(206);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 104)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 249:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 250;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 252:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 131)
                        kind = 131;
                  }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjCheckNAdd(54);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 1:
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(59, 61);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 11:
                  if ((0x5000000050L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 12:
                  if (curChar == 101 && kind > 28)
                     kind = 28;
                  break;
               case 15:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 115)
                     jjCheckNAdd(12);
                  break;
               case 19:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 124 && kind > 38)
                     kind = 38;
                  break;
               case 23:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x1000000010L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 25:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 29:
                  if ((0x10000000100000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 31:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 36:
                  if (curChar == 114 && kind > 65)
                     kind = 65;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 114 && kind > 131)
                     kind = 131;
                  break;
               case 45:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 49:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if (curChar == 109)
                     jjAddStates(104, 107);
                  break;
               case 64:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 99 && kind > 131)
                     kind = 131;
                  break;
               case 70:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 100 && kind > 131)
                     kind = 131;
                  break;
               case 73:
                  if (curChar == 110)
                     jjCheckNAdd(72);
                  break;
               case 76:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 115)
                     jjAddStates(102, 103);
                  break;
               case 87:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 90:
                  if ((0x100000001000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 93:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAddTwoStates(94, 90);
                  break;
               case 96:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(97);
                  break;
               case 97:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(97);
                  break;
               case 100:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 101:
                  if (curChar == 92)
                     jjAddStates(110, 112);
                  break;
               case 102:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 108:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 109:
                  if (curChar == 92)
                     jjAddStates(113, 115);
                  break;
               case 110:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 117:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 118:
                  if (curChar == 92)
                     jjAddStates(116, 118);
                  break;
               case 119:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 125:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               case 126:
                  if (curChar == 92)
                     jjAddStates(119, 121);
                  break;
               case 127:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               case 136:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(122, 123);
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 144:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(126, 127);
                  break;
               case 183:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 187:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 192:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 195:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 205:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 207:
                  if (curChar == 113)
                     jjCheckNAdd(206);
                  break;
               case 208:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
               case 213:
               case 217:
                  if (curChar == 101)
                     jjCheckNAdd(206);
                  break;
               case 210:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
               case 215:
                  if (curChar == 116)
                     jjCheckNAdd(206);
                  break;
               case 212:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 214:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 216:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 218:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 120)
                     jjCheckNAdd(206);
                  break;
               case 220:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 231:
                  if (curChar == 126)
                     jjAddStates(98, 99);
                  break;
               case 234:
               case 235:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(235);
                  break;
               case 236:
               case 237:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(237, 238);
                  break;
               case 239:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 242:
               case 243:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(243);
                  break;
               case 244:
                  if (curChar == 100)
                     jjAddStates(100, 101);
                  break;
               case 245:
                  if (curChar == 101 && kind > 65)
                     kind = 65;
                  break;
               case 246:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 251:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(59, 61);
                  break;
               case 100:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(62, 64);
                  break;
               case 108:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(69, 71);
                  break;
               case 117:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(76, 78);
                  break;
               case 125:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(83, 85);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 252 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_3()
{
   return 1;
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 11);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   133, 134, 139, 140, 143, 144, 11, 147, 156, 234, 236, 240, 184, 187, 190, 193, 
   196, 199, 205, 208, 210, 212, 214, 216, 218, 223, 175, 176, 177, 178, 179, 180, 
   117, 118, 120, 125, 126, 111, 100, 101, 103, 108, 109, 111, 89, 90, 91, 227, 
   228, 180, 178, 93, 95, 90, 96, 98, 7, 8, 11, 1, 2, 4, 100, 101, 
   103, 100, 101, 105, 103, 108, 109, 111, 108, 109, 113, 111, 117, 118, 120, 117, 
   118, 122, 120, 125, 126, 111, 125, 126, 129, 111, 135, 136, 11, 143, 144, 11, 
   237, 238, 232, 178, 249, 251, 83, 87, 59, 64, 71, 81, 9, 10, 102, 104, 
   106, 110, 112, 114, 119, 121, 123, 127, 128, 130, 137, 138, 141, 142, 145, 146, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\73", "\173", "\175", "\156\165\154\154", 
"\72\75", null, null, null, null, null, null, null, null, null, null, null, "\55", 
"\53", "\52", "\57", "\45", "\53\53", "\55\55", "\176", null, null, null, "\50", 
"\51", "\151\156\164", "\154\157\156\147", "\144\141\164\145", null, 
"\144\145\143\151\155\141\154", "\142\157\157\154\145\141\156", "\163\164\162\151\156\147", 
"\142\171\164\145\141\162\162\141\171", "\154\151\163\164", "\155\141\160", "\162\145\143\157\162\144", 
"\157\142\152\145\143\164", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\145\154\163\145", "\146\157\162", "\146\157\162\145\141\143\150", 
"\146\165\156\143\164\151\157\156", "\151\146", "\162\145\164\165\162\156", "\167\150\151\154\145", 
"\143\141\163\145", "\145\156\165\155", "\151\155\160\157\162\164", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\144\157", "\164\162\171", "\143\141\164\143\150", "\171\145\141\162", 
"\155\157\156\164\150", "\167\145\145\153", "\144\141\171", "\150\157\165\162", 
"\155\151\156\165\164\145", "\163\145\143\157\156\144", "\155\151\154\154\151\163\145\143", "\54", "\75", 
"\72", "\133", "\135", "\151\163\156\165\154\154", "\156\166\154", "\156\166\154\62", 
"\151\151\146", "\160\162\151\156\164\137\163\164\141\143\153", 
"\142\162\145\141\153\160\157\151\156\164", "\162\141\151\163\145\137\145\162\162\157\162", 
"\160\162\151\156\164\137\145\162\162", "\145\166\141\154", "\160\162\151\156\164\137\154\157\147", 
"\164\162\141\143\145", "\144\145\142\165\147", "\151\156\146\157", "\167\141\162\156", 
"\145\162\162\157\162", "\146\141\164\141\154", "\163\145\161\165\145\156\143\145", 
"\56\156\145\170\164", "\56\143\165\162\162\145\156\164", "\56\162\145\163\145\164", 
"\154\157\157\153\165\160", "\56", "\154\157\157\153\165\160\137\156\145\170\164", 
"\154\157\157\153\165\160\137\146\157\165\156\144", "\154\157\157\153\165\160\137\141\144\155\151\156", "\151\156\151\164", 
"\146\162\145\145", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
   "WithinInclude", 
   "WithingInclude", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffff925e2001L, 0xffffffffffffffffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0xefeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xec0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1100L, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[252];
private final int[] jjstateSet = new int[504];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TransformLangParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TransformLangParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 252; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 133)
         {
            jjmatchedKind = 133;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
