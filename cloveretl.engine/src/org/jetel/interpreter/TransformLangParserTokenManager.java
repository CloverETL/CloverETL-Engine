/* Generated By:JJTree&JavaCC: Do not edit this line. TransformLangParserTokenManager.java */
package org.jetel.interpreter;

public class TransformLangParserTokenManager implements TransformLangParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x800004000000L) != 0L)
         {
            jjmatchedKind = 113;
            return 24;
         }
         if ((active1 & 0x1001400000L) != 0L)
         {
            jjmatchedKind = 113;
            return 8;
         }
         if ((active1 & 0x500020080402L) != 0L)
         {
            jjmatchedKind = 113;
            return 77;
         }
         if ((active0 & 0x1800000000000000L) != 0L || (active1 & 0x1efdab71301L) != 0L)
         {
            jjmatchedKind = 113;
            return 48;
         }
         if ((active1 & 0x40L) != 0L)
            return 169;
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x2e0000008800L) != 0L)
         {
            jjmatchedKind = 113;
            return 247;
         }
         if ((active1 & 0x4004L) != 0L)
         {
            jjmatchedKind = 113;
            return 12;
         }
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 113;
            return 42;
         }
         return -1;
      case 1:
         if ((active1 & 0x8000L) != 0L)
            return 246;
         if ((active1 & 0x400000100L) != 0L)
            return 48;
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x2e0000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
            return 248;
         }
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
            return 33;
         }
         if ((active1 & 0x1000400000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x9800000000000000L) != 0L || (active1 & 0x51ebffbf7e07L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0xb000000200000000L) != 0L || (active1 & 0x7fe82bff3e07L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 48;
         }
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 32;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x3d4004000L) != 0L)
            return 48;
         if ((active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 250;
         }
         return -1;
      case 3:
         if ((active0 & 0x3000000200000000L) != 0L || (active1 & 0x2e0020401200L) != 0L)
            return 48;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0xd1f88bbf2c07L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 3;
            }
            return 48;
         }
         return -1;
      case 4:
         if ((active1 & 0x9881012000L) != 0L)
            return 48;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0xff600abe0c07L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 4;
            }
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0xfee0083a0805L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
            return 48;
         }
         if ((active1 & 0x10002840402L) != 0L)
            return 48;
         return -1;
      case 6:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0xc20008000801L) != 0L)
            return 48;
         if ((active1 & 0x3ce0003a0004L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active1 & 0x3c0000020004L) != 0L)
            return 48;
         if ((active1 & 0xe000380000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
            return 48;
         }
         return -1;
      case 8:
         if ((active1 & 0x2000380000L) != 0L)
            return 48;
         if ((active1 & 0xc000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
            return 48;
         }
         return -1;
      case 9:
         if ((active1 & 0x8000000000L) != 0L)
            return 48;
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 37:
         return jjStopAtPos(0, 50);
      case 40:
         return jjStopAtPos(0, 57);
      case 41:
         return jjStopAtPos(0, 58);
      case 42:
         return jjStopAtPos(0, 48);
      case 43:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 67);
      case 45:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 47:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x0L);
      case 58:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 32);
      case 61:
         return jjStartNfaWithStates_0(0, 70, 169);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000010001L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000021000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xa000000000000000L, 0x2e0000008800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4004L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x12000100L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0xc0a00000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x800004000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6600000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x808040000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500020080402L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1001400000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 123:
         return jjStopAtPos(0, 68);
      case 125:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 43:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 45:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x2e0000001000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x8840800L);
      case 102:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 105:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 98, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 246);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x10ac1224001L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf000410000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x500000000002L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x800000080004L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000010000L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      case 103:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000402400L);
      case 108:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x10002820004L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 112:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8100000L);
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500020000002L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1200L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x2e0000040000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1800000000L);
      case 119:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L);
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xd00000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8001010800L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000004L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 48);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2e0000300000L);
      case 103:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x2L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8002001L);
      case 109:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x7800000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2040000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 48);
         break;
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x280000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30008000000L);
      case 99:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x140000000000L);
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 107:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000002L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x340000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000880004L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x100000000001L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8300000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L);
      case 103:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 48);
         break;
      case 104:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 48);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000004L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000020000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L);
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x300000L);
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 48);
         break;
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 48);
         break;
      case 109:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 48);
         break;
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 48);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000004L);
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 48);
         break;
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 75, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x180000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000020000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 48);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 48);
         break;
      case 102:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 106, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000L);
      case 109:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 48);
         break;
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 48);
         return jjMoveStringLiteralDfa8_0(active1, 0x80000L);
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 48);
         return jjMoveStringLiteralDfa8_0(active1, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active1, 0x300000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L);
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 48);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 48);
         break;
      case 103:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 48);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x8000000000L);
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L);
      case 116:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 103, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 107:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 102, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 250;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 169:
                  if (curChar == 62)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if (curChar == 62)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 36)
                     jjCheckNAddStates(9, 12);
                  else if (curChar == 33)
                     jjCheckNAddTwoStates(219, 172);
                  else if (curChar == 46)
                     jjAddStates(13, 26);
                  else if (curChar == 61)
                     jjCheckNAddStates(27, 32);
                  else if (curChar == 34)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(33, 38);
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(39, 44);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(45, 47);
                  }
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(224, 172);
                  else if (curChar == 60)
                     jjCheckNAddStates(48, 51);
                  else if (curChar == 48)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAddStates(52, 56);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if (curChar == 62)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(57, 59);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 21:
                  if (curChar == 38 && kind > 36)
                     kind = 36;
                  break;
               case 22:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if (curChar == 33 && kind > 37)
                     kind = 37;
                  break;
               case 27:
                  if (curChar == 60 && kind > 40)
                     kind = 40;
                  break;
               case 28:
                  if (curChar == 62 && kind > 42)
                     kind = 42;
                  break;
               case 29:
                  if ((0x5000000000000000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 82:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(45, 47);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if (curChar != 48)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddStates(52, 56);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(88, 84);
                  break;
               case 89:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(89, 84);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(92);
                  break;
               case 93:
                  if (curChar != 39)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(39, 44);
                  break;
               case 94:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 96:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 97:
                  if (curChar == 39 && kind > 21)
                     kind = 21;
                  break;
               case 98:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 99:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 100:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 102:
                  if ((0xffffff7fffffdbffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 104:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 105:
                  if ((0x2400L & l) != 0L)
                     kind = 24;
                  break;
               case 106:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(70, 73);
                  break;
               case 107:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 108:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 109:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(107);
                  break;
               case 110:
                  if (curChar != 34)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(33, 38);
                  break;
               case 111:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 113:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 114:
                  if (curChar == 34 && kind > 21)
                     kind = 21;
                  break;
               case 115:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(77, 80);
                  break;
               case 116:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 117:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(116);
                  break;
               case 119:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               case 121:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               case 122:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(84, 87);
                  break;
               case 123:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               case 124:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(123);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 128:
                  if (curChar != 46)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(88, 90);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddStates(88, 90);
                  break;
               case 131:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(132);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(132, 5);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 135:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(136);
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(136, 5);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               case 139:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(140);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(140, 5);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(147);
                  break;
               case 147:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 153:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(155, 156);
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(156);
                  break;
               case 156:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(158, 159);
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(159);
                  break;
               case 159:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(162);
                  break;
               case 162:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(164, 165);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(165);
                  break;
               case 165:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 168:
                  if (curChar == 61)
                     jjCheckNAddStates(27, 32);
                  break;
               case 170:
                  if (curChar == 60 && kind > 41)
                     kind = 41;
                  break;
               case 171:
                  if (curChar == 62 && kind > 43)
                     kind = 43;
                  break;
               case 172:
                  if (curChar == 61 && kind > 45)
                     kind = 45;
                  break;
               case 173:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 174:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 175:
                  if (curChar == 46)
                     jjAddStates(13, 26);
                  break;
               case 176:
                  if (curChar == 46 && kind > 38)
                     kind = 38;
                  break;
               case 179:
                  if (curChar == 46 && kind > 39)
                     kind = 39;
                  break;
               case 182:
                  if (curChar == 46 && kind > 40)
                     kind = 40;
                  break;
               case 185:
                  if (curChar == 46 && kind > 41)
                     kind = 41;
                  break;
               case 188:
                  if (curChar == 46 && kind > 42)
                     kind = 42;
                  break;
               case 191:
                  if (curChar == 46 && kind > 43)
                     kind = 43;
                  break;
               case 194:
                  if (curChar == 46 && kind > 44)
                     kind = 44;
                  break;
               case 200:
                  if (curChar == 46 && kind > 45)
                     kind = 45;
                  break;
               case 218:
                  if (curChar == 33)
                     jjCheckNAddTwoStates(219, 172);
                  break;
               case 219:
                  if (curChar == 61 && kind > 39)
                     kind = 39;
                  break;
               case 220:
                  if (curChar == 60)
                     jjCheckNAddStates(48, 51);
                  break;
               case 221:
                  if (curChar == 62 && kind > 39)
                     kind = 39;
                  break;
               case 222:
                  if (curChar == 61 && kind > 41)
                     kind = 41;
                  break;
               case 223:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(224, 172);
                  break;
               case 224:
                  if (curChar == 61 && kind > 43)
                     kind = 43;
                  break;
               case 226:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 227:
                  if (curChar == 36)
                     jjCheckNAddStates(9, 12);
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 232:
                  if (curChar == 46)
                     jjCheckNAdd(233);
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(233);
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(234, 235);
                  break;
               case 235:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 247:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 248;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 250:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 246:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 121)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  if (curChar == 101)
                     jjCheckNAdd(59);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(6);
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 126)
                     jjAddStates(98, 99);
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 16;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 100)
                     jjAddStates(100, 101);
                  else if (curChar == 115)
                     jjAddStates(102, 103);
                  else if (curChar == 109)
                     jjAddStates(104, 107);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 9:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjCheckNAdd(6);
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x4000000040000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 124 && kind > 35)
                     kind = 35;
                  break;
               case 17:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x1000000010L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 19:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 25:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 30:
                  if (curChar == 114 && kind > 62)
                     kind = 62;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 34:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 114 && kind > 112)
                     kind = 112;
                  break;
               case 37:
                  if (curChar == 97)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 107 && kind > 112)
                     kind = 112;
                  break;
               case 41:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 117)
                     jjCheckNAdd(36);
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 109)
                     jjAddStates(104, 107);
                  break;
               case 50:
                  if (curChar == 104 && kind > 112)
                     kind = 112;
                  break;
               case 51:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101 && kind > 112)
                     kind = 112;
                  break;
               case 55:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 99 && kind > 112)
                     kind = 112;
                  break;
               case 60:
                  if (curChar == 101)
                     jjCheckNAdd(59);
                  break;
               case 61:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 100 && kind > 112)
                     kind = 112;
                  break;
               case 67:
               case 78:
                  if (curChar == 110)
                     jjCheckNAdd(66);
                  break;
               case 68:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 115)
                     jjAddStates(102, 103);
                  break;
               case 79:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 84:
                  if ((0x100000001000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 87:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAddTwoStates(88, 84);
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(91);
                  break;
               case 94:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 95:
                  if (curChar == 92)
                     jjAddStates(110, 112);
                  break;
               case 96:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 102:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 103:
                  if (curChar == 92)
                     jjAddStates(113, 115);
                  break;
               case 104:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 111:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 112:
                  if (curChar == 92)
                     jjAddStates(116, 118);
                  break;
               case 113:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 119:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               case 120:
                  if (curChar == 92)
                     jjAddStates(119, 121);
                  break;
               case 121:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               case 130:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(122, 123);
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 138:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(126, 127);
                  break;
               case 177:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 180:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 183:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 186:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 192:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 195:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if (curChar == 113)
                     jjCheckNAdd(200);
                  break;
               case 202:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
               case 207:
               case 211:
                  if (curChar == 101)
                     jjCheckNAdd(200);
                  break;
               case 204:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
               case 209:
                  if (curChar == 116)
                     jjCheckNAdd(200);
                  break;
               case 206:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 208:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 212:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 120)
                     jjCheckNAdd(200);
                  break;
               case 214:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 225:
                  if (curChar == 126)
                     jjAddStates(98, 99);
                  break;
               case 228:
               case 229:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(229);
                  break;
               case 230:
               case 231:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 233:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 236:
               case 237:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(237);
                  break;
               case 238:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 239:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 240:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 241:
                  if (curChar == 125 && kind > 56)
                     kind = 56;
                  break;
               case 242:
                  if (curChar == 100)
                     jjAddStates(100, 101);
                  break;
               case 243:
                  if (curChar == 101 && kind > 62)
                     kind = 62;
                  break;
               case 244:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 249:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 62);
                  break;
               case 102:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(67, 69);
                  break;
               case 111:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(74, 76);
                  break;
               case 119:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(81, 83);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 250 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 10);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   127, 128, 133, 134, 137, 138, 5, 141, 150, 228, 230, 234, 238, 178, 181, 184, 
   187, 190, 193, 199, 202, 204, 206, 208, 210, 212, 217, 169, 170, 171, 172, 173, 
   174, 111, 112, 114, 119, 120, 105, 94, 95, 97, 102, 103, 105, 83, 84, 85, 
   221, 222, 174, 172, 87, 89, 84, 90, 92, 1, 2, 5, 94, 95, 97, 94, 
   95, 99, 97, 102, 103, 105, 102, 103, 107, 105, 111, 112, 114, 111, 112, 116, 
   114, 119, 120, 105, 119, 120, 123, 105, 129, 130, 5, 137, 138, 5, 231, 232, 
   240, 241, 226, 172, 247, 249, 77, 81, 53, 58, 65, 75, 3, 4, 96, 98, 
   100, 104, 106, 108, 113, 115, 117, 121, 122, 124, 131, 132, 135, 136, 139, 140, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\73", "\156\165\154\154", "\72\75", null, null, null, 
null, null, null, null, null, null, null, null, "\55", "\53", "\52", "\57", "\45", 
"\53\53", "\55\55", null, null, null, null, "\50", "\51", "\151\156\164", 
"\154\157\156\147", "\144\141\164\145", null, "\144\145\143\151\155\141\154", 
"\142\157\157\154\145\141\156", "\163\164\162\151\156\147", "\146\165\156\143\164\151\157\156", "\54", "\173", 
"\175", "\75", "\72", "\151\146", "\145\154\163\145", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\143\141\163\145", "\167\150\151\154\145", "\146\157\162", "\144\157", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", 
"\163\165\142\163\164\162\151\156\147", "\165\160\160\145\162\143\141\163\145", 
"\154\157\167\145\162\143\141\163\145", "\164\162\151\155", "\154\145\156\147\164\150", "\164\157\144\141\171", 
"\151\163\156\165\154\154", "\156\166\154", "\162\145\160\154\141\143\145", "\151\151\146", 
"\163\161\162\164", "\154\157\147", "\154\157\147\61\60", "\145\170\160", "\160\157\167", 
"\160\151", "\162\157\165\156\144", "\164\162\165\156\143", 
"\160\162\151\156\164\137\145\162\162", "\160\162\151\156\164\137\163\164\141\143\153", 
"\142\162\145\141\153\160\157\151\156\164", "\143\157\156\143\141\164", "\144\141\164\145\141\144\144", 
"\144\141\164\145\144\151\146\146", "\144\141\164\145\62\163\164\162", "\163\164\162\62\144\141\164\145", 
"\144\141\164\145\62\156\165\155", "\163\164\162\62\156\165\155", "\156\165\155\62\163\164\162", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "WithinComment", 
   "WithinLineComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffc92f1001L, 0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x6feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6c0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x900L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[250];
private final int[] jjstateSet = new int[500];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TransformLangParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TransformLangParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 250; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 114)
         {
            jjmatchedKind = 114;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
}
