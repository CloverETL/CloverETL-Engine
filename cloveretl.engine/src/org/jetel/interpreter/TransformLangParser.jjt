/*
    Clover.ETL - Transformation language grammar.
    (c) 2004-07 David.Pavlis <david.pavlis@centrum.cz>
    Released under LGPL license.
    
    (Adapted from Ken Beesley and Metamata's javacc 'Interpreter' example.)
 
*/

options {
   MULTI=true;
   STATIC=false;
   VISITOR=true; 
   NODE_USES_PARSER=true;
   NODE_PREFIX="CLVF";
   //NODE_PACKAGE="org.jetel.interpreter.ASTnode";
   NODE_PACKAGE="org.jetel.interpreter";
   NODE_SCOPE_HOOK=true; // save line & column number
   JAVA_UNICODE_ESCAPE = true ;
   BUILD_NODE_FILES=false; // change to True only if new Node has been added 
   
}


/* *** Specifcation of the parser class *** */

PARSER_BEGIN(TransformLangParser)

package org.jetel.interpreter;

import org.jetel.data.DataRecord;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.interpreter.ASTnode.*;
import org.jetel.util.StringUtils;
import org.jetel.util.FileUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.LinkedList;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.channels.Channels;

public class TransformLangParser extends ExpParser {

       DataRecordMetadata[] inRecordsMetadata;
       DataRecordMetadata[] outRecordsMetadata;
       Map inDataRecordsMap;
       Map outDataRecordsMap;
	   ParserHelper parserHelper;       
       List<Throwable> parseExceptions;
       String sourceFilename;

       public TransformLangParser(DataRecordMetadata recordMetadata,java.io.InputStream stream){
              this(new DataRecordMetadata[] {recordMetadata}, new DataRecordMetadata[0],stream,"UTF-8");
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream){
			this(inRecordsMetadata,outRecordsMetadata,stream,"UTF-8");
       							
       }
       
       
       public TransformLangParser(DataRecordMetadata[] inRecordsMetadata,
       							DataRecordMetadata[] outRecordsMetadata,
       							java.io.InputStream stream,String encoding){
              this(stream,encoding);
              parserHelper=new ParserHelper();
              this.inRecordsMetadata=inRecordsMetadata;
              this.outRecordsMetadata=outRecordsMetadata;
              inDataRecordsMap=new HashMap(inRecordsMetadata.length);
              outDataRecordsMap=new HashMap(outRecordsMetadata.length);
              parseExceptions=new LinkedList<Throwable>();
              for(int i=0;i<inRecordsMetadata.length;i++){
                inDataRecordsMap.put(inRecordsMetadata[i].getName(),new Integer(i));
              }
              for(int i=0;i<outRecordsMetadata.length;i++){
                outDataRecordsMap.put(outRecordsMetadata[i].getName(),new Integer(i));
              }
      }
      
      TransformLangParser(TransformLangParser parent,String filename,java.io.InputStream stream){
			  this(stream);
			  this.sourceFilename=filename;
			  this.parserHelper=parent.parserHelper;
              this.inRecordsMetadata=parent.inRecordsMetadata;
              this.outRecordsMetadata=parent.outRecordsMetadata;
              this.inDataRecordsMap=parent.inDataRecordsMap;
              this.outDataRecordsMap=parent.outDataRecordsMap;
              this.parseExceptions=parent.parseExceptions;    	
      }

      public final DataRecordMetadata getInRecordMeta(){
             return inRecordsMetadata[0];
      }
      
      public final int getInRecordNum(String name){
      	try{
             return ((Integer)inDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final int getOutRecordNum(String name){
        try{
             return ((Integer)outDataRecordsMap.get(name)).intValue() ;
      	}catch(Exception ex){
      		return -1;
      	}
      }
      
      public final DataRecordMetadata getInRecordMeta(int num){
      	try{
             return inRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
      public final DataRecordMetadata getOutRecordMeta(int num){
      	try{
             return outRecordsMetadata[num];
      	}catch(Exception ex){
      		return null;
      	}
      }
      
      
     /**
      *  Returns map of function symbols where
      *  under function name is saved reference to appropriate 
      *  function definition/declaration node - upon that node
      *  visit() method of TransformationLangExecutor can be called to
      *  execute function's body. 
      */
      
      public final Map getFunctions(){
        return parserHelper.functionSymbol;
    }
    
     public final CLVFFunctionDeclaration getFunction(String name){
     	return (CLVFFunctionDeclaration) parserHelper.functionSymbol.get(name);
     }
      
     
     /**
      *  Returns map of global variable symbols where
      *  under variable name is saved appropriate slot in 
      *  which variable's value is saved. 
      */
      public final Map getGlobalVariables(){
     	return parserHelper.globalVariableSymbol;
     }
     
     public final int getGlobalVariableSlot(String name){
     	return parserHelper.getGlobalVariableSlot(name);
     }
     
     public static final String unquote(String image){
     	return image.substring(1,image.length()-1);
     }
      
   /**
    * Save the current line number for run-time error messages
    */
   void jjtreeOpenNodeScope(Node n)
    {
       Token t = getToken(0);
       if (t!= null) {
           ((SimpleNode) n).setLineNumber(t.beginLine);
           ((SimpleNode) n).setColumnNumber(t.beginColumn);
       }
    }

   /**
    * Dummy routine, required because NODE_SCOPE_HOOK is true
    */
    void jjtreeCloseNodeScope(Node n)
    {
    }
    
    public List getParseExceptions(){
    	return parseExceptions;
    }
      
}

PARSER_END(TransformLangParser)

/* *** Token specification *** */

/* Skip whitespace */
SKIP : { " " | "\t" | "\n" | "\r" | "\n\r" }


/* HANDLING COMMENTS */
SPECIAL_TOKEN: {  <"/*"> : WithinComment }
<WithinComment> SPECIAL_TOKEN:
{
    <"*/"> : DEFAULT
}
<WithinComment> MORE: { <~[]> }

SPECIAL_TOKEN: {  <"//"> : WithinLineComment }
<WithinLineComment> SPECIAL_TOKEN:
{
    <"\n"> : DEFAULT
}
<WithinLineComment> MORE: { <~[]> }

SPECIAL_TOKEN: { <"#include"> : WithinInclude }
<WithinInclude> SPECIAL_TOKEN:
{
	<"\n"> : DEFAULT
}
<WithingInclude> MORE: { <~[]> }


/* Literals */
TOKEN : {
 <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  <#DIGIT: ["0"-"9"]>
|  <#LETTER: [ "a"-"z", "A"-"Z" ] >
|  <#UNDERSCORE: [ "_" ] >
|  <DECIMAL_LITERAL:  ["1"-"9"] (["0"-"9"])*>
|  <HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <OCTAL_LITERAL: "0" (["0"-"7"])*>
|<FLOATING_POINT_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <STRING_LITERAL: <QUOTED_STRING> | <DQUOTED_STRING> >
|  <#QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\'">
|  <#DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
| <UNTERMINATED_STRING_LITERAL: <UNTERMINATED_QUOTED_STRING> | <UNTERMINATED_DQUOTED_STRING> >
|  <#UNTERMINATED_QUOTED_STRING: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|  <#UNTERMINATED_DQUOTED_STRING: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* (["\n","\r"])? >
|<BOOLEAN_LITERAL: <TRUE> | <FALSE> >
| <#TRUE: "true">
| <#FALSE: "false">
|<DATE_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? >
|<DATETIME_LITERAL: <DIGIT><DIGIT><DIGIT><DIGIT>"-"<DIGIT>(<DIGIT>)?"-"<DIGIT>(<DIGIT>)? " " <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)? ":" <DIGIT>(<DIGIT>)?>
|<SEMICOLON: ";">
|<NULL_LITERAL: "null">
}

TOKEN : {
<MAPPING: ":=">
}

/* Logical operators */
TOKEN [IGNORE_CASE]: {
  < OR: "or" | "||" >
| < AND: "and" | "&&" >
| < NOT: "not" | "!" >
}


/* Comparison Operators */
TOKEN [IGNORE_CASE]: {
  < EQUAL: "==" | ".eq.">
| < NON_EQUAL: "!=" | "<>" | ".ne." >
| < LESS_THAN: "<" | ".lt." >
| < LESS_THAN_EQUAL: "<=" | "=<" | ".le." >
| < GREATER_THAN: ">" | ".gt.">
| < GREATER_THAN_EQUAL: ">=" | "=>" | ".ge." >
| < REGEX_EQUAL: "~=" | ".regex." >
}

TOKEN: {
<CMPOPERATOR : <EQUAL> | <NON_EQUAL> | <LESS_THAN> | <LESS_THAN_EQUAL> | <GREATER_THAN>
| <GREATER_THAN_EQUAL> | <REGEX_EQUAL> >
}

/* Numeric Operators */
TOKEN: {
 <MINUS: "-" >
| <PLUS: "+" >
| <MULTIPLY: "*" >
| <DIVIDE: "/" >
| <MODULO: "%" >
| <INCR: "++" >
| <DECR: "--" >
| <TILDA: "~" >
}

/* Clover Field Identifiers */
TOKEN: {
  < FIELD_ID: "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}

/* Clover Record Field Identifiers */
TOKEN: {
  < REC_NAME_FIELD_ID:  "$" (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* "." (<LETTER>|<DIGIT>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
  | < REC_NUM_FIELD_ID:  "$" <DIGIT> (<DIGIT>)* "." (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}


/* Parenthesis */
TOKEN: {
  <OPEN_PAR: "("> |
  <CLOSE_PAR: ")">
}


TOKEN : /* variable Types */
{ /*<VARIABLE_TYPE: <INT_VAR>|<LONG_VAR>|<DATE_VAR>|<DOUBLE_VAR>|<DECIMAL_VAR>|
	<BOOLEAN_VAR>|<STRING_VAR>|<LIST_VAR>|<MAP_VAR>|<RECORD_VAR>|<OBJECT_VAR>> |*/
   <INT_VAR: "int" >
 |  <LONG_VAR: "long" >
 |  <DATE_VAR: "date" >
 |  <DOUBLE_VAR: "number" | "double" >
 |  <DECIMAL_VAR: "decimal" >
 |  <BOOLEAN_VAR: "boolean" >
 |  <STRING_VAR: "string" >
 |  <BYTE_VAR: "byte" >
 |  <LIST_VAR: "list" >
 |  <MAP_VAR: "map" >
 |  <RECORD_VAR: "record" >
 |  <OBJECT_VAR: "object" >
 }

/* reserved workds */
TOKEN :
{
  < BREAK: "break" >
| < CONTINUE: "continue" >
| < ELSE: "else" >
| < FOR: "for" >
| < FOR_EACH: "foreach" >
| < FUNCTION: "function" >
| < IF: "if" >
| < RETURN: "return" >
| < WHILE: "while" >
| < CASE: "case" >
| < ENUM: "enum" >
| < IMPORT: "import" >
| < SWITCH: "switch" >
| < CASE_DEFAULT: "default" >
| < DO: "do" >
}

TOKEN :  /* date parts */
{ <YEAR: "year" >
  |<MONTH: "month" > 
  |<WEEK: "week" >
  |<DAY:  "day" >
  |<HOUR:  "hour" >
  |<MINUTE: "minute" >
  |<SECOND: "second" >
  |<MILLISEC: "millisec" >
}
  

/* 
 *  The start nonterminal and its productions. 
 *  Nonterminal & productions for transformation language
 */

CLVFStart Start() : {}        // Start -> Exp
{
  CompilationUnit() <EOF>
  { 
  	if (parseExceptions.size()>0){
  		throw (ParseException)parseExceptions.get(0);
  	}	
  	return jjtThis; 
  }
}

/* 
 *  The start expression nonterminal and its productions. 
 *  Nonterminal & productions for expressions only
 */


CLVFStartExpression StartExpression() : {}
{
	ConditionalOrExpression() <EOF>
	{ 
		if (parseExceptions.size()>0){
  			throw (ParseException)parseExceptions.get(0);
  		}		
		return jjtThis;
	}
}

void CompilationUnit() #void :
{
   String name;
}
{
	(ImportSource() ";" )*

   (
       VarDeclaration() ";"
   
     |
       Statement()
       
     |
       FunctionDeclaration()
   )*
   
   (
  		Mapping() ";"
   	)*
   	
   <EOF>
}

void ImportSource() :{	Token t;}{	// must parse whole tree and insert it at this place	<IMPORT> t=<STRING_LITERAL> 	{		String filenameURL=unquote(t.image);
		InputStream stream;
		try{
			stream=Channels.newInputStream(FileUtils. getReadableChannel(null, filenameURL)); 
			// stream=new BufferedInputStream(new FileInputStream(filenameURL));
		}catch(Exception ex){
			throw new ParseException(t,"can't open import file \""+filenameURL+"\"",ex);
		} 
		CLVFStart parseTree;
		try{
			TransformLangParser parser = new TransformLangParser(this,filenameURL,stream);
		 	parseTree = parser.Start();
		}catch(ParseException e){
			e.setFilename(filenameURL);
			throw e;
			//new ParseException(t,"error when parsing import file \""+filenameURL+"\"",e);
		}		jjtThis.jjtAddChild(parseTree, 0);	}}

void FunctionDeclaration() :
{
	Token t,r;
 	int order=0; 
 }
{
	//TODO: add function types
	
	<FUNCTION>
	t = <IDENTIFIER> { 
		jjtThis.setName(t.image); 
		if (parserHelper.functionSymbol.put(t.image,jjtThis)!=null){
			 throw new ParseException(t,"function "+t.image+" already declared");	
			}
		parserHelper.enteredFunctionDeclaration(t.image);
		}
		
	"("  
		 [ 
		 	t = <IDENTIFIER> { jjtThis.addVarName(order++, t.image); 
							if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} ]
		
		( ","  
			  t = <IDENTIFIER> { jjtThis.addVarName(order++,t.image); 
							if (!parserHelper.addLocalVariable(t.image,OBJECT_VAR)){
							  throw new ParseException(t,"parameter ["+t.image+"] already declared in function"
							  +parserHelper.functionName);
							}
						} )* 
	
	")"
	"{"
	  ( VarDeclaration() ";" )*
	  ( Statement() )* 
	  [ ( Mapping() ";" )+ [ ReturnStatement() ] ]
	 
	 "}"
	{
		parserHelper.exitedFunctionDeclaration();	
	}
}
/*
 JAVACODE
    void FuncDeclarationExit() #void {
	
	  parserHelper.exitedFunctionDeclaration();	
    }
*/

void VarDeclaration():
{  Token t,l,p;  int varSlot;
}{  try {
  	
    (<INT_VAR> |  <LONG_VAR> | <DOUBLE_VAR> | <DECIMAL_VAR> | <STRING_VAR>		| <DATE_VAR> | <BOOLEAN_VAR> | <LIST_VAR> | <MAP_VAR> | <OBJECT_VAR>
	/* //TODO:
    | <RECORD_VAR>{
      jjtThis.setType(MAP_VAR);
    }*/    ) 
    
    {
    	jjtThis.setType(getToken(0).kind);
    }

    ["(" l=<INTEGER_LITERAL> { jjtThis.setLength(l.image);} [ "," p=<INTEGER_LITERAL>  { jjtThis.setPrecision(p.image); } ] ")"   ] 
      
    t = <IDENTIFIER>{      if (!parserHelper.addVariable(t.image,jjtThis.getType())){        throw new ParseException(t, "variable ["+t.image+"] already declared");
      }      else {        // is it local variable declaration ?
		if (parserHelper.inFunctionDeclaration){          jjtThis.setVarSlot(parserHelper.getLocalVariableSlot(t.image));          jjtThis.setLocalVariale(true);        }        else {          jjtThis.setVarSlot(parserHelper.getGlobalVariableSlot(t.image));          jjtThis.setLocalVariale(false);        }        jjtThis.setName(t.image);      }    }
    
    ["=" ConditionalOrExpression()]
    
 }catch (ParseException e){    parseExceptions.add(e);//following code causes parser to cough     
//do {//      t = getNextToken();//    }//    while (t.kind != SEMICOLON);  }}

void Expression() #void : {}
{
  //LOOKAHEAD( PrimaryExpression() "=" )
  LOOKAHEAD( VarExp() "=" )
  		Assignment()
  |
  	ConditionalOrExpression()   
  
}

void Assignment() #Assignment(2) :
{}
{
 // PrimaryExpression() "=" Expression()
 	VarExp() "=" Expression()
}


void Mapping() : // assignment of value to Clover field
{ Token t ;}
{	
  	/*OutputFieldExp() */
  (	t = <FIELD_ID> { jjtThis.setFieldName(t.image); } 
  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); }
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); }
  	)
  	<MAPPING> 
  	
  	ConditionalOrExpression() (":" ConditionalOrExpression())*
}

/* Other nonterminals and their productions */

void ConditionalOrExpression() #void : {}        
{
   ConditionalAndExpression()
   ( <OR> ConditionalAndExpression() #Or(2) )*
}

void ConditionalAndExpression() #void : {}
{
   EqualityExpression()
   ( <AND> EqualityExpression() #And(2) ) *
}

void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
     <EQUAL> RelationalExpression() { jjtThis.cmpType=EQUAL; } #Comparison(2)
   |
     <NON_EQUAL> RelationalExpression() { jjtThis.cmpType=NON_EQUAL; } #Comparison(2)
  )*
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression()
  (
    <LESS_THAN> AdditiveExpression() { jjtThis.cmpType=LESS_THAN; } #Comparison(2)
   |
    <GREATER_THAN> AdditiveExpression() { jjtThis.cmpType=GREATER_THAN; } #Comparison(2)
   |
    <LESS_THAN_EQUAL> AdditiveExpression() { jjtThis.cmpType=LESS_THAN_EQUAL; } #Comparison(2)
   |
    <GREATER_THAN_EQUAL> AdditiveExpression() { jjtThis.cmpType=GREATER_THAN_EQUAL; } #Comparison(2)
   | 
   	<REGEX_EQUAL>  RegexLiteral() { jjtThis.cmpType=REGEX_EQUAL; } #Comparison(2)
  )*
}

void AdditiveExpression() #void : {}
{
 MultiplicativeExpression()
 (
     <PLUS> MultiplicativeExpression() #AddNode(2)
   |
     <MINUS> MultiplicativeExpression() #SubNode(2)
  )*
}

void MultiplicativeExpression() #void : {}
{
     UnaryExpression()
  (
    <MULTIPLY> UnaryExpression() #MulNode(2)
   |
    <DIVIDE> UnaryExpression() #DivNode(2)
   |
    <MODULO> UnaryExpression() #ModNode(2)
  )*
}




void PostfixOp() #Operator :
{
  Token t;
}
{
  ( <INCR> | <DECR>)
  {
    jjtThis.setOperator(getToken(0).kind);
  }
}
void PostfixExpression() #PostfixExpression(>1) :
{}
{
	PrimaryExpression()  [ PostfixOp() ] 
}


void UnaryOp() #Operator :
{
  Token t;
}
{ 
  (  <INCR> | <DECR> | <PLUS> | <MINUS> | <TILDA> | <NOT> )
  {
    jjtThis.setOperator(getToken(0).kind);
  }
}
void UnaryExpression() #UnaryExpression(>1) :
{}
{ 
	
	 PostfixExpression()
	|	UnaryOp() UnaryExpression()
}


/*  OLD CODE
void UnaryExpression() #void :
{}
{
	 LOOKAHEAD(2) PrimaryExpression()
	 | "-" PrimaryExpression() #MinusNode(1)
	 | <NOT> UnaryExpression() #Negation(1)
	 | "size" "(" VarExp() ")" #SizeNode(1)
	 
	 
} 
*/

void PrimaryExpression() #void : {}
{
	 LOOKAHEAD(3) FunctionCall()
	 | SymbolNameExp()
     |LitExp()
	 |VarExp()
     |InputFieldExp()
     |<OPEN_PAR> Expression() <CLOSE_PAR>
   
  
}

void FunctionCall() #void : {}
{
 	LOOKAHEAD(2) BuildInFunction()
 	| FunctionCallStatement()
 	
}

void LitExp() #void :            // 
{
	Token t;
}
{
 t=<FLOATING_POINT_LITERAL>
  	{ jjtThis.setVal(FLOATING_POINT_LITERAL,t.image);} #Literal
 |t=<HEX_LITERAL>
  	{ jjtThis.setVal(HEX_LITERAL,t.image);}   #Literal
 |t=<OCTAL_LITERAL>
  	{ jjtThis.setVal(OCTAL_LITERAL,t.image);}   #Literal
 |t=<INTEGER_LITERAL>
  	{ jjtThis.setVal(INTEGER_LITERAL,t.image);}   #Literal
 |t=<STRING_LITERAL>
  	{ jjtThis.setVal(STRING_LITERAL,StringUtils.stringToSpecChar(unquote(t.image))); }   #Literal
 |t=<BOOLEAN_LITERAL>
  	{ jjtThis.setVal(BOOLEAN_LITERAL,t.image);}   #Literal
 |t=<DATE_LITERAL>
 	{ jjtThis.setVal(DATE_LITERAL,t.image);}   #Literal
 |t=<DATETIME_LITERAL>
  	{ jjtThis.setVal(DATETIME_LITERAL,t.image);}   #Literal
 |t=<NULL_LITERAL>
 	{ jjtThis.setVal(NULL_LITERAL,t.image); } #Literal
 |t = <UNTERMINATED_STRING_LITERAL>
  {
       throw new ParseException(t,"unterminated string literal");
  }
}

void InputFieldExp() #void :// IDExp -> ID
{  Token t;}{  t = <FIELD_ID> { jjtThis.setFieldName(t.image); } #InputFieldLiteral  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); } #InputFieldLiteral
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); } #InputFieldLiteral}/*
void OutputFieldExp() #void :// IDExp -> ID
{
  Token t;
}
{
  t = <FIELD_ID> { jjtThis.setFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NAME_FIELD_ID> { jjtThis.setRecordFieldName(t.image); } #OutputFieldLiteral
  | t = <REC_NUM_FIELD_ID> { jjtThis.setRecordNumFieldName(t.image); } #OutputFieldLiteral
}
*/


void VarExp() #VariableLiteral :
{
	Token t,u;
	int varSlot;
	int varType;
	boolean indexSet=false;
}
{
	try{
	
	// primitive type
  t=<IDENTIFIER> { 

  		// first, look for local var reference
  		if (parserHelper.inFunctionDeclaration && 
  				(varSlot=parserHelper.getLocalVariableSlot(t.image))>=0){
  			jjtThis.setLocalVariale(true);
  			varType=parserHelper.getLocalVariableType(t.image);
  		}else{
    		if ((varSlot=parserHelper.getGlobalVariableSlot(t.image))<0){
  				throw new ParseException(t,"variable ["+t.image+"] is not declared");
    		}
    		jjtThis.setLocalVariale(false);
    		varType=parserHelper.getGlobalVariableType(t.image);
	  	}
  	jjtThis.setVarSlot(varSlot); 
  	jjtThis.setVarName(t.image);
  	jjtThis.setVarType(varType); 
  	} 
  	
  	 // it may be element of LIST or MAP
	 [  "[" [AdditiveExpression() {jjtThis.indexSet=true;} ] "]" ]
  	
//  	{//  	if (!indexset){//  		if (varType==LIST_VAR)//	  		throw new ParseException(t,"variable ["+t.image+"] is a list and requires index to be specified");//	  	else if (varType==MAP_VAR)//	  		throw new ParseException(t,"variable ["+t.image+"] is a map and requires key to be specified");//  	}
//  	}
  	
	}catch(ParseException e){
		parseExceptions.add(e);
	}
	
}

void RegexLiteral() #void :
{
	Token t;
}
{
  t=<STRING_LITERAL> { jjtThis.setRegex(t.image); } #RegexLiteral
}


void SymbolNameExp() :
{
}
{
 (	
	 <INT_VAR>
 |  <LONG_VAR>
 |  <DATE_VAR>
 |  <DOUBLE_VAR>
 |  <DECIMAL_VAR>
 |  <BOOLEAN_VAR>
 |  <STRING_VAR>
 |  <BYTE_VAR>
 |  <LIST_VAR>
 |  <MAP_VAR>
 |  <RECORD_VAR>
	 |  <OBJECT_VAR>
	|<YEAR>
  	|<MONTH> 
  	|<WEEK>
  	|<DAY>
  	|<HOUR>
  	|<MINUTE>
  	|<SECOND>
  	|<MILLISEC> )
  	{
  	 	jjtThis.setType(getToken(0).kind);
  	 }
}


/*
 * Statement syntax follows.
 */

void Statement() #void :
{ Token t;}
{
	
	try{
		(
		  <SEMICOLON>
		/*|
		  LOOKAHEAD(2)
		  LabeledStatement() */
		|
		  Block()
		| 
		  IfStatement()
		|
		  SwitchStatement()
		|
		  WhileStatement()
		|
		  ForStatement()
		| 
		  ForeachStatement()
		|
		  DoStatement() 
		|
		   BreakStatement()
		|
		   ContinueStatement()
		|
		   ReturnStatement()
		| 
		  StatementExpression()
		  
		
		  )
	}catch (ParseException e) {
		parseExceptions.add(e);

// following code causes strange behaviour in case of certain bugs
// let's put some cap on interations
//	int i=0;
//    do {//      t = getNextToken();
//      i++;//    } while (t.kind != SEMICOLON || t.kind != EOF || i < 99);
  }
}

/*
* void LabeledStatement() #void :
* {}
*  {
*    <IDENTIFIER> ":" Statement()
*  }
*/

void Block() :
{}
{
  "{" ( Statement() )* "}"
}

void StatementExpression() #void :
{}
{
	
   (
 //	 IncrStatement()
 //  |LOOKAHEAD(<DECR>)DecrStatement()
 //  |
 	LOOKAHEAD(2) Assignment() 
 	| LOOKAHEAD(2)  IncrStatement() 
 	| LOOKAHEAD(2)  DecrStatement() 
   |FunctionCall() 
   ) ";"
}

void IncrStatement() #PlusPlusNode(1):
{}
{
	(  VarExp() <INCR> {jjtThis.setPrefix(false); }
	 /*|  <INCR> VarExp() {jjtThis.setPrefix(true); } */) { jjtThis.setStatementExpr(true); }
}

void DecrStatement() #MinusMinusNode(1):
{}
{
	( VarExp() <DECR> {jjtThis.setPrefix(false); }
	/* | <DECR> VarExp() {jjtThis.setPrefix(true); } */) { jjtThis.setStatementExpr(true); }
		 
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  <IF> "(" Expression() ")" Statement() [ LOOKAHEAD(2) <ELSE> Statement() ]
}

void SwitchStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  <SWITCH>  "(" Expression() ")"
  "{"
  	 CaseExpression()
     ( CaseExpression() )*
  	 [ LOOKAHEAD(1) <CASE_DEFAULT> ":" Statement() { jjtThis.setDefaultClause(true); } ] 
  "}"
}

void CaseExpression() :
{}
{
  <CASE> Expression() ":" Statement()
}


void WhileStatement() :
{}
{
  <WHILE> "(" Expression() ")" Statement()
}

void ForStatement() :
{}
{
  <FOR> "(" Expression() ";" Expression() ";" Expression() ")" Statement()
}

void ForeachStatement() :
{
	Token t;
}
{
	<FOR_EACH> "(" VarExp() ":" VarExp() ")" Statement()
}

void DoStatement() #DoStatement(2) :
{}
{
  <DO> Statement() <WHILE> "(" Expression() ")" 
}

void BreakStatement() :
{}
{
	<BREAK>
}

void ContinueStatement() :
{}
{
	<CONTINUE>
}

void ReturnStatement() : {}
{
    <RETURN> [LOOKAHEAD(2) Expression()]
	

//(  [ Expression() ] ) #EmptyExpression(jjtree.nodeArity()==0)
}

void FunctionCallStatement() :
{ Token t;
  CLVFFunctionDeclaration functionNode;
}
{
	 t=<IDENTIFIER> { 
	 	jjtThis.setName( t.image); 
	 	// is it already declared function ??
	 	if ((functionNode=(CLVFFunctionDeclaration)parserHelper.functionSymbol.get(t.image))!=null){
	 			 	jjtThis.setCallNode(functionNode);
	 	}else if (parserHelper.isExternalFunction(t.image)){
	 				jjtThis.setExternalFunction(parserHelper.getExternalFunction(t.image));
	 	}else{ 
	 		throw new ParseException(t,"function \""+t.image+"\" not declared");
	 	}
	 	}
	"(" [ FunctionCallParameter() ] ( "," FunctionCallParameter() )* ")"

	{
	 // verify number of call parameters
	 	if (!jjtThis.validateParams()){
	 		//System.err.println("wrong #arguments");
	  		throw new ParseException(t,"wrong number of parameters when calling \""+t.image+"\"");
	 	}
	}
}

void FunctionCallParameter() #void : {}
{
	ConditionalOrExpression()
}


/* !!!! INTERNAL FUNCTIONS && PROCEDURES START HERE !!!! */

void BuildInFunction() #void :
{ }
{
	DateAddNode()
	|DateDiffNode()
	|"isnull" "(" AdditiveExpression() ")" #IsNullNode(1)
	|"nvl" "(" AdditiveExpression() "," AdditiveExpression() ")" #NVLNode(2)
	|Str2NumNode()
	|"iif" "(" ConditionalOrExpression() "," AdditiveExpression() "," AdditiveExpression() ")" #IffNode(3) // (condition, express if true, express else)
	|"trunc" "(" AdditiveExpression() ")" #TruncNode(1)
	|Date2NumNode()
	|SequenceNode()
	|LookupNode()

// 	procedures 
	|PrintErrNode()
	|"print_stack" "(" ")" #PrintStackNode(0)
	|"breakpoint" "(" ")" #BreakpointNode(0)
	| PrintLogNode()
	|"raise_error" "(" AdditiveExpression() ")" #RaiseErrorNode(1)
}


void DateAddNode() :
{ Token t;}
{
	"dateadd" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtThis.setCalendarField(t.image); }
	")"
}

void DateDiffNode() :
{ Token t;}
{
	"datediff" "(" AdditiveExpression() "," AdditiveExpression() "," 
			t=<DATE_FIELD_LITERAL> { jjtThis.setCalendarField(t.image); }
	")"
}


void Date2NumNode() :
{ Token t; }
{
	"date2num" "(" AdditiveExpression() "," t=<DATE_FIELD_LITERAL> { jjtThis.setCalendarField(t.image); } ")" 
}

void Str2NumNode() :
{ 
	Token t;
}
{
	"str2num" "(" AdditiveExpression() 
	
	[ ","  
	 (<INT_VAR>{
      jjtThis.setType(INT_VAR);
    }
    | <LONG_VAR>{
      jjtThis.setType(LONG_VAR);
    }
    | <DOUBLE_VAR>{
      jjtThis.setType(DOUBLE_VAR);
    }
    | <DECIMAL_VAR>{
      jjtThis.setType(DECIMAL_VAR);
    }
    )
    [ "," t=<INTEGER_LITERAL> {jjtThis.setRadix(t.image);}]
    ] 
    
    ")"
}


void PrintErrNode() :
{ Token t;}
{
	"print_err" "(" AdditiveExpression() [ "," t=<BOOLEAN_LITERAL> {jjtThis.setPrintLine(Boolean.parseBoolean(t.image));} ] ")" 
}

void PrintLogNode() : 
{
	Token t;
}
{
	"print_log" "("
	
	(
	 "trace" { jjtThis.setLevel(0); }
	| "debug" { jjtThis.setLevel(1); }
	| "info" { jjtThis.setLevel(2); }
	| "warn" { jjtThis.setLevel(3); }
	| "error" { jjtThis.setLevel(4); }
	| "fatal" { jjtThis.setLevel(5); }
	)
	
	","
	AdditiveExpression()
	")"
}

void SequenceNode() :
{
	Token t;
}
{
	"sequence" "(" 
	t=<IDENTIFIER> { jjtThis.setName(t.image); } 
	[ ","
	(  <INT_VAR> { jjtThis.setReturnType(INT_VAR); }
	| <LONG_VAR> {  jjtThis.setReturnType(LONG_VAR); }
	| <STRING_VAR> { jjtThis.setReturnType(STRING_VAR); }
	) ]
	")"
	[ 
		".next" 	{ jjtThis.setOperation(0); }
	  | ".current" { jjtThis.setOperation(1); }
	  | ".reset" { jjtThis.setOperation(2); }
	]  
}

void LookupNode() :
{
	Token t,k;
}
{
	(
	(
	"lookup" "("
		t=<IDENTIFIER> { jjtThis.setOperation(0); jjtThis.setLookupName(t.image); }// LOOKUP NAME/ID
		"," AdditiveExpression() //KEYS GO HERE
		("," AdditiveExpression())*
		")"
		"." k=<IDENTIFIER> { jjtThis.setLookupField(k.image); }  // WHICH FIELD 
		) 
	
	|("lookup_next"	"("
		t=<IDENTIFIER> { jjtThis.setOperation(1); jjtThis.setLookupName(t.image); }
		")" "." k=<IDENTIFIER> { jjtThis.setLookupField(k.image); } 
		) 
	|(// how many records we have found
		"lookup_found" "("
		t=<IDENTIFIER> { jjtThis.setOperation(2); jjtThis.setLookupName(t.image); }
		")"
		) 
	|(// do something with lookup
		"lookup_admin" "("
		t=<IDENTIFIER> { jjtThis.setLookupName(t.image); } ","
		(
			( "init" 	{jjtThis.setOperation(3);} )
			|( "free" 	{jjtThis.setOperation(4);} )
		)
		")"
		)
	)
}

TOKEN : { <DATE_FIELD_LITERAL : "year" |"month" | "week" | "day" | "hour" | "minute" | "sec" | "second" | "millisec" | "millisecond" > }


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
}

/* error token which is generated by lexer if it can't match with any other */
TOKEN:
{
   <ERROR: ~[] >
}
