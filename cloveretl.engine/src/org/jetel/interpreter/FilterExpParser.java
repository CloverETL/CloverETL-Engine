/* Generated By:JJTree&JavaCC: Do not edit this line. FilterExpParser.java */
package org.jetel.interpreter;

import org.jetel.data.DataRecord;

public class FilterExpParser/*@bgen(jjtree)*/implements FilterExpParserTreeConstants, FilterExpParserConstants {/*@bgen(jjtree)*/
  protected JJTFilterExpParserState jjtree = new JJTFilterExpParserState();
       DataRecord dataRecord;

       public FilterExpParser(DataRecord record,java.io.InputStream stream){
              this(stream);
              dataRecord=record;
      }

      public DataRecord getDataRecord(){
             return dataRecord;
      }

/* The start nonterminal and its productions. */
  final public CLVFStart Start() throws ParseException {
                     /*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CompilationUnit();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void CompilationUnit() throws ParseException {
    Statement();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(43);
      Statement();
    }
  }

  final public void Statement() throws ParseException {
    ConditionalOrExpression();
  }

/* Other nonterminals and their productions */
  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NON_EQUAL:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        RelationalExpression();
                                      CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                      jjtc001 = false;
                                      jjtn001.cmpType=EQUAL;
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
        }
        break;
      case NON_EQUAL:
        jj_consume_token(NON_EQUAL);
        RelationalExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtn002.cmpType=NON_EQUAL;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
      case LESS_THAN_EQUAL:
      case GREATER_THAN:
      case GREATER_THAN_EQUAL:
      case REGEX_EQUAL:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        AdditiveExpression();
                                       CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
        try {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                       jjtn001.cmpType=LESS_THAN;
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
        }
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        AdditiveExpression();
                                          CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
        try {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                          jjtn002.cmpType=GREATER_THAN;
        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
        }
        break;
      case LESS_THAN_EQUAL:
        jj_consume_token(LESS_THAN_EQUAL);
        AdditiveExpression();
                                             CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
        try {
                                             jjtree.closeNodeScope(jjtn003,  2);
                                             jjtc003 = false;
                                             jjtn003.cmpType=LESS_THAN_EQUAL;
        } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  2);
                                             }
        }
        break;
      case GREATER_THAN_EQUAL:
        jj_consume_token(GREATER_THAN_EQUAL);
        AdditiveExpression();
                                                CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
        try {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                                jjtc004 = false;
                                                jjtn004.cmpType=GREATER_THAN_EQUAL;
        } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004,  2);
                                                }
        }
        break;
      case REGEX_EQUAL:
        jj_consume_token(REGEX_EQUAL);
        RegexLiteral();
                                        CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                        boolean jjtc005 = true;
                                        jjtree.openNodeScope(jjtn005);
        try {
                                        jjtree.closeNodeScope(jjtn005,  2);
                                        jjtc005 = false;
                                        jjtn005.cmpType=REGEX_EQUAL;
        } finally {
                                        if (jjtc005) {
                                          jjtree.closeNodeScope(jjtn005,  2);
                                        }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case PLUS:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
              CLVFAddNode jjtn001 = new CLVFAddNode(this, JJTADDNODE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
               CLVFSubNode jjtn002 = new CLVFSubNode(this, JJTSUBNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case MODULO:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                 CLVFMulNode jjtn001 = new CLVFMulNode(this, JJTMULNODE);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
               CLVFDivNode jjtn002 = new CLVFDivNode(this, JJTDIVNODE);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
        }
        break;
      case MODULO:
        jj_consume_token(MODULO);
               CLVFModNode jjtn003 = new CLVFModNode(this, JJTMODNODE);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
               }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case DATETIME_LITERAL:
    case FIELD_ID:
    case OPEN_PAR:
    case 44:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      PrimaryExpression();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(MINUS);
                              CLVFMinusNode jjtn001 = new CLVFMinusNode(this, JJTMINUSNODE);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          PrimaryExpression();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                              }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
                   CLVFNegation jjtn002 = new CLVFNegation(this, JJTNEGATION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
          try {
            UnaryExpression();
          } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
          } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  1);
                   }
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case DATE_LITERAL:
    case DATETIME_LITERAL:
      LitExp();
      break;
    case 44:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
      BuildInFunction();
      break;
    case FIELD_ID:
      IDExp();
      break;
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      Statement();
      jj_consume_token(CLOSE_PAR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BuildInFunction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
                                                                                                 CLVFSubStrNode jjtn001 = new CLVFSubStrNode(this, JJTSUBSTRNODE);
                                                                                                 boolean jjtc001 = true;
                                                                                                 jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                                                 if (jjtc001) {
                                                                                                   jjtree.closeNodeScope(jjtn001,  3);
                                                                                                 }
      }
      break;
    case 46:
      jj_consume_token(46);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                                CLVFUppercaseNode jjtn002 = new CLVFUppercaseNode(this, JJTUPPERCASENODE);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  1);
                                                }
      }
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                                CLVFLowercaseNode jjtn003 = new CLVFLowercaseNode(this, JJTLOWERCASENODE);
                                                boolean jjtc003 = true;
                                                jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                if (jjtc003) {
                                                  jjtree.closeNodeScope(jjtn003,  1);
                                                }
      }
      break;
    case 48:
      jj_consume_token(48);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                           CLVFTrimNode jjtn004 = new CLVFTrimNode(this, JJTTRIMNODE);
                                           boolean jjtc004 = true;
                                           jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                           if (jjtc004) {
                                             jjtree.closeNodeScope(jjtn004,  1);
                                           }
      }
      break;
    case 49:
      jj_consume_token(49);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                             CLVFLengthNode jjtn005 = new CLVFLengthNode(this, JJTLENGTHNODE);
                                             boolean jjtc005 = true;
                                             jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                             if (jjtc005) {
                                               jjtree.closeNodeScope(jjtn005,  1);
                                             }
      }
      break;
    case 58:
      ConcatNode();
      break;
    case 59:
      DateAddNode();
      break;
    case 60:
      DateDiffNode();
      break;
    case 50:
      jj_consume_token(50);
      jj_consume_token(OPEN_PAR);
                       CLVFTodayNode jjtn006 = new CLVFTodayNode(this, JJTTODAYNODE);
                       boolean jjtc006 = true;
                       jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                       if (jjtc006) {
                         jjtree.closeNodeScope(jjtn006,  0);
                       }
      }
      break;
    case 51:
      jj_consume_token(51);
      jj_consume_token(OPEN_PAR);
      IDExp();
                                CLVFIsNullNode jjtn007 = new CLVFIsNullNode(this, JJTISNULLNODE);
                                boolean jjtc007 = true;
                                jjtree.openNodeScope(jjtn007);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                if (jjtc007) {
                                  jjtree.closeNodeScope(jjtn007,  1);
                                }
      }
      break;
    case 52:
      jj_consume_token(52);
      jj_consume_token(OPEN_PAR);
      IDExp();
      jj_consume_token(45);
      AdditiveExpression();
                                                      CLVFNVLNode jjtn008 = new CLVFNVLNode(this, JJTNVLNODE);
                                                      boolean jjtc008 = true;
                                                      jjtree.openNodeScope(jjtn008);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                      if (jjtc008) {
                                                        jjtree.closeNodeScope(jjtn008,  2);
                                                      }
      }
      break;
    case 53:
      jj_consume_token(53);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
                                                                                                CLVFReplaceNode jjtn009 = new CLVFReplaceNode(this, JJTREPLACENODE);
                                                                                                boolean jjtc009 = true;
                                                                                                jjtree.openNodeScope(jjtn009);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                                                if (jjtc009) {
                                                                                                  jjtree.closeNodeScope(jjtn009,  3);
                                                                                                }
      }
      break;
    case 54:
      jj_consume_token(54);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                              CLVFStr2NumNode jjtn010 = new CLVFStr2NumNode(this, JJTSTR2NUMNODE);
                                              boolean jjtc010 = true;
                                              jjtree.openNodeScope(jjtn010);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                              if (jjtc010) {
                                                jjtree.closeNodeScope(jjtn010,  1);
                                              }
      }
      break;
    case 55:
      jj_consume_token(55);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                              CLVFNum2StrNode jjtn011 = new CLVFNum2StrNode(this, JJTNUM2STRNODE);
                                              boolean jjtc011 = true;
                                              jjtree.openNodeScope(jjtn011);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                              if (jjtc011) {
                                                jjtree.closeNodeScope(jjtn011,  1);
                                              }
      }
      break;
    case 56:
      jj_consume_token(56);
      jj_consume_token(OPEN_PAR);
      ConditionalOrExpression();
      jj_consume_token(45);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
                                                                                                 CLVFIffNode jjtn012 = new CLVFIffNode(this, JJTIFFNODE);
                                                                                                 boolean jjtc012 = true;
                                                                                                 jjtree.openNodeScope(jjtn012);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                                                                 if (jjtc012) {
                                                                                                   jjtree.closeNodeScope(jjtn012,  3);
                                                                                                 }
      }
      break;
    case 57:
      jj_consume_token(57);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
                                                CLVFPrintErrNode jjtn013 = new CLVFPrintErrNode(this, JJTPRINTERRNODE);
                                                boolean jjtc013 = true;
                                                jjtree.openNodeScope(jjtn013);
      try {
        jj_consume_token(CLOSE_PAR);
      } finally {
                                                if (jjtc013) {
                                                  jjtree.closeNodeScope(jjtn013,  1);
                                                }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LitExp() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.setVal(FLOATING_POINT_LITERAL,t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
          CLVFLiteral jjtn002 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
          jjtree.closeNodeScope(jjtn002, true);
          jjtc002 = false;
          jjtn002.setVal(INTEGER_LITERAL,t.image);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
          CLVFLiteral jjtn003 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
          jjtree.closeNodeScope(jjtn003, true);
          jjtc003 = false;
          jjtn003.setVal(STRING_LITERAL,t.image.substring(1,t.image.length()-1));
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
      break;
    case DATE_LITERAL:
      t = jj_consume_token(DATE_LITERAL);
          CLVFLiteral jjtn004 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
          jjtree.closeNodeScope(jjtn004, true);
          jjtc004 = false;
          jjtn004.setVal(DATE_LITERAL,t.image);
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
      }
      break;
    case DATETIME_LITERAL:
      t = jj_consume_token(DATETIME_LITERAL);
          CLVFLiteral jjtn005 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
          jjtree.closeNodeScope(jjtn005, true);
          jjtc005 = false;
          jjtn005.setVal(DATETIME_LITERAL,t.image);
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IDExp() throws ParseException {
        Token t;
    t = jj_consume_token(FIELD_ID);
                 CLVFJetelFieldLiteral jjtn001 = new CLVFJetelFieldLiteral(this, JJTJETELFIELDLITERAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
    try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                 jjtn001.setFieldName(t.image);
    } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
    }
  }

  final public void RegexLiteral() throws ParseException {
        Token t;
    t = jj_consume_token(STRING_LITERAL);
                       CLVFRegexLiteral jjtn001 = new CLVFRegexLiteral(this, JJTREGEXLITERAL);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
    try {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.setRegex(t.image);
    } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
    }
  }

  final public void ConcatNode() throws ParseException {
 /*@bgen(jjtree) ConcatNode */
  CLVFConcatNode jjtn000 = new CLVFConcatNode(this, JJTCONCATNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
      label_8:
      while (true) {
        jj_consume_token(45);
        AdditiveExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void DateAddNode() throws ParseException {
 /*@bgen(jjtree) DateAddNode */
  CLVFDateAddNode jjtn000 = new CLVFDateAddNode(this, JJTDATEADDNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(59);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
      jj_consume_token(45);
      t = jj_consume_token(DATE_FIELD_LITERAL);
                                                 jjtn000.setCalendarField(t.image);
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DateDiffNode() throws ParseException {
 /*@bgen(jjtree) DateDiffNode */
  CLVFDateDiffNode jjtn000 = new CLVFDateDiffNode(this, JJTDATEDIFFNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(60);
      jj_consume_token(OPEN_PAR);
      AdditiveExpression();
      jj_consume_token(45);
      AdditiveExpression();
      jj_consume_token(45);
      t = jj_consume_token(DATE_FIELD_LITERAL);
                                                 jjtn000.setCalendarField(t.image);
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(FIELD_ID)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(DATETIME_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(56)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(53)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(52)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(50)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(48)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    return false;
  }

  public FilterExpParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x1000,0x2000,0x18000000,0x18000000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x0,0x6508000,0x4000,0x6508000,0x0,0x6508000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x800,0x0,0x0,0x0,0x0,0x3,0x3,0x18,0x18,0xe0,0xe0,0x1fffd300,0x0,0x1fffd300,0x1fffd000,0x0,0x2000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FilterExpParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public FilterExpParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FilterExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FilterExpParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FilterExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FilterExpParser(FilterExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FilterExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[63];
    for (int i = 0; i < 63; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
