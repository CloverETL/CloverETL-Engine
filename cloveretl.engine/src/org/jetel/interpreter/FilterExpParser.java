/* Generated By:JJTree&JavaCC: Do not edit this line. FilterExpParser.java */
package org.jetel.interpreter;

import org.jetel.data.DataRecord;

public class FilterExpParser/*@bgen(jjtree)*/implements FilterExpParserTreeConstants, FilterExpParserConstants {/*@bgen(jjtree)*/
  protected JJTFilterExpParserState jjtree = new JJTFilterExpParserState();
       DataRecord dataRecord;
       Stack stack;

       public FilterExpParser(DataRecord record,java.io.InputStream stream){
              this(stream);
              dataRecord=record;
              stack=new Stack();

      }

      public Stack getStack(){
         return stack;
      }

      public DataRecord getDataRecord(){
             return dataRecord;
      }

/* *** Context-free grammar (EBNF) *** */

/* Each nonterminal is written like a kind of method, containing all its
   productions. JavaC will generate a parsing method for each nonterminal.

   Note: In the start nonterminal, the action "return jjtThis;" instructs
   JavaCC to return the resulting parse tree from the generated parsing
   method. Therefore the start nonterminal has a result type (SimpleNode).
   All other nonterminals have no result type (void).
*/

/* The start nonterminal and its productions. */
  final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  CLVFStart jjtn000 = new CLVFStart(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LExpression();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* Other nonterminals and their productions */
  final public void LExpression() throws ParseException {
    LPrimaryExpression();
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(OR);
            CLVFOr jjtn001 = new CLVFOr(this, JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        LPrimaryExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
  }

  final public void LPrimaryExpression() throws ParseException {
    Condition();
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(AND);
             CLVFAnd jjtn001 = new CLVFAnd(this, JJTAND);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        Condition();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
      }
    }
  }

  final public void Condition() throws ParseException {
    if (jj_2_3(2)) {
      jj_consume_token(NOT);
             CLVFNegation jjtn001 = new CLVFNegation(this, JJTNEGATION);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        PrimaryCondition();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
      }
    } else if (jj_2_4(2)) {
      PrimaryCondition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimaryCondition() throws ParseException {
    if (jj_2_5(2)) {
      IDExp();
      jj_consume_token(EQUAL);
      Literal();
                               CLVFComparison jjtn001 = new CLVFComparison(this, JJTCOMPARISON);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001,  2);
                               jjtc001 = false;
                               jjtn001.cmpType=EQUAL;
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  2);
                               }
      }
    } else if (jj_2_6(2)) {
      IDExp();
      jj_consume_token(NON_EQUAL);
      Literal();
                                   CLVFComparison jjtn002 = new CLVFComparison(this, JJTCOMPARISON);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
      try {
                                   jjtree.closeNodeScope(jjtn002,  2);
                                   jjtc002 = false;
                                   jjtn002.cmpType=NON_EQUAL;
      } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  2);
                                   }
      }
    } else if (jj_2_7(2)) {
      IDExp();
      jj_consume_token(LESS_THAN);
      Literal();
                                   CLVFComparison jjtn003 = new CLVFComparison(this, JJTCOMPARISON);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
      try {
                                   jjtree.closeNodeScope(jjtn003,  2);
                                   jjtc003 = false;
                                   jjtn003.cmpType=LESS_THAN;
      } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
      }
    } else if (jj_2_8(2)) {
      IDExp();
      jj_consume_token(GREATER_THAN);
      Literal();
                                      CLVFComparison jjtn004 = new CLVFComparison(this, JJTCOMPARISON);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
      try {
                                      jjtree.closeNodeScope(jjtn004,  2);
                                      jjtc004 = false;
                                      jjtn004.cmpType=GREATER_THAN;
      } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004,  2);
                                      }
      }
    } else if (jj_2_9(2)) {
      IDExp();
      jj_consume_token(LESS_THAN_EQUAL);
      Literal();
                                         CLVFComparison jjtn005 = new CLVFComparison(this, JJTCOMPARISON);
                                         boolean jjtc005 = true;
                                         jjtree.openNodeScope(jjtn005);
      try {
                                         jjtree.closeNodeScope(jjtn005,  2);
                                         jjtc005 = false;
                                         jjtn005.cmpType=LESS_THAN_EQUAL;
      } finally {
                                         if (jjtc005) {
                                           jjtree.closeNodeScope(jjtn005,  2);
                                         }
      }
    } else if (jj_2_10(2)) {
      IDExp();
      jj_consume_token(GREATER_THAN_EQUAL);
      Literal();
                                            CLVFComparison jjtn006 = new CLVFComparison(this, JJTCOMPARISON);
                                            boolean jjtc006 = true;
                                            jjtree.openNodeScope(jjtn006);
      try {
                                            jjtree.closeNodeScope(jjtn006,  2);
                                            jjtc006 = false;
                                            jjtn006.cmpType=GREATER_THAN_EQUAL;
      } finally {
                                            if (jjtc006) {
                                              jjtree.closeNodeScope(jjtn006,  2);
                                            }
      }
    } else if (jj_2_11(2)) {
      IDExp();
      jj_consume_token(REGEX_EQUAL);
      RegexLiteral();
                                          CLVFComparison jjtn007 = new CLVFComparison(this, JJTCOMPARISON);
                                          boolean jjtc007 = true;
                                          jjtree.openNodeScope(jjtn007);
      try {
                                          jjtree.closeNodeScope(jjtn007,  2);
                                          jjtc007 = false;
                                          jjtn007.cmpType=REGEX_EQUAL;
      } finally {
                                          if (jjtc007) {
                                            jjtree.closeNodeScope(jjtn007,  2);
                                          }
      }
    } else if (jj_2_12(2)) {
      jj_consume_token(OPEN_PAR);
      LExpression();
      jj_consume_token(CLOSE_PAR);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    if (jj_2_13(2)) {
      SLitExp();
    } else if (jj_2_14(2)) {
      FPLitExp();
    } else if (jj_2_15(2)) {
      IntLitExp();
    } else if (jj_2_16(2)) {
      IDExp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Negation() throws ParseException {
                   /*@bgen(jjtree) Negation */
  CLVFNegation jjtn000 = new CLVFNegation(this, JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FPLitExp() throws ParseException {
        Token t;
    if (jj_2_17(2)) {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.setVal(t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_18(2)) {
       CLVFFloatArray jjtn002 = new CLVFFloatArray(this, JJTFLOATARRAY);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(FLOATING_POINT_ARRAY);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
       }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IntLitExp() throws ParseException {
        Token t;
    if (jj_2_19(2)) {
      t = jj_consume_token(INTEGER_LITERAL);
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.setVal(t.image);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_20(2)) {
       CLVFIntegerArray jjtn002 = new CLVFIntegerArray(this, JJTINTEGERARRAY);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(INTEGER_ARRAY);
      } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
       }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SLitExp() throws ParseException {
  Token t;
    if (jj_2_21(2)) {
      t = jj_consume_token(STRING_LITERAL);
          CLVFLiteral jjtn001 = new CLVFLiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.setVal(t.image.substring(1,t.image.length()-1));
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_22(2)) {
      CLVFStringArray jjtn002 = new CLVFStringArray(this, JJTSTRINGARRAY);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(STRING_ARRAY);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IDExp() throws ParseException {
        Token t;
    t = jj_consume_token(FIELD_ID);
                 CLVFJetelFieldLiteral jjtn001 = new CLVFJetelFieldLiteral(this, JJTJETELFIELDLITERAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
    try {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
                 jjtn001.setFieldName(t.image);
    } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
    }
  }

  final public void RegexLiteral() throws ParseException {
        Token t;
    t = jj_consume_token(STRING_LITERAL);
                       CLVFRegexLiteral jjtn001 = new CLVFRegexLiteral(this, JJTREGEXLITERAL);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
    try {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.setRegex(t.image);
    } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(FLOATING_POINT_ARRAY)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(FIELD_ID)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(STRING_ARRAY)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(REGEX_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(GREATER_THAN_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(LESS_THAN_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(LESS_THAN)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(NON_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(INTEGER_ARRAY)) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  public FilterExpParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public FilterExpParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FilterExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FilterExpParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FilterExpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FilterExpParser(FilterExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FilterExpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[31];
    for (int i = 0; i < 31; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
