/* Generated By:JJTree: Do not edit this line. CLVFFunctionCallStatement.java */

package org.jetel.interpreter.ASTnode;

import org.jetel.interpreter.ExpParser;
import org.jetel.interpreter.TransformLangParserVisitor;
import org.jetel.interpreter.data.TLContext;
import org.jetel.interpreter.extensions.TLFunctionPrototype;

 

public class CLVFFunctionCallStatement extends SimpleNode {
  
    public  String name;
    public CLVFFunctionDeclaration callNode;
    public TLFunctionPrototype externalFunction;
    public TLContext context;
    
  public CLVFFunctionCallStatement(int id) {
    super(id);
  }

  public CLVFFunctionCallStatement(ExpParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(TransformLangParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  public void setName(String name){
      this.name=name;
  }
  
  public void setCallNode(CLVFFunctionDeclaration callNode){
      this.callNode=callNode;
  }
  
  public void setExternalFunction(TLFunctionPrototype function) {
      this.externalFunction=function;
  }
  
  @Override public void init() {
      super.init();
      this.context=externalFunction.createContext();
  }
  
  @Override public String toString() {
      return super.toString()+" name \""+name+"\" min #params: "+requiredNumParams();
  }
  
  public final int requiredNumParams() {
      if (externalFunction!=null)
          return externalFunction.getParameterTypes().length;
      else if (callNode!=null)
          return callNode.numParams;
      else
          return -1;
  }
  
  public final boolean validateParams() {
      if (externalFunction!=null) 
          return jjtGetNumChildren()>=externalFunction.getParameterTypes().length;
      else
          return jjtGetNumChildren()==callNode.numParams;
  }
}
