<?xml version="1.0" encoding="us-ascii"?>
<project name="cloveretl.engine" default="build" basedir=".">
	
	<property name="dir.tools" value="${basedir}/tools"/>		
	<property name="dir.findbugs" value="/opt/findbugs"/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${dir.tools}/ant-contrib.jar"/>
	  </classpath>
	</taskdef>
	    	
	<!-- =========================== VERSIONs =========================== -->
	<property name="major_version" value="2"/>
	<property name="minor_version" value="4"/>
	<property name="revision_version" value="4"/>
	<buildnumber file="build.number" />
	<tstamp>
		<format property="TODAY" pattern="dd/MM/yyyy HH:mm:ss" locale="en" />
	</tstamp>
	
	<!-- =========================== DEFAULT DIRECTORIES =========================== -->
	<property name="dir.bin.default" value="${basedir}/bin"/>
	<property name="dir.doc.default" value="${basedir}/javadoc"/>
	<property name="dir.component.doc.default" value="${basedir}/src-doc"/>
	<property name="dir.dist.default" value="${basedir}/build"/>
	<property name="dir.distribution" value="${basedir}/dist"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.docs" value="${basedir}/docs"/>
	<property name="dir.build-scripts" value="${basedir}/build-scripts"/>
	<property name="dir.src" value="src"/>
	<property name="dir.src.test" value="${basedir}/test"/>
	<property name="dir.src.tmp" value="src_tmp"/>
	<property name="dir.examples" value="examples"/>
	<property name="dir.tmp" value="__tmp"/>
	<property name="dir.build" value="${basedir}/build"/>
	<property name="dir.testsresult" value="${dir.build}/testsresult"/>
	<property name="dir.testsreport" value="${dir.build}/testsreport"/>
	<property name="dir.findbugsreport" value="${dir.build}/findbugsreport"/>
	<property name="dir.classestest" value="${dir.build}/classes-test"/>

	<!--load external properties-->
	<property file="build.properties"/>
		
	<!-- =========================== LIBRARIES ============================= -->
	<fileset id="engine-libs" dir="${dir.lib}">
		<include name="**/*.jar"/>
		<include name="**/*.zip"/>
	</fileset>

	<filterset id="versionFilter">
		<filter token="MAJOR_VERSION" value="${major_version}" />
		<filter token="MINOR_VERSION" value="${minor_version}" />
		<filter token="REVISION_VERSION" value="${revision_version}" />
		<filter token="BUILD_NUMBER" value="${build.number}" />
		<filter token="BUILD_TIME" value="${TODAY}" />
	</filterset>
		
		<!-- =========================== TARGETS ============================== -->
	<target name="build" depends="compile,package" description="Compiles sources and creates a JAR file">
		<foreach list="${plugin.list}" inheritall="true" target="plugin.build" param="plugin.dir"/>
	</target>

	<target name="plugin.build" description="Private target for building usage. Don't call direct.">
		<echo message="Building plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" inheritAll="false">
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="major_version" value="${major_version}"/>
			<property name="minor_version" value="${minor_version}"/>
			<property name="revision_version" value="${revision_version}"/>
		</ant>
	</target>

	<target name="dist.src" description="Creates source distribution">
		<delete dir="${dir.tmp}"/>
		<mkdir dir="${dir.tmp}/cloverETL"/>
		
		<!-- call source target for all plugins -->
		<foreach list="${plugin.list}" inheritall="true" target="plugin.src" param="plugin.dir"/>

		<!-- copy source for engine itself -->
		<property name="src.distribution.dir.engine" value="${dir.tmp}/cloverETL/cloveretl.engine"/>

		<copy todir="${src.distribution.dir.engine}/src">
			<fileset dir="${dir.src}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/docs">
			<fileset dir="${dir.docs}" />
		</copy>
		
		<copy todir="${src.distribution.dir.engine}/lib">
			<fileset dir="${dir.lib}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/plugins">
			<fileset dir="plugins" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/test">
			<fileset dir="test" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/data">
			<fileset dir="data" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/scripts">
			<fileset dir="scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}">
			<fileset file="ant-contrib.jar" />
			<fileset file="build.xml" />
			<fileset file="build.properties" />
			<fileset file="plugin.xml" />
			<fileset file="readme.src.txt" />
			<fileset file="readme.bin.txt" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/..">
			<fileset file="readme.src.txt" />
			<filterset refid="versionFilter"/>
		</copy>
		<move file="${src.distribution.dir.engine}/../readme.src.txt" tofile="${src.distribution.dir.engine}/../readme.txt"/>
		
		<!-- create zip package for source distribution -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL.src.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>

	<target name="plugin.src" description="Private target for copy source of plugin. Don't call direct.">
		<echo message="Copy source from plugin - ${plugin.dir}"/>
		<ant dir="${plugin.dir}" target="dist.src" inheritAll="false">
			<property name="dist.src" value="${basedir}/${dir.tmp}/cloverETL"/>
		</ant>
	</target>

	<target name="dist.bin" depends="build" description="Creates binary distribution">
		<delete dir="${dir.tmp}"/>
		
		<!-- binary distribution -->
		<mkdir dir="${dir.tmp}/cloverETL"/>

		<copy todir="${dir.tmp}/cloverETL">
			<fileset dir="${dir.dist}" />
		</copy>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>

	<target name="dist.examples" description="Creates examples distribution">
		<delete dir="${dir.tmp}"/>
		
		<!-- binary distribution -->
		<mkdir dir="${dir.tmp}/examples"/>

		<copy todir="${dir.tmp}/examples">
			<fileset dir="${dir.examples}" />
		</copy>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverExamples.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>


	<!-- The "clean" target deletes previously compiled files. -->
	<target name="clean" depends="checkproperties" description="Delete old compiled files">
		<delete dir="${dir.bin}"/>
		<delete dir="${dir.dist}"/>
		<delete dir="${dir.distribution}"/>
		<delete dir="${dir.doc}"/>
		<delete dir="${dir.tmp}"/>
	</target>

	<!-- Target sets directory-properties unless they have been defined (in parent ant build) -->
	<target name="checkproperties" description="Sets properties unless they have been defined in parent ant build">
		<condition property="dir.bin" value="${dir.bin.default}">
			<not>
				<isset property="dir.bin"/>
			</not>
		</condition>
		
		<condition property="dir.doc" value="${dir.doc.default}">
			<not>
				<isset property="dir.doc"/>
			</not>
		</condition>
		
		<condition property="dir.dist" value="${dir.dist.default}">
			<not>
				<isset property="dir.dist"/>
			</not>
		</condition>

		<echo message="Using directory for classes: ${dir.bin}"/> 
		<echo message="Using directory for javadoc: ${dir.doc}"/>
		<echo message="Using directory for dist: ${dir.dist}"/>
	</target>
	
	<!-- compile temp copy of source -->
	<target name="compile" depends="checkproperties,copy_src" description="Compile sources">
		<!-- Create directory for binaries. -->
		<mkdir dir="${dir.bin}"/>
		
		<!-- Compile sources -->
		<javac debug="true" destdir="${dir.bin}" target="1.5" source="1.5">
			<classpath>
				<pathelement path="${tools}"/>
				<!--pathelement path="${commons-logging}"/>
				<pathelement path="${log4j}"/-->
				<fileset refid="engine-libs"/>			
			</classpath>
			<src path="${dir.src.tmp}"/>
			<exclude name="test/**/*"/>
		</javac>
		
		<!-- copy resources -->
		<copy todir="${dir.bin}">
		    <fileset dir="${dir.src}">
			      <exclude name="**/*.java"/>
			      <exclude name="**/svn/**"/>
		    </fileset>
		  </copy>
		
		<!-- delete source temp directory -->
		<delete dir="${dir.src.tmp}"/>
	</target>

	<!-- pack binary result of compile to jar file -->
	<target name="package" depends="compile">
		<!-- Create directory for dist. -->
		<mkdir dir="${dir.dist}/lib"/>
		
		<jar destfile="${dir.dist}/lib/cloveretl.engine.jar" basedir="${dir.bin}">
			<include name="**/*"/>
			<exclude name="test/**/*"/>
		</jar>
		
		<!-- copy all libraries from lib directory -->
		<copy todir="${dir.dist}/lib">
			<fileset dir="${dir.lib}"/>
		</copy>

		<!-- copy engine's plugin.xml to the plugins directory -->
		<copy todir="${dir.dist}/plugins/org.jetel.engine">
			<fileset file="plugin.xml"/>
		</copy>

		<!-- copy all documents from docs directory -->
		<copy todir="${dir.dist}/docs">
			<fileset dir="${dir.docs}"/>
		</copy>

		<!-- copy the generated documentation of components from other plugins -->
		<!-- Commented out until the component documentation has correct content
		<copy todir="${dir.dist}/docs/components" overwrite="true">
			<fileset dir="${cloveretl.engine}/src-doc/components/html" includes="**"/>
		</copy>
		-->

		<!-- copy all run scripts -->
		<copy todir="${dir.dist}/bin">
			<fileset file="${basedir}/scripts/*"/>
		</copy>

		<!-- copy readme.txt -->
		<copy todir="${dir.dist}">
			<fileset file="${basedir}/readme.bin.txt"/>
			<filterset refid="versionFilter"/>
		</copy>
		<move file="${dir.dist}/readme.bin.txt" tofile="${dir.dist}/readme.txt"/>
		
	</target>
	
	<!-- make a temp copy of source - necessary to substitute release number constants in the source code -->
	<target name="copy_src">
		<echo message="Copying source code.." />
		<copy todir="${dir.src.tmp}">
			<fileset dir="${dir.src}" />
			<filterset refid="versionFilter"/>
		</copy>
	</target>
	
	<!-- The "javadoc" target generates JavaDoc documentation. -->
	<!--target name="javadoc" depends="checkproperties" description="Create Javadoc API documentation">
        <javadoc destdir="${dir.doc}" access="public" use="true"
        	notree="false" nonavbar="false" noindex="false" splitindex="true"
        	author="true" version="true" nodeprecatedlist="false"
        	nodeprecated="false" packagenames="org.jetel.*"
        	sourcepath="${dir.src}">
        	<sourcepath path="../cloveretl.connection/src"/>
			<doctitle><![CDATA[<h1>CloverETL: Java ETL framework </h1>]]></doctitle>
			<bottom>
				<![CDATA[Copyright &#169; 2002-2005 Opentech s.r.o]]>
			</bottom>
		</javadoc>
	</target-->

	<target name="javadoc" depends="checkproperties" description="Create Javadoc API documentation">
		<echo message="Building code documentation..." />
		<property name="dist.subdir" value="cloverETL/javadoc"/>
		<mkdir dir="${dir.doc}/${dist.subdir}" />
		<javadoc destdir="${dir.doc}/${dist.subdir}" packagenames="*"
			author="true">
			<sourcepath path="${dir.src}"/>
			<sourcepath path="../cloveretl.component/src"/>
			<sourcepath path="../cloveretl.connection/src"/>
			<sourcepath path="../cloveretl.sequence/src"/>
			<sourcepath path="../cloveretl.lookup/src"/>
			<sourcepath path="../cloveretl.thirdparty/src"/>
			<sourcepath path="../cloveretl.bulkloader/src"/>
			<sourcepath path="../cloveretl.tlfunction/src"/>
			<doclet name="com.sun.tools.doclets.standard.Standard">
				<param name="-breakiterator" value="on" />
				<!-- Following tag definition is here to get rid of complains produced by standard doclet-->
				<param name="-tag" value="revision" />
			</doclet>
			<doctitle><![CDATA[<h1>CloverETL: Java ETL framework</h1><h3>version: ]]>${major_version}.${minor_version}<![CDATA[</h3>]]></doctitle>
			<bottom>
				<![CDATA[<address>Copyright &#169; 2002-2006 Javlin consulting s.r.o</address>]]>
			</bottom>
		</javadoc>

		<!-- create zip package for javadoc -->
		<zip destfile="${dir.distribution}/cloverETL.javadoc.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.doc}"/>
	</target>
		
	<target name="generateDocContainer" description="Generates container XML, which contains docs from all components from all plugins">
		<delete file="${dir.component.doc.default}/components/ComponentDoc.xml"/>
		<xslt in="${dir.component.doc.default}/components/xsl/null.xml" out="${dir.component.doc.default}/components/ComponentDoc.xml"
			style="${dir.component.doc.default}/components/xsl/componentsContainer.xsl"/>
	</target>

	<target name="transformXMLDocs" depends="generateDocContainer" description="Convert the documentation of component from xml to html. 
		Display a warning if some of the sources is more recent than the XML description">
		
		<xslt in="${dir.component.doc.default}/components/xsl/TypesDoc.xml" out="${dir.component.doc.default}/components/html/TypesDoc.html"
			style="${dir.component.doc.default}/components/xsl/types.xsl"
		/>
				
		<xslt in="${dir.component.doc.default}/components/ComponentDoc.xml" out="${dir.component.doc.default}/components/html/ComponentsDoc.html"
			style="${dir.component.doc.default}/components/xsl/description.xsl"
		/>

	</target>

	<target name="init">
		<mkdir dir="${dir.build}"/>
	</target>
	
	<target name="reports" depends="reporttests,findbugs-html">
	</target>
	
	<target name="reports-hudson" depends="reporttests,findbugs-xml,findbugs-html">
	</target>
	
	<target name="compile-tests" depends="init">
		<mkdir dir="${dir.classestest}"/>
		<javac debug="true" destdir="${dir.classestest}" target="1.5" source="1.5">
			<classpath>
				<pathelement path="${tools}"/>
				<fileset refid="engine-libs"/>
				<pathelement path="${dir.bin}"/>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
			</classpath>
			<src path="${dir.src.test}"/>
		</javac>
	</target>
	
	<target name="runtests" depends="init,compile,compile-tests" >
		<mkdir dir="${dir.testsresult}"/>
		<junit haltonerror="false" haltonfailure="false" printsummary="true">
			<classpath>
			    <pathelement path="${dir.bin}"/>
				<fileset dir="${dir.lib}">
					<include name="*.jar"/>
				</fileset>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
			  </classpath>
			<batchtest todir="${dir.testsresult}">
				<fileset dir="${dir.classestest}"></fileset>
			</batchtest>
			<formatter type="plain"/>
			<formatter type="xml"/>
		</junit>
	</target>
	
    <target name="reporttests" depends="runtests">
    	<mkdir dir="${dir.testsreport}"/>
    	<junitreport>
    		<fileset dir="${dir.testsresult}">
    			<include name="*.xml"/>
    		</fileset>
    		<report format="noframes" todir="${dir.testsreport}"/>
    	</junitreport>            
    </target>
	
	<target name="findbugs-init">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		  <classpath>
		    <pathelement location="${dir.findbugs}/lib/findbugs-ant.jar"/>
		  </classpath>
		</taskdef>
	</target>
	
	<target name="findbugs-html" depends="init,findbugs-init,compile">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="html"
				outputfile="${dir.findbugsreport}/bugreport.html" 
				stylesheet="fancy-hist.xsl"
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max">
			<class location="${dir.bin}"/>
			<sourcePath path="${dir.src}" />
		</findbugs>
	</target>
	
	<target name="findbugs-xml" depends="init,findbugs-init,compile">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="xml"
				outputfile="${dir.findbugsreport}/bugreport.xml" 
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max">
			<class location="${dir.bin}"/>
			<sourcePath path="${dir.src}"/>
		</findbugs>
	</target>
	
</project>