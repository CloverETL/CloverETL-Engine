<?xml version="1.0" encoding="us-ascii"?>
<project name="cloveretl.engine" default="build" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<property environment="env"/>
	<property name="script.name" value="cloveretl.engine\build.xml"/>

	<property name="dir.tools" value="${basedir}/tools"/>
	<property name="dir.findbugs" value="/opt/findbugs-new"/>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${dir.tools}/ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<taskdef resource="cz/mathan/ant/contrib/taskdef.properties">
		<classpath>
			<pathelement location="${dir.tools}/mathan-ant-contrib.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath>
			<fileset dir="${dir.tools}/jaxb-ri/lib">
				<include name="*.jar"/>
				<include name="*.zip"/>
			</fileset>
		</classpath>
	</taskdef>
	
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${dir.tools}/jacocoant.jar"/>
	</taskdef>

	<!-- ProGuard task definition -->
	<taskdef resource="proguard/ant/task.properties" classpath="${dir.tools}/proguard.jar" />

	<!-- =========================== DEFAULT DIRECTORIES =========================== -->
	<property name="dir.build-scripts" value="${basedir}/build-scripts"/>
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.test" value="${basedir}/test"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.docs" value="${basedir}/docs"/>
	<property name="dir.component.doc.default" value="${basedir}/src-doc"/>
	<property name="dir.examples" value="${basedir}/../cloveretl.examples"/>

	<property name="dir.build" value="${basedir}/build-tmp"/>
	<property name="dir.bin" value="${dir.build}/classes"/>
	<property name="dir.classestest" value="${dir.build}/classes-test"/>
	<property name="dir.package" value="${basedir}/build"/>
	<property name="dir.distprepare" value="${dir.build}/distprepare"/>
	<property name="dir.distprepare.src" value="${dir.distprepare}/src"/>
	<property name="dir.distprepare.bin" value="${dir.distprepare}/bin"/>
	<property name="dir.distprepare.exa" value="${dir.distprepare}/exa"/>
	<property name="dir.doc" value="${dir.build}/javadoc"/>
	<property name="dir.distribution" value="${basedir}/dist"/>
	<property name="dir.src.improved" value="${dir.build}/src"/>
	<property name="dir.testsresult" value="${dir.build}/testsresult"/>
	<property name="dir.testsreport" value="${dir.build}/testsreport"/>
	<property name="dir.findbugsreport" value="${dir.build}/findbugsreport"/>
	<property name="dir.manifest" value="${dir.build}/manifest"/>
	<property name="dir.obfuscate" value="${dir.build}/obfuscate"/>
	<property name="dir.obfuscate.classes" value="${dir.obfuscate}/classes"/>
	<property name="dir.obfuscate.manifest" value="${dir.obfuscate}/manifest"/>
	<property name="dir.src.javadoc" value="${dir.build}/src-javadoc" />
	<property name="dir.lib.javadoc" value="${dir.build}/lib-javadoc" />
	<property name="dir.pmd" value="/opt/pmd" />
	<property name="dir.pmd.lib" value="${dir.pmd}/lib" />
	<property name="dir.pmdreport" value="${dir.build}/pmdreport" />
	<property name="dir.licenses" value="${basedir}/licenses" />
	
	<!-- =========================== TASKS PROPERTIES =========================== -->
	<property name="pmd.ruleset.file" value="${dir.build-scripts}/pmd-ruleset.xml" />
	<property name="run.coverage" value="false"/>
	<property name="jacoco.dest.file" location="${basedir}/jacoco.exec"/>
	<property name="additional.jvmargs" value=""/>
	<property name="runtests.engine.Xmx" value="-Xmx2048m"/>
	
	<!--load external properties-->
	<property file="build-local.properties"/>
	<property file="version.properties"/>
	<property file="${settings.file}"/>
	<property file="build.properties"/>

	<!-- =========================== VERSIONs =========================== -->
	<propertyregex property="version.major"
              input="${version}"
	          regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\1" />
	<propertyregex property="version.minor"
              input="${version}"
              regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\2" />
	<propertyregex property="version.revision"
              input="${version}"
              regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\3" />
	
	<if>
		<and>
		  <isset property="version.suffix"/>
		  <not>
		    <equals arg1="${version.suffix}" arg2=""/>
		  </not>
		</and>
		         <then>
		    		<echo> version.suffix: ${version.suffix} </echo>
		            <property name="engine.version" value="${version.major}-${version.minor}-${version.revision}-${version.suffix}" />
		         </then>
		<else>
		        <property name="engine.version" value="${version.major}-${version.minor}-${version.revision}" />
		</else> 
		</if>
	<echo message="Engine version - ${engine.version}"/>
		
	<property name="test.license.version" value="${version.major}.${version.minor}"/>
	
	
	<tstamp>
		<format property="build.time" pattern="dd/MM/yyyy HH:mm:ss" locale="en" />
		<format property="build.time.compact" pattern="yyyyMMddHHmmss" locale="en" />
		<format property="build.year" pattern="yyyy" locale="en" />
	</tstamp>
	<property name="build.number" value="0"/>

	<patternset id="example.files">
		<exclude name="**/*.ts"/>
		<exclude name="**/data-tmp/*"/>
		<exclude name="**/supposed-out"/>
		<exclude name="**/supposed-out/**"/>
		<exclude name="**/supposed-out-night"/>
		<exclude name="**/supposed-out-night/**"/>
		<exclude name="**/.keep"/>
	</patternset>

	<!-- =========================== LIBRARIES ============================= -->
	<fileset id="engine-libs" dir="${dir.lib}">
		<include name="**/*.jar"/>
	</fileset>


	<fileset id="engine-tools" dir="${dir.tools}">
		<include name="**/*.jar"/>
	</fileset>

	
	<!-- =========================== PUBLIC TARGETS ============================== -->
	<target name="build" depends="build-engine,build-plugins" description="Compiles sources and creates a JAR file">
	</target>

	<target name="clean" depends="clean-engine,clean-plugins" description="Delete old compiled files">
	</target>



	<!-- =========================== PRIVATE TARGETS ============================== -->

	<target name="build-engine" depends="compile,package">
	</target>

	<target name="build-plugins" depends="build-engine" unless="no-plugins">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-build" param="plugin.dir"/>
		<property name="dir.dist" value="${dir.package}"/>
	</target>

	<target name="plugin-build">
		<echo message="Building plugin - ${plugin.dir}"/>
		<condition property="plugin.obfuscate" else="false">
			<and>
				<isset property="obfuscate.plugin.pattern" />
				<not><equals arg1="${obfuscate.plugin.pattern}" arg2="" /></not>
				<matches pattern="${obfuscate.plugin.pattern}" string="${plugin.dir}" />
			</and>
		</condition>
		<!-- <propertyregex property="plugin.obfuscate" input="${plugin.dir}" regexp="${obfuscate.plugin.pattern}" replace="true" defaultvalue="false"/> -->
		<echo>Property plugin.obfuscate set to ${plugin.obfuscate}. Created from input: ${plugin.dir}, with regexp: ${obfuscate.plugin.pattern}</echo>
		<ant dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="plugin.obfuscate" value="${plugin.obfuscate}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.target" value="${java.src.target}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>

	<target name="clean-plugins" unless="no-plugins">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-clean" param="plugin.dir"/>
	</target>

	<target name="plugin-clean">
		<echo message="Cleaning plugin - ${plugin.dir}"/>
		<ant target="clean" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="version.full" value="${version.full}"/>
		</ant>
	</target>

	<target name="dist" depends="dist.bin, dist.src, dist.javadoc, dist.examples" description="Creates all distribution files with sources"/>

	<target name="dist-nosrc" depends="dist.bin, dist.javadoc, dist.examples" description="Creates all distribution files without sources"/>

	<target name="dist.src" depends="init,improve-java-sources" description="Creates source distribution">

		<mkdir dir="${dir.distprepare.src}/cloverETL"/>
	
		<!-- call source target for all plugins -->
		<foreach list="${plugin.list}" inheritall="true" target="plugin.src" param="plugin.dir"/>

		<!-- copy source for engine itself -->
		<property name="src.distribution.dir.engine" value="${dir.distprepare.src}/cloverETL/cloveretl.engine"/>

		<copy todir="${src.distribution.dir.engine}/src">
			<fileset dir="${dir.src.improved}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/docs">
			<fileset dir="${dir.docs}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/lib">
			<fileset dir="${dir.lib}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/test">
			<fileset dir="test" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/data">
			<fileset dir="data" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/scripts">
			<fileset dir="scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/tools">
			<fileset dir="tools" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/build-scripts">
			<fileset dir="build-scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}">
			<fileset file="build.xml" />
			<fileset file="version.properties" />
			<fileset file="plugin.xml" />
			<fileset file="readme.src.txt" />
			<fileset file="readme.bin.txt" />
		</copy>

		<copy file="build.properties" tofile="${src.distribution.dir.engine}/build.properties" overwrite="true"/>
		<replace file="${src.distribution.dir.engine}/build.properties">
			<replacefilter token="additional.plugin.list=" value="additional.plugin.list=${additional.plugin.list}"/>
		</replace>
		<echo file="${src.distribution.dir.engine}/build.properties" append="true" >

defined.version.suffix=release
</echo>

		<copy file="readme.src.txt" tofile="${src.distribution.dir.engine}/../readme.txt" />
		<replace file="${src.distribution.dir.engine}/../readme.txt" encoding="UTF-8" >
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
		

		<property name="version.suffix" value="develbefore${build.time.compact}${user}"/>

	
		<!-- create zip package for source distribution -->
		<mkdir dir="${dir.distribution}"/>
		 
		<if>
		     <equals arg1="${dist.type}" arg2="opensource"/>
		      <then>
		             <copy file="${dir.docs}/licenses/LicenseLGPL.txt" tofile="${src.distribution.dir.engine}/../LICENSE"/>
		             <echo file="${src.distribution.dir.engine}/../readme.txt" append="true">
Licensing
----------                              
This software is licensed under the terms you may find in the file named "LICENSE" in this directory.   
		            </echo>
		      <fixcrlf srcdir="${src.distribution.dir.engine}/../" includes="readme.txt" eol="crlf" />
		      </then>
	   </if>
		                		
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.src.rel-${engine.version}.zip" >
			<fileset dir="${dir.distprepare.src}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>

	</target>

	<target name="plugin.src" >
		<!--Private target for copy source of plugin. Don't call direct.-->
		<echo message="Copy source from plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" target="dist.src" inheritAll="false">
			<property name="dist.src" value="${dir.distprepare.src}/cloverETL"/>
			<property name="version.full" value="${version.full}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.target" value="${java.src.target}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>

	<target name="dist.bin" depends="build" description="Creates binary distribution">

		<!-- binary distribution -->
		<if>
		    <equals arg1="${dist.type}" arg2="opensource"/>
		        <then>
		          <antcall target="copy-license-LGPL"/>
		        </then>
		</if>
		
		<mkdir dir="${dir.distprepare.bin}/cloverETL"/>
		<copy todir="${dir.distprepare.bin}/cloverETL">
			<fileset dir="${dir.package}" />
		</copy>			 
			
	   	<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
					         	
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.rel-${engine.version}.zip" >
			<fileset dir="${dir.distprepare.bin}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>

	</target>
	
	 <target name="copy-license-LGPL">
	            <copy file="${dir.docs}/licenses/LicenseLGPL.txt" tofile="${dir.package}/LICENSE" />
	            <echo file="${dir.package}/readme.txt" append="true">
Licensing
----------	                        	
This software is licensed under the terms you may find in the file named "LICENSE" in this directory.   
	            </echo>
	 </target>


	<target name="dist.javadoc" depends="javadoc" description="Creates javadoc distribution">
		<!-- create zip package for javadoc -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.javadoc.rel-${engine.version}.zip" >
			<fileset dir="${dir.doc}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>

	</target>

	<target name="dist.examples" depends="init" description="Creates examples distribution">

		<!-- cleanup old examples (there may be commercial examples when building community examples) -->
		<delete dir="${dir.distprepare.exa}" />
		
		<!-- binary distribution -->
		<mkdir dir="${dir.distprepare.exa}/${example.archive.dir}"/>

		<if>
			<istrue value="${example.include.htmls}"/>
			<then>
				<copy todir="${dir.distprepare.exa}/${example.archive.dir}/">
					<fileset dir="${dir.examples}" >
						<include name="*html"/>
					</fileset>
				</copy>
			</then>
		</if>

		<foreach target="copy-example-project" param="dir.example.project" list="${example.projects}" delimiter=","/>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.examples.rel-${engine.version}.zip">
			<fileset dir="${dir.distprepare.exa}">
				<include name="**/*"/>
			</fileset>
		</zip>
		
		<delete dir="${dir.distprepare.exa}"/> <!-- remove *.launch -->

	</target>

	<target name="copy-example-project">
		<basename property="example.project.basename" file="${dir.example.project}" />
		<customproperty name="example.project.name" value="${example.project.basename}" prefix="example.project." suffix=".name"/>
		<echo>Copying example project ${example.project.name} from ${dir.example.project}</echo>
		<copy todir="${dir.distprepare.exa}/${example.archive.dir}/${example.project.name}" includeemptydirs="true">
			<fileset dir="${dir.example.project}" >
				<patternset refid="example.files"/>
			</fileset>
			<filtermapper>
			  <replacestring from="launch_" to="launch"/>
			</filtermapper>
		</copy>
	</target>
	
	<!-- The "clean" target deletes previously compiled files. -->
	<target name="clean-engine">
		<delete dir="${dir.build}"/>
		<delete dir="${dir.package}"/>
		<delete dir="${dir.distribution}"/>
	</target>

	<!-- compile temp copy of source -->
	<target name="compile" depends="init,improve-java-sources" description="Compile sources">
		<!-- Create directory for binaries. -->
		<mkdir dir="${dir.bin}"/>

		<!-- Compile sources -->
		<javac debug="true" destdir="${dir.bin}" target="${java.src.version}" source="${java.src.version}" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<!--pathelement path="${commons-logging}"/>
				<pathelement path="${log4j}"/-->
				<fileset refid="engine-libs"/>
			</classpath>
			<src path="${dir.src.improved}"/>
			<exclude name="test/**/*"/>
		</javac>

		<!-- copy resources -->
		<copy todir="${dir.bin}">
			<fileset dir="${dir.src}">
				<exclude name="**/*.java"/>
				<exclude name="**/svn/**"/>
			</fileset>
		</copy>

	</target>

	<target name="obfuscate" depends="compile,plugin.xml" if="engine.obfuscate.run">
		<mkdir dir="${dir.obfuscate.classes}"/>
		<mkdir dir="${dir.obfuscate.manifest}"/>

		<pathconvert property="engine-libs.classpath" refid="engine-libs"/>

		<proguard 
			shrink="false" 
			verbose="true"
			optimize="false" 
			usemixedcaseclassnames="false"
			skipnonpubliclibraryclasses="false"
			skipnonpubliclibraryclassmembers="false"
			renamesourcefileattribute="Main"
			printmapping="${dir.obfuscate}/proGuard-mapping.txt"
			printseeds="${dir.obfuscate}/proGuard-seeds.txt"
			dump="${dir.obfuscate}/proGuard-dump.txt"
			note="false"
			>
			<dontnote filter = "org.jetel.interpreter.ASTnode.*" />
			<injar path="${dir.bin}" />
			<outjar location="${dir.obfuscate.classes}" />

			<injar path="${dir.manifest}" />
			<outjar location="${dir.obfuscate.manifest}" />

			<adaptresourcefilecontents filter="plugin.xml" />

			<libraryjar location="${java.home}/lib/rt.jar" />
			<libraryjar location="${java.home}/lib/jce.jar" />
			<libraryjar path="${tools}"/>
			<libraryjar path="${engine-libs.classpath}"/>
			
			<keepattributes filter="Exceptions,InnerClasses,SourceFile,LineNumberTable" />
			<keep extends="java.lang.Enum"><field access="public"/><method access="public"/></keep>
			<keep extends="org.jetel.ctl.data.TLTypePrimitive"><field access="public"/><method access="public"/></keep>
			
			<keepclassmembernames implements="org.jetel.graph.IGraphElement"><method name="fromXML" /></keepclassmembernames>
			<keep extends="org.jetel.ctl.data.TLType"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.data.Defaults"></keep>
			<keep name="org.jetel.plugin.PluginDescriptor"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.plugin.PluginActivator"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.plugin.PluginLocation"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.plugin.Plugins"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.plugin.ExtensionParameter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.plugin.Extension"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.plugin.PluginClassLoader"><method name="getAllURLs"/></keep>
			<keep name="org.jetel.graph.Result"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.GraphElement"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.Node"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.EdgeDebuger"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.GraphAnalyzerParticipant*"><method access="public"/></keep>
			
			<keep name="org.jetel.graph.runtime.IAuthorityProxy"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.IAuthorityProxy$RunResult"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.IThreadManager"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.GraphRuntimeContext"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.GraphRuntimeContext$PropertyKey"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.EngineInitializer"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.CloverClassPath"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.CloverWorker"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.CloverJMXMBean"></keep>
			<keep name="org.jetel.graph.runtime.jmx.CloverJMX"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.*Tracking"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.*TrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.TrackingUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.WatchDog"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.SingleThreadWatchDog"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.plugin.PluginRepositoryLocation"><field access="public"/><method access="public"/></keep>

			<keep name="org.jetel.data.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.PluginableItemDescription"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.data.parser.*"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.data.reader.DriverReader"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.reader.InputReader"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.reader.SlaveReader"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.reader.SlaveReaderDup"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.sequence.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.primitive.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.formatter.CloverDataFormatter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.formatter.StructureFormatter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.formatter.*Formatter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.formatter.provider.*FormatterProvider"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.lookup.Lookup"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.data.lookup.LookupTable"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.data.tape.DataRecordTape"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.data.xsd.ConvertorRegistry"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.xsd.IGenericConvertor"><field access="public"/><method access="public"/></keep>
						
			<keep name="org.jetel.exception.BadDataFormatException"><field access="public protected"/><method access="public protected"/></keep>
			<keep name="org.jetel.main.runGraph"><field access="public"/><method access="public"/></keep>
			
			<!-- keep classes usualy used in trasformation -->
			<keep name="java.util.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.metadata.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.exception.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.primitive.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.property.ComponentXMLAttributes"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.property.PropertyRefResolver"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.property.RefResFlag"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.protocols.proxy.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.compile.ClassLoaderUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.classloader.GreedyURLClassLoader"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.exec.ProcBox"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.exec.DataConsumer"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.exec.DataProducer"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.exec.PlatformUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.string.Compare"><field access="public"/><method access="public"/></keep>			
			<keep name="org.jetel.util.string.StringUtils"><field access="public"/><method access="public"/></keep>			
			<keep name="org.jetel.util.string.StringAproxComparator"><field access="public"/><method access="public"/></keep>			
			<keep name="org.jetel.util.string.Concatenate"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.string.QuotingDecoder"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.stream.StreamUtils"><field access="public"/><method access="public"/></keep>			
			<keep name="org.jetel.util.file.FileUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.file.FileURLParser"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.file.WcardPattern"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.formatter.*Formatter*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.joinKey.AproximativeJoinKey"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.joinKey.JoinKeyUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.joinKey.OrderedKey"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.key.KeyTokenizer"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.key.RecordKeyTokens"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.compile.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.bytes.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.crypto.Enigma"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.crypto.Base64"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.crypto.Digest"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.util.crypto.Digest$DigestType"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.component.RecordTransform"><field access="public"/><method access="public"/></keep>

			<keep name="org.jetel.enums.PartitionFileTagType"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.enums.OrderEnum"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.component.*"><field access="protected public"/><method access="protected public"/></keep>
			
			<keep name="org.jetel.graph.dictionary.*"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.interpreter.ParseException"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.interpreter.TransformLangParser"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.interpreter.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.interpreter.data.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.interpreter.extensions.*"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.interpreter.ASTnode.CLVFStartExpression"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.ctl.CTLAbstractTransform"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.CTLAbstractTransformAdapter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.CTLEntryPoint"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ErrorLocation"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ErrorMessage"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ErrorMessageException"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.NavigatingVisitor"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ITLCompiler"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.ctl.TLCompiler"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.ctl.TLCompilerFactory"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.TransformLangExecutor"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.TLUtils"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.TransformLangExecutorRuntimeException"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.TransformLangParserVisitor"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ProblemReporter"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.Stack"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.SyntacticPosition"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.ASTnode.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.data.TLType"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.data.TLTypePrimitive"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.extensions.*"><field access="protected public"/><method access="protected public"/></keep>

			<keep name="org.jetel.ctl.debug.DebugJMXMBean"></keep>
			<keep name="org.jetel.ctl.debug.DebugJMX"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.debug.Breakpoint"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.debug.DebugStatus"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.debug.StackFrame"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.ctl.debug.Thread"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.database.IConnection"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.database.dbf.DBFDataParser"><field access="public"/><method access="public"/></keep>
			
			<keep name="org.jetel.graph.runtime.ErrorMessage"><field /><method access="public"/></keep>
				
		</proguard>
		
		<concat destfile="${dir.obfuscate}/proGuard-mapping-all.txt">
			<filelist files="${dir.obfuscate}/proGuard-mapping.txt"/>
		</concat>
	</target>


	<target name="plugin.xml" depends="init">
		<mkdir dir="${dir.manifest}"/>
		<copy file="plugin.xml" tofile="${dir.manifest}/plugin.xml" encoding="UTF-8" />
		<replace file="${dir.manifest}/plugin.xml" encoding="UTF-8">
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
	</target>

	<!-- pack binary result of compile to jar file -->
	<target name="package" depends="compile,obfuscate,plugin.xml">
		<!-- Create directory for dist. -->
		<mkdir dir="${dir.package}/lib"/>

		<echo message="*** Creating jar ${dir.package}/lib/cloveretl.engine.jar from ${dir.package.classes}." />
		<copy file="${basedir}/version.properties" todir="${dir.package.classes}" overwrite="yes"/>
		<jar destfile="${dir.package}/lib/cloveretl.engine.jar" basedir="${dir.package.classes}">
			<include name="**/*"/>
			<exclude name="test/**/*"/>
		</jar>
		
		<echo message="*** Creating zip ${dir.package}/lib/cloveretl.engine.src.zip from dir.src.improved" />
		<zip destfile="${dir.package}/lib/cloveretl.engine.src.zip" basedir="${dir.src.improved}">
			<exclude name="log4j.properties"/>
		</zip>

		<!-- copy all libraries from lib directory -->
		<copy todir="${dir.package}/lib">
			<fileset dir="${dir.lib}"/>
		</copy>

		<!-- copy engine's plugin.xml to the plugins directory -->
		<copy file="${dir.package.manifest}/plugin.xml" todir="${dir.package}/plugins/org.jetel.engine" encoding="UTF-8"/>

		<!-- copy all documents from docs directory -->
		<copy todir="${dir.package}/docs">
			<fileset dir="${dir.docs}"/>
		</copy>

		<!-- copy the generated documentation of components from other plugins -->
		<!-- Commented out until the component documentation has correct content
		<copy todir="${dir.package}/docs/components" overwrite="true">
			<fileset dir="${cloveretl.engine}/src-doc/components/html" includes="**"/>
		</copy>
		-->

		<!-- copy all run scripts -->
		<copy todir="${dir.package}/bin">
			<fileset file="${basedir}/scripts/*"/>
		</copy>

		<!-- copy readme.txt -->
		<copy file="readme.bin.txt" tofile="${dir.package}/readme.txt" />
		<replace file="${dir.package}/readme.txt" encoding="UTF-8" >
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
		
	</target>

	<!-- make a temp copy of source - necessary to substitute release number constants in the source code -->
	<target name="improve-java-sources">
		<echo message="*** ${script.name}, target: improve-java-sources" />
		<echo message="Copying source code - from dir.src-${dir.src} to dir.src.improved-${dir.src.improved}." />
		<copy todir="${dir.src.improved}" encoding="UTF-8">
			<fileset dir="${dir.src}" />
		</copy>
		<replace file="${dir.src.improved}/org/jetel/util/JetelVersion.java" encoding="UTF-8">
			<replacefilter token="MAJOR_VERSION = &quot;0&quot;" value="MAJOR_VERSION = &quot;${version.major}&quot;"/>
			<replacefilter token="MINOR_VERSION = &quot;0&quot;" value="MINOR_VERSION = &quot;${version.minor}&quot;"/>
			<replacefilter token="REVISION_VERSION = &quot;0&quot;" value="REVISION_VERSION = &quot;${version.revision}&quot;"/>
			<replacefilter token="VERSION_SUFFIX = &quot;devel&quot;" value="VERSION_SUFFIX = &quot;${version.suffix}&quot;"/>
			<replacefilter token="BUILD_NUMBER = &quot;0&quot;" value="BUILD_NUMBER = &quot;${build.number}&quot;"/>
			<replacefilter token="LIBRARY_BUILD_DATETIME = &quot;&quot;" value="LIBRARY_BUILD_DATETIME = &quot;${build.time}&quot;"/>
			<replacefilter token="LIBRARY_BUILD_YEAR = &quot;&quot;" value="LIBRARY_BUILD_YEAR = &quot;${build.year}&quot;"/>
		</replace>
		
		<if>
			<not>
				<equals arg1="${java.src.header.file}" arg2="" trim="true"/>
			</not>
			<then>
				<echo>Changing license of all files - license file java.src.header.file:${java.src.header.file} for all in dir.src.improved:${dir.src.improved}</echo>
				<fileheading heading="${java.src.header.file}">
					<fileset dir="${dir.src.improved}" includes="**/*.java"/>
				</fileheading>
			</then>
		</if>
	</target>

	<target name="generate-java-sources" depends="generate-interpreter-parser,generate-ctl-parser,generate-jaxb-dictionary" description="Generate some java sources"/>

	<target name="generate-interpreter-parser" description="Generate interpreter parser sources by javaCC">

		<jjtree javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jjt" 
			outputdirectory="${dir.src}/org/jetel/interpreter/"/>

		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jj"/>

		<delete file="${dir.src}/org/jetel/interpreter/Node.java"/>

		<replaceR file="${dir.src}/org/jetel/interpreter/TransformLangParserVisitor.java"/>
		<replaceR file="${dir.src}/org/jetel/interpreter/JJTTransformLangParserState.java"/>
		
		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/util/ddl2clover/DDL2Clover.jj"/>

	</target>

	<target name="generate-ctl-parser" description="Generate interpreter parser sources by javaCC">

		<jjtree javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/ctl/TransformLangParser.jjt" 
			outputdirectory="${dir.src}/org/jetel/ctl/"/>

		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/ctl/TransformLangParser.jj"/>

		<delete file="${dir.src}/org/jetel/ctl/Node.java"/>
		<delete file="${dir.src}/org/jetel/ctl/SimpleNode.java"/>

		<replaceR file="${dir.src}/org/jetel/ctl/TransformLangParserVisitor.java"/>
		<replaceR file="${dir.src}/org/jetel/ctl/TransformLangParser.java"/>
		<replaceR file="${dir.src}/org/jetel/ctl/JJTTransformLangParserState.java"/>
			
	</target>

	<target name="generate-jaxb-dictionary">
		<delete>
			<fileset dir="src/org/jetel/graph/dictionary/jaxb">
				<include name="*.java"/>
			</fileset>
		</delete>
		<xjc schema="src/org/jetel/graph/dictionary/dictionary.xsd" destdir="src" package="org.jetel.graph.dictionary.jaxb"/>
	</target>


	<target name="javadoc" depends="init,collect-javadoc-src" description="Create Javadoc API documentation">
		<echo message="Building code documentation..." />
		<property name="dist.subdir" value="cloverETL/javadoc"/>
		<mkdir dir="${dir.doc}/${dist.subdir}" />
		<javadoc 
				destdir="${dir.doc}/${dist.subdir}" 
				packagenames="*"
				author="true"
				failonerror="true"
				private="false"
	        	encoding="UTF-8" charset="UTF-8" docencoding="UTF-8"
				>
			<fileset dir="${dir.src.javadoc}">
				<include name="**/*.java"/>
			</fileset>
			<classpath>
				<fileset dir="${dir.lib.javadoc}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<doclet name="com.sun.tools.doclets.standard.Standard">
				<param name="-breakiterator" value="on" />
				<!-- Following tag definition is here to get rid of complains produced by standard doclet-->
				<param name="-tag" value="revision" />
			</doclet>
			<doctitle>
				<![CDATA[<h1>CloverETL: Java ETL framework</h1>
			<h3>version: ]]>${version.major}.${version.minor}<![CDATA[</h3>]]></doctitle>
			<bottom>
				<![CDATA[<address>Copyright &#169; 2002-${build.year} Javlin a.s.</address>]]>
			</bottom>
			<link href="http://java.sun.com/j2se/${java.src.version}.0/docs/api/"/>
		</javadoc>
	</target>
	
	<target name="collect-javadoc-src" depends="init">
		<mkdir dir="${dir.src.javadoc}"/>
		<copy todir="${dir.src.javadoc}">
			<fileset dir="${dir.src}">
			</fileset>
		</copy>
	
		<mkdir dir="${dir.lib.javadoc}"/>
		<copy todir="${dir.lib.javadoc}">
			<fileset refid="engine-libs"/>
			<fileset refid="engine-tools"/>
			<flattenmapper/>
			<filterset endtoken=".jar"/>
		</copy>
	
		<foreach list="${plugin.list}" inheritall="true" target="plugin-collect-javadoc-src" param="plugin.dir"/>
	</target>
	<target name="plugin-collect-javadoc-src">
		<echo message="Collect plugin javadoc sources - ${plugin.dir}"/>
		<ant target="collect-javadoc-src" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.src.javadoc" value="${dir.src.javadoc}"/>
			<property name="dir.lib.javadoc" value="${dir.lib.javadoc}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="javadoc.limited" value="${javadoc.limited}"/>
		</ant>
	</target>
	
	
	<target name="generateDocContainer" description="Generates container XML, which contains docs from all components from all plugins">
		<delete file="${dir.component.doc.default}/components/ComponentDoc.xml"/>
		<xslt in="${dir.component.doc.default}/components/xsl/null.xml" out="${dir.component.doc.default}/components/ComponentDoc.xml"
				style="${dir.component.doc.default}/components/xsl/componentsContainer.xsl"/>
	</target>
	
	<target name="transformXMLDocs" depends="generateDocContainer" description="Convert the documentation of component from xml to html. 
			Display a warning if some of the sources is more recent than the XML description">
	
		<xslt in="${dir.component.doc.default}/components/xsl/TypesDoc.xml" out="${dir.component.doc.default}/components/html/TypesDoc.html"
				style="${dir.component.doc.default}/components/xsl/types.xsl"
			/>
	
		<xslt in="${dir.component.doc.default}/components/ComponentDoc.xml" out="${dir.component.doc.default}/components/html/ComponentsDoc.html"
				style="${dir.component.doc.default}/components/xsl/description.xsl"
			/>
	
	</target>
	
	<target name="init-user-property" unless="user">
		<if>
			<isset property="env.USERNAME"/>
			<then>
				<property name="user" value="${env.USERNAME}"/>
			</then>
			<else>
				<if>
					<isset property="env.USER"/>
					<then>
						<property name="user" value="${env.USER}"/>
					</then>
					<else>
						<fail message="no user variable is set"/>
					</else>
				</if>
			</else>
		</if>
	</target>
	
	<target name="init" depends="init-user-property">
		<if>
			<isset property="defined.version.suffix"/>
			<then>
				<if>
					<equals arg1="${defined.version.suffix}" arg2="release"/>
					<then>
						<property name="version.suffix" value=""/>
						<property name="version.full" value="${version}"/>
					</then>
					<else>
						<property name="version.suffix" value="${defined.version.suffix}"/>
						<property name="version.full" value="${version}.${version.suffix}"/>
					</else>
				</if>
			</then>
			<else>
				<property name="version.suffix" value="devel${build.time.compact}${user}"/>
				<property name="version.full" value="${version}.${version.suffix}"/>
			</else>
		</if>
	
		<propertyregex property="engine.obfuscate" input="cloveretl.engine" regexp="${obfuscate.plugin.pattern}" replace="true" defaultvalue="false"/>
		<if>
			<equals arg1="${engine.obfuscate}" arg2="true"/>
			<then>
				<property name="engine.obfuscate.run" value="true"/>
				<property name="dir.package.classes" value="${dir.obfuscate.classes}"/>
				<property name="dir.package.manifest" value="${dir.obfuscate.manifest}"/>
			</then>
			<else>
				<property name="dir.package.classes" value="${dir.bin}"/>
				<property name="dir.package.manifest" value="${dir.manifest}"/>
			</else>
		</if>
	
		<echo>
				version.full=${version.full}
				
				version.major=${version.major}
				version.minor=${version.minor}
				version.revision=${version.revision}
				version.suffix=${version.suffix}
				build.number=${build.number}
				build.time=${build.time}
				build.year=${build.year}
				engine.obfuscate.run=${engine.obfuscate.run}
			</echo>
	
		<echo message="Using directory for classes: ${dir.bin}"/>
		<echo message="Using directory for javadoc: ${dir.doc}"/>
		<echo message="Using directory for package: ${dir.package}"/>
	
		<mkdir dir="${dir.build}"/>
	</target>
	
	<target name="reports" depends="check-sources,reporttests,findbugs-html">
	</target>

	<target name="reports-hudson" depends="dist,check-sources,runtests-with-testdb,javadoc">
	</target>
	
	<target name="reports-hudson-unittest" depends="dist,check-sources,runtests">
	</target>

	<target name="reports-hudson-detail" depends="pmd,dist,runtests-detail,findbugs-xml,findbugs-xml-plugins">
	</target>
	
	<target name="reports-hudson-optimalized"  depends="dist,runtests-with-testdb">
	</target>
		
	<target name="generate-eval-license">
		<mkdir dir="${dir.licenses}" />
		<get 
			src="http://virt-victor:8080/cloveretl.licensegenerator/LicenseGenerator?licenseV2=true&amp;company=Javlin+a.s.&amp;person=&amp;vendor=&amp;note=Evaluation+license&amp;licenseType=EVALUATION&amp;licenseNo=Evaluation+Devel&amp;expiration=%2B45d&amp;validFrom=&amp;upgradeUntil=&amp;licenseProperties=&amp;product%5B0%5D=CloverETL+Designer&amp;product%5B0%5D.id=com.cloveretl.gui&amp;product%5B0%5D.version=${test.license.version}&amp;product%5B0%5D.features=com.cloveretl.gui%3Dtrue%0D%0Acom.cloveretl.gui.jobflow%3Dtrue&amp;product%5B1%5D=CloverETL+Profiler&amp;product%5B1%5D.id=com.cloveretl.profiler&amp;product%5B1%5D.version=${test.license.version}&amp;product%5B1%5D.features=com.cloveretl.profiler%3Dtrue%0D%0Acom.cloveretl.profiler.ProfilerProbe%3Dtrue%0D%0Acom.cloveretl.validator%3Dtrue&amp;product%5B2%5D=CloverETL+Engine&amp;product%5B2%5D.id=com.cloveretl.engine&amp;product%5B2%5D.version=${test.license.version}&amp;product%5B2%5D.features=com.cloveretl.engine%3Dtrue&amp;product%5B3%5D=CloverETL+Server&amp;product%5B3%5D.id=com.cloveretl.server&amp;product%5B3%5D.version=${test.license.version}&amp;product%5B3%5D.features=com.cloveretl.server%3Dtrue%0D%0Acom.cloveretl.server.maxCpuCores%3D8%0D%0Acom.cloveretl.server.platform%3D%0D%0Acom.cloveretl.server.security%3Dtrue%0D%0Acom.cloveretl.server.scheduling%3Dtrue%0D%0Acom.cloveretl.server.graphEventsListener%3Dtrue%0D%0Acom.cloveretl.server.fileEventsListener%3Dtrue%0D%0Acom.cloveretl.server.jmsEventsListener%3Dtrue%0D%0Acom.cloveretl.server.groovyEventsListener%3Dtrue%0D%0Acom.cloveretl.server.clustering%3Dtrue%0D%0Acom.cloveretl.server.partitioning%3Dtrue%0D%0Acom.cloveretl.server.launchServicesApi%3Dtrue%0D%0Acom.cloveretl.server.simpleHttpApi%3Dtrue%0D%0Acom.cloveretl.server.jmxApi%3Dtrue%0D%0Acom.cloveretl.server.osgiFramework%3Dtrue%0D%0Acom.cloveretl.server.sandboxes%3Dtrue%0D%0Acom.cloveretl.server.maxClusterNodes%3D4%0D%0Acom.cloveretl.server.graphPools%3Dtrue%0D%0Acom.cloveretl.server.jobflow%3Dtrue%0D%0Acom.cloveretl.server.subgraph%3Dtrue%0D%0Acom.cloveretl.server.jobflowEventsListener%3Dtrue%0D%0Acom.cloveretl.server.executeGraph%3Dtrue&amp;product%5B4%5D=&amp;product%5B4%5D.id=&amp;product%5B4%5D.version=&amp;product%5B4%5D.features="
      ignoreerrors="true"
			verbose="true"
			dest="${dir.licenses}/generated.license.dat" />
	</target>

	<target name="clean-eval-license">
		<delete dir="${dir.licenses}" />
	</target>

	<target name="compile-tests" depends="compile">
		<mkdir dir="${dir.classestest}"/>
		<javac debug="true" destdir="${dir.classestest}" target="${java.src.version}" source="${java.src.version}" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<fileset refid="engine-libs"/>
				<pathelement path="${dir.bin}"/>
				<pathelement path="${dir.tools}/junit-4.11.jar"/>
				<pathelement path="${dir.tools}/hamcrest-core-1.3.jar"/>
				<pathelement path="${dir.tools}/mockito-all-1.9.5.jar"/>
			</classpath>
			<src path="${dir.src.test}"/>
		</javac>
		<copy todir="${dir.classestest}">
			<fileset dir="${dir.src.test}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="runtests" depends="" description="Runs engine and plugins JUnit tests" unless="runtests-dontrun">
		<property name="test.cloveretl.plugins" value="${dir.package}/plugins"/>
		<property name="dir.test.additional.classpath" value=""/>
		<antcall target="runtests-engine" inheritall="true" inheritrefs="true"/>
		<antcall target="runtests-plugins" inheritall="true" inheritrefs="true"/>
	</target>
	
	<target name="runtests-engine" depends="init,compile,compile-tests" description="Runs Clover engine JUnit tests">
		<mkdir dir="${dir.testsresult}"/>
		<echo message="Running all tests from ${dir.src.test} includes ${test.include} excludes ${test.exclude}"/>
		<echo message="Running coverage (JaCoCo): ${run.coverage}, destination file is set to: ${jacoco.dest.file}"/>
		<jacoco:coverage enabled="${run.coverage}" destfile="${jacoco.dest.file}"> <!-- run JaCoCo if run.coverage=true -->
			<junit 
						showoutput="true"
						haltonerror="false" 
						haltonfailure="false" 
						printsummary="true"
						fork="true"
						forkmode="once" 
						>
				<sysproperty key="file.encoding" value="UTF-8" />
				<jvmarg value="${runtests.engine.Xmx}"/>
				<jvmarg value="-XX:MaxPermSize=512m"/>
				<jvmarg value="-Dderby.system.home=${dir.examples}/ExtExamples"/>
				<jvmarg value="-Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1"/>
				<jvmarg value="-Dcloveretl.smb2.bouncycastle.jar.file=${cloveretl.smb2.bouncycastle.jar.file}"/>
				<jvmarg line="${additional.jvmargs}"/>
				
				<env key="cloveretl.plugins" value="${test.cloveretl.plugins}"/>
				<classpath>
					<pathelement path="${dir.classestest}"/>
					<pathelement path="${dir.test.additional.classpath}"/>
					<pathelement path="${dir.package.classes}"/>
					<fileset dir="${dir.lib}">
						<include name="*.jar"/>
					</fileset>
					<pathelement path="${dir.examples}/ExtExamples/lib/derby/lib/derby.jar"/>
					<pathelement path="${dir.tools}/junit-4.11.jar"/>
					<pathelement path="${dir.tools}/hamcrest-core-1.3.jar"/>
					<pathelement path="${dir.tools}/mockito-all-1.9.5.jar"/>
					<pathelement path="${dir.tools}/junit.xml.formatter.jar"/>
				</classpath>
				<batchtest todir="${dir.testsresult}">
					<fileset dir="${dir.src.test}" excludes="${test.exclude}">
						<include name="${test.include}"/>
					</fileset>
				</batchtest>
				<formatter type="plain"/>
				<formatter classname="eu.javlin.ant.junit.ExtXMLJUnitResultFormatter" extension=".xml"/>
			</junit>
		</jacoco:coverage>
	</target>
	
	<target name="runtests-plugins" depends="compile-tests,build-plugins" unless="runtests-plugins-dontrun">
		<foreach list="${plugin.list}" inheritall="true" target="runtests-plugin" param="plugin.dir"/>
	</target>
	
	<target name="runtests-plugin">
		<echo message="Runtests plugin - ${plugin.dir}"/>
		<ant target="runtests" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="dir.engine.classestest" value="${dir.classestest}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="test.cloveretl.plugins" value="${test.cloveretl.plugins}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.target" value="${java.src.target}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="cloveretl.smb2.bouncycastle.jar.file" value="${cloveretl.smb2.bouncycastle.jar.file}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>
	
	<target name="runtests-scenario-after-commit" if="cte.environment.config">
		<echo message="Executing Clover Test Environment environment - after commit"/>
		<ant target="run-scenarios-with-engine-build" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="after-commit.ts" />
			<property name="dir.engine.classes" value="${dir.package.classes}"/>
			<property name="dir.engine.build" value="${dir.package}/lib"/>
			<property name="dir.plugins" value="${dir.package}/plugins"/>
			<property name="version.full" value="${version.full}"/>
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="logpath" value="${cte.logpath}"/>
			<property name="cloveretl.smb2.bouncycastle.jar.file" value="${cloveretl.smb2.bouncycastle.jar.file}"/>
			<property name="testenv.etlenvironment" value="engine"/>
		</ant>
	</target>
	
	<target name="runtests-scenario-after-commit-with-engine-classes" if="cte.environment.config">
		<echo message="Executing Clover Test Environment environment - after commit"/>
		<ant target="runscenarios" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="after-commit.ts" />
			<property name="dir.engine.classes" value="${dir.bin}"/>
			<property name="dir.engine.build" value="${dir.package}/lib"/>
			<property name="dir.plugins" value="${dir.package}/plugins"/>
			<property name="version.full" value="${version.full}"/>
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="cloveretl.smb2.bouncycastle.jar.file" value="${cloveretl.smb2.bouncycastle.jar.file}"/>
			<property name="logpath" value="${cte.logpath}"/>
			<property name="testenv.etlenvironment" value="engine"/>
		</ant>
	</target>

	<target name="runtests-scenario-jacoco" if="cte.environment.config">
		<echo message="Executing Clover Test Environment environment with JaCoCo coverage"/>
		<ant target="run-scenarios-with-engine-build" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="detail.ts" />
			<property name="dir.engine.classes" value="${dir.package.classes}"/>
			<property name="dir.engine.build" value="${dir.package}/lib"/>
			<property name="dir.plugins" value="${dir.package}/plugins"/>
			<property name="version.full" value="${version.full}"/>
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="cloveretl.smb2.bouncycastle.jar.file" value="${cloveretl.smb2.bouncycastle.jar.file}"/>
			<property name="logpath" value="${cte.logpath}"/>
			<property name="testenv.etlenvironment" value="engine"/>
		</ant>
	</target>
	
	<!-- this target is here to ensure that plugins are built before the target runtests-engine is called -->
	<target name="runtests-tests-reset">
		<echo message="Executing Clover Test Environment environment - tests reset"/>
		<property name="test.cloveretl.plugins" value="${dir.package}/plugins"/>
		<property name="dir.test.additional.classpath" value=""/>
		<property name="cloveretl.smb2.bouncycastle.jar.file" value="${cloveretl.smb2.bouncycastle.jar.file}"/>
		<parallel>
			<daemons>
				<antcall target="start-testdb" />
			</daemons>
			<sequential>
				<sleep seconds="5" />
				<antcall target="generate-eval-license" />
				<antcall target="tests-reset" />
				<antcall target="clean-eval-license" />
			</sequential>
		</parallel>
	</target>
	
	<target name="tests-reset" depends="build-plugins,runtests-engine"/>
	
	<target name="reporttests" depends="runtests">
		<mkdir dir="${dir.testsreport}"/>
		<junitreport>
			<fileset dir="${dir.testsresult}">
				<include name="*.xml"/>
			</fileset>
			<report format="noframes" todir="${dir.testsreport}"/>
		</junitreport>
	</target>
	
	<target name="runtests-with-testdb">
		<parallel>
			<daemons>
				<antcall target="start-testdb" />
			</daemons>
			<sequential>
				<sleep seconds="5" />
				<antcall target="generate-eval-license" />
				<antcall target="${runtests-target}" />
				<antcall target="runtests" />
				<antcall target="clean-eval-license" />
			</sequential>
		</parallel>
	</target>
	
	<target name="runtests-detail">
		<antcall target="generate-eval-license" />
		<antcall target="runtests-scenario-jacoco" />
		<antcall target="runtests" />
		<antcall target="clean-eval-license" />
	</target>
	
	<target name="start-testdb">
		<property name="derby.home" value="${dir.examples}/ExtExamples/lib/derby"/>
		<echo message="Starting test db Derby with DERBY_HOME=${derby.home}" />
		<exec executable="${dir.examples}/ExtExamples/lib/derby/bin/startNetworkServer">
			<env key="DERBY_HOME" value="${derby.home}"/>
		</exec>
	</target>
	
	<target name="findbugs-init">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
			<classpath>
				<pathelement location="${dir.findbugs}/lib/findbugs-ant.jar"/>
			</classpath>
		</taskdef>
	</target>
	
	<target name="findbugs-html" depends="init,findbugs-init,compile,compile-tests">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
					home="${dir.findbugs}" 
					output="html"
					outputfile="${dir.findbugsreport}/bugreport.html" 
					stylesheet="fancy-hist.xsl"
					excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
					effort="max"
					reportlevel="low"
					jvmargs="-Xmx500m">
			<class location="${dir.bin}"/>
			<sourcePath path="${dir.src}" />
			<auxclasspath path="${tools}"/>
			<auxClasspath>
				<fileset refid="engine-libs"/>
				<fileset refid="engine-tools"/>
			</auxClasspath>
		</findbugs>
	</target>
	
	<target name="findbugs-xml" depends="init,findbugs-init,compile">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
					home="${dir.findbugs}" 
					output="xml"
					outputfile="${dir.findbugsreport}/bugreport.xml" 
					excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
					effort="max"
					reportlevel="low"
					jvmargs="-Xmx600m">
			<class location="${dir.bin}"/>
			<sourcePath path="${dir.src}" />
			<auxclasspath path="${tools}"/>
			<auxClasspath>
				<fileset refid="engine-libs"/>
				<fileset refid="engine-tools"/>
			</auxClasspath>
		</findbugs>
	</target>
	
	<target name="findbugs-xml-plugins" depends="build-engine,build-plugins,compile-tests">
		<foreach list="${plugin.list}" inheritall="true" target="findbugs-xml-plugin" param="plugin.dir"/>
	</target>
	<target name="findbugs-xml-plugin">
		<echo message="Findbugs plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" target="findbugs-xml" inheritAll="false" inheritrefs="false">
			<property name="dir.findbugs" value="${dir.findbugs}"/>
			<property name="dir.dist" value="${dir.package}"/>
		</ant>
	</target>
	
	<target name="pmd-init">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
		<path id="pmd.classpath">
				<fileset dir="${dir.pmd.lib}" includes="**/*.jar" />
		</path>
	</target>
	
	<target name="pmd" depends="pmd-init" description="Analyze the source code with PMD">
		<mkdir dir="${dir.pmdreport}"/>
		<pmd shortFilenames="true" rulesetfiles="${pmd.ruleset.file}">
			<sourceLanguage name="java" version="1.7"/>
			<formatter type="xml" toFile="${dir.pmdreport}/pmdreport.xml"/>
			<fileset dir="../" includes="**/*.java"/>
		</pmd>
	</target>
	
	<target name="check-sources" depends="check-sources-engine,check-sources-plugins">
		<echo message="*** ${script.name}, target: check-sources" />	
	</target>
	
	<target name="check-sources-engine">
		<echo message="*** ${script.name}, target: check-sources-engine, java.src.header.file.opensource - ${java.src.header.file.opensource}" />	
		<fileheading heading="${java.src.header.file.opensource}" dryrun="true" propertyifrewritten="java.src.header.invalid">
			<fileset dir="${dir.src}">
				<include name="**/*.java"/>
				<exclude name="org/jetel/interpreter/TransformLangParser*"/>
				<exclude name="org/jetel/interpreter/JJTTransformLangParserState.java"/>
				<exclude name="org/jetel/ctl/TransformLangParser*"/>
				<exclude name="org/jetel/ctl/JJTTransformLangParserState.java"/>
				<exclude name="org/jetel/graph/dictionary/jaxb/**"/>
				<exclude name="org/jetel/util/ddl2clover/DDL2*"/>
				<exclude name="org/jetel/util/bytes/UTF8CloverBufferReader.java"/>
				<exclude name="org/jetel/util/bytes/UTF8CloverBufferWriter.java"/>
			</fileset>
		</fileheading>
		<fail message="File ${java.src.header.invalid} has invalid header - must match ${java.src.header.file.opensource}" if="java.src.header.invalid"/>
	</target>
	
	<target name="check-sources-plugins">
		<echo message="*** ${script.name}, target: check-sources-plugins"/>
		<echo message="*** Running target check-sources-plugin for each from plugin.list: ${plugin.list} with param plugin.dir - ${plugin.dir} " />
		<foreach list="${plugin.list}" inheritall="true" target="check-sources-plugin" param="plugin.dir"/>
	</target>
	
	<target name="check-sources-plugin">
		<echo message="*** ${script.name}, target: check-sources-engine, java.src.header.file.opensource - ${java.src.header.file.opensource}" />
		<echo message="Check file heading plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" target="check-sources" inheritAll="false" inheritrefs="false">
		</ant>
	</target>

	<macrodef name="customproperty">
		<attribute name="name"/>
		<attribute name="value"/>
		<attribute name="prefix"/>
		<attribute name="suffix"/>
		<sequential>
			<if>
				<isset property="@{prefix}@{value}@{suffix}"/>
				<then>
					<property name="@{name}" value="${@{prefix}@{value}@{suffix}}"/>
				</then>
				<else>
					<property name="@{name}" value="@{value}"/>
				</else>
			</if>
		</sequential>
	</macrodef>
	
	<macrodef name="replaceR">
		<attribute name="file"/>
		<sequential>
			<var file="@{file}.replace.properties"/>
			<echo message="Replacing regexp ${match} in file @{file}"/>
			<!--
			<echo>RRRRRR
				file="@{file}.replace.properties"
				match="${match}"
				replace="${replace}"
			RRRRRR</echo>-->
			<replaceregexp file="@{file}" encoding="UTF-8"
				match="${match}"
				replace="${replace}"
				flags="s"
			>
			</replaceregexp>
		</sequential>
	</macrodef>
	
</project>
