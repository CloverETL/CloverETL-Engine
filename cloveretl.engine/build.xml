<?xml version="1.0" encoding="us-ascii"?>
<project name="cloveretl.engine" default="build" basedir=".">
	
	<property environment="env"/>
	
	<property name="dir.tools" value="${basedir}/tools"/>		
	<property name="dir.findbugs" value="/opt/findbugs"/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${dir.tools}/ant-contrib.jar"/>
	  </classpath>
	</taskdef>
	
	<taskdef resource="cz/mathan/ant/contrib/taskdef.properties">
	  <classpath>
	    <pathelement location="${dir.tools}/mathan-ant-contrib.jar"/>
	  </classpath>
	</taskdef>
	
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
	  <classpath>
	    <fileset dir="${dir.tools}/jaxb-ri/lib">
	      <include name="*.jar"/>
	      <include name="*.zip"/>
	    </fileset>
	  </classpath>
	</taskdef>

	<!-- ProGuard task definition -->
	<taskdef resource="proguard/ant/task.properties" classpath="${dir.tools}/proguard.jar" />
	    	
	<!-- =========================== DEFAULT DIRECTORIES =========================== -->
	<property name="dir.build-scripts" value="${basedir}/build-scripts"/>
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.test" value="${basedir}/test"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.docs" value="${basedir}/docs"/>
	<property name="dir.component.doc.default" value="${basedir}/src-doc"/>
	<property name="dir.examples" value="${basedir}/examples"/>
		
	<property name="dir.build" value="${basedir}/build-tmp"/>
	<property name="dir.bin" value="${dir.build}/classes"/>
	<property name="dir.classestest" value="${dir.build}/classes-test"/>
	<property name="dir.package" value="${basedir}/build"/>
	<property name="dir.distprepare" value="${dir.build}/distprepare"/>
	<property name="dir.distprepare.src" value="${dir.distprepare}/src"/>
	<property name="dir.distprepare.bin" value="${dir.distprepare}/bin"/>
	<property name="dir.distprepare.exa" value="${dir.distprepare}/exa"/>
	<property name="dir.doc" value="${dir.build}/javadoc"/>
	<property name="dir.distribution" value="${basedir}/dist"/>
	<property name="dir.src.improved" value="${dir.build}/src"/>
	<property name="dir.testsresult" value="${dir.build}/testsresult"/>
	<property name="dir.testsreport" value="${dir.build}/testsreport"/>
	<property name="dir.findbugsreport" value="${dir.build}/findbugsreport"/>
	<property name="dir.manifest" value="${dir.build}/manifest"/>
	<property name="dir.obfuscate" value="${dir.build}/obfuscate"/>
	<property name="dir.obfuscate.classes" value="${dir.obfuscate}/classes"/>
	<property name="dir.obfuscate.manifest" value="${dir.obfuscate}/manifest"/>
	<property name="dir.cobertura" value="${dir.tools}/cobertura" />
	<property name="dir.coverage.bin" value="${dir.build}/classes-coverage" />
	<property name="dir.coverage.plugins" value="${dir.build}/plugins-coverage" />
	<property name="dir.coverage.xml" value="${dir.build}/coveragereport/xml" />
	<property name="dir.coverage.html" value="${dir.build}/coveragereport/html" />
	<property name="cobertura.ser" value="${dir.build}/cobertura.ser"/>
	<property name="dir.src.javadoc" value="${dir.build}/src-javadoc" />
	<property name="dir.lib.javadoc" value="${dir.build}/lib-javadoc" />

	<!--load external properties-->
	<property file="build-local.properties"/>
	<property file="version.properties"/>
	<property file="${settings.file}"/>
	<property file="build.properties"/>
		
	<!-- =========================== VERSIONs =========================== -->
    <propertyregex property="version.major"
              input="${version}"
	          regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\1" />
    <propertyregex property="version.minor"
              input="${version}"
              regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\2" />
    <propertyregex property="version.revision"
              input="${version}"
              regexp="([^\.]*)\.([^\.]*)\.([^\.]*)"
              select="\3" />
	<tstamp>
		<format property="build.time" pattern="dd/MM/yyyy HH:mm:ss" locale="en" />
		<format property="build.time.compact" pattern="yyyyMMddHHmmss" locale="en" />
		<format property="build.year" pattern="yyyy" locale="en" />
	</tstamp>
	<property name="build.number" value="0"/>
	
	<patternset id="example.files">
		<exclude name="**/*.ts"/>
		<exclude name="**/data-out/*"/>
		<exclude name="**/data-tmp/*"/>
		<exclude name="**/supposed-out"/>
		<exclude name="**/supposed-out/**"/>
		<exclude name="**/supposed-out-night"/>
		<exclude name="**/supposed-out-night/**"/>
	</patternset>
	
	<!-- =========================== LIBRARIES ============================= -->
	<fileset id="engine-libs" dir="${dir.lib}">
		<include name="**/*.jar"/>
	</fileset>
	

	<fileset id="engine-tools" dir="${dir.tools}">
		<include name="**/*.jar"/>
	</fileset>
	
	<path id="cp.cobertura">
	    <fileset dir="${dir.cobertura}">
	        <include name="*.jar" />
	    </fileset>
	</path>

	<taskdef classpathref="cp.cobertura" resource="tasks.properties" />	
	
		<!-- =========================== PUBLIC TARGETS ============================== -->
	<target name="build" depends="build-engine,build-plugins" description="Compiles sources and creates a JAR file">
	</target>
	
	<target name="clean" depends="clean-engine,clean-plugins" description="Delete old compiled files">
	</target>

	
	
	<!-- =========================== PRIVATE TARGETS ============================== -->
	
	<target name="build-engine" depends="compile,package">
	</target>
	
	<target name="build-plugins" depends="build-engine">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-build" param="plugin.dir"/>
		<property name="dir.dist" value="${dir.package}"/>
	</target>
	
	<target name="plugin-build">
		<echo message="Building plugin - ${plugin.dir}"/>
		<propertyregex property="plugin.obfuscate" input="${plugin.dir}" regexp="${obfuscate.plugin.pattern}" replace="true" defaultvalue="false"/>
		<ant dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="plugin.obfuscate" value="${plugin.obfuscate}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>

	<target name="clean-plugins">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-clean" param="plugin.dir"/>
	</target>
	
	<target name="plugin-clean">
		<echo message="Cleaning plugin - ${plugin.dir}"/>
		<ant target="clean" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="version.full" value="${version.full}"/>
		</ant>
	</target>
	
	<target name="dist" depends="dist.bin, dist.src, dist.javadoc, dist.examples" description="Creates all distribution files with sources"/>
				
	<target name="dist-nosrc" depends="dist.bin, dist.javadoc, dist.examples" description="Creates all distribution files without sources"/>
	
	<target name="dist.src" depends="init" description="Creates source distribution">
	
		<mkdir dir="${dir.distprepare.src}/cloverETL"/>
		
		<!-- call source target for all plugins -->
		<foreach list="${plugin.list}" inheritall="true" target="plugin.src" param="plugin.dir"/>

		<!-- copy source for engine itself -->
		<property name="src.distribution.dir.engine" value="${dir.distprepare.src}/cloverETL/cloveretl.engine"/>

		<copy todir="${src.distribution.dir.engine}/src">
			<fileset dir="${dir.src}" />
		</copy>
		<if><not><equals arg1="${java.src.header.file}" arg2="" trim="true"/></not>
			<then>
				<echo>Changing license of all files - license file ${java.src.header.file}</echo> 
				<fileheading heading="${java.src.header.file}">
					<fileset dir="${src.distribution.dir.engine}/src" includes="**/*.java"/>
				</fileheading>
			</then>
		</if>

		<copy todir="${src.distribution.dir.engine}/docs">
			<fileset dir="${dir.docs}" />
		</copy>
		
		<copy todir="${src.distribution.dir.engine}/lib">
			<fileset dir="${dir.lib}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/test">
			<fileset dir="test" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/data">
			<fileset dir="data" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/scripts">
			<fileset dir="scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/tools">
			<fileset dir="tools" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/build-scripts">
			<fileset dir="build-scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}">
			<fileset file="build.xml" />
			<fileset file="version.properties" />
			<fileset file="plugin.xml" />
			<fileset file="readme.src.txt" />
			<fileset file="readme.bin.txt" />
		</copy>
		
		<copy file="build.properties" tofile="${src.distribution.dir.engine}/build.properties" overwrite="true"/>
		<replace file="${src.distribution.dir.engine}/build.properties">
			<replacefilter token="additional.plugin.list=" value="additional.plugin.list=${additional.plugin.list}"/>
		</replace>
		<echo file="${src.distribution.dir.engine}/build.properties" append="true" >

defined.version.suffix=release
</echo>

		<copy file="readme.src.txt" tofile="${src.distribution.dir.engine}/../readme.txt" />
		<replace file="${src.distribution.dir.engine}/../readme.txt" encoding="UTF-8" >
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
		
		<property name="version.suffix" value="develbefore${build.time.compact}${user}"/>

 
		
		<!-- create zip package for source distribution -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.src.rel-${version.major}-${version.minor}-${version.revision}.zip" >
			<fileset dir="${dir.distprepare.src}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>

	</target>

	<target name="plugin.src" ><!--Private target for copy source of plugin. Don't call direct.-->
		<echo message="Copy source from plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" target="dist.src" inheritAll="false">
			<property name="dist.src" value="${dir.distprepare.src}/cloverETL"/>
			<property name="version.full" value="${version.full}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>

	<target name="dist.bin" depends="build" description="Creates binary distribution">
		
		<!-- binary distribution -->
		<mkdir dir="${dir.distprepare.bin}/cloverETL"/>

		<copy todir="${dir.distprepare.bin}/cloverETL">
			<fileset dir="${dir.package}" />
		</copy>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.rel-${version.major}-${version.minor}-${version.revision}.zip" >
			<fileset dir="${dir.distprepare.bin}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>

	</target>

	<target name="dist.javadoc" depends="javadoc" description="Creates javadoc distribution">
		<!-- create zip package for javadoc -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.javadoc.rel-${version.major}-${version.minor}-${version.revision}.zip" >
			<fileset dir="${dir.doc}">
				<include name="cloverETL/**/*"/>
			</fileset>
		</zip>
		
	</target>
	
	<target name="dist.examples" depends="init" description="Creates examples distribution">
		
		<!-- binary distribution -->
		<mkdir dir="${dir.distprepare.exa}/${example.archive.dir}"/>

		<if><istrue value="${example.include.htmls}"/><then>
			<copy todir="${dir.distprepare.exa}/${example.archive.dir}/">
				<fileset dir="${dir.examples}" >
					<include name="*html"/>
				</fileset>
			</copy>
		</then></if>
		
		<foreach target="copy-example-project" param="dir.example.project" list="${example.projects}" delimiter=","/>
		
		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL${dist.name.infix}.examples.rel-${version.major}-${version.minor}-${version.revision}.zip">
			<fileset dir="${dir.distprepare.exa}">
				<include name="**/*"/>
			</fileset>
		</zip>			

	</target>
	
	<target name="copy-example-project">
		<basename property="example.project.basename" file="${dir.example.project}" />
		<customproperty name="example.project.name" value="${example.project.basename}" prefix="example.project." suffix=".name"/>
		<echo>Copying example project ${example.project.name} from ${dir.example.project}</echo>
		<copy todir="${dir.distprepare.exa}/${example.archive.dir}/${example.project.name}">
			<fileset dir="${dir.example.project}" >
				<patternset refid="example.files"/>
			</fileset>
		</copy>
	</target>
	
	<!-- The "clean" target deletes previously compiled files. -->
	<target name="clean-engine">
		<delete dir="${dir.build}"/>
		<delete dir="${dir.package}"/>
		<delete dir="${dir.distribution}"/>
	</target>
	
	<!-- compile temp copy of source -->
	<target name="compile" depends="init,improve-java-sources" description="Compile sources">
		<!-- Create directory for binaries. -->
		<mkdir dir="${dir.bin}"/>
		
		<!-- Compile sources -->
		<javac debug="true" destdir="${dir.bin}" target="1.5" source="1.5" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<!--pathelement path="${commons-logging}"/>
				<pathelement path="${log4j}"/-->
				<fileset refid="engine-libs"/>			
			</classpath>
			<src path="${dir.src.improved}"/>
			<exclude name="test/**/*"/>
		</javac>
		
		<!-- copy resources -->
		<copy todir="${dir.bin}">
		    <fileset dir="${dir.src}">
			      <exclude name="**/*.java"/>
			      <exclude name="**/svn/**"/>
		    </fileset>
		  </copy>
		
	</target>
	
	<target name="obfuscate" depends="compile,plugin.xml" if="engine.obfuscate.run">
		<mkdir dir="${dir.obfuscate.classes}"/>
		<mkdir dir="${dir.obfuscate.manifest}"/>
		
		<pathconvert property="engine-libs.classpath" refid="engine-libs"/>
		
		<proguard 
			shrink="false" 
			verbose="true"
			optimize="false" 
			skipnonpubliclibraryclasses="false"
			skipnonpubliclibraryclassmembers="false"
			printmapping="${dir.obfuscate}/proGuard-mapping.txt"
			printseeds="${dir.obfuscate}/proGuard-seeds.txt"
			dump="${dir.obfuscate}/proGuard-dump.txt"
			>
			
		  	<injar path="${dir.bin}" />
			<outjar location="${dir.obfuscate.classes}" />

		  	<injar path="${dir.manifest}" />
			<outjar location="${dir.obfuscate.manifest}" />
			
			<adaptresourcefilecontents filter="plugin.xml" />
			
		  	<libraryjar location="${java.home}/lib/rt.jar" />
		  	<libraryjar location="${java.home}/lib/jce.jar" />
			<libraryjar path="${tools}"/>
			<libraryjar path="${engine-libs.classpath}"/>

			<keepclassmembernames implements="org.jetel.graph.IGraphElement"><method name="fromXML" /></keepclassmembernames> 
			<keep name="org.jetel.data.Defaults"></keep>
			<keep name="org.jetel.plugin.PluginDescriptor"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.Result"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.GraphElement"><field name="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.Node"><field access="public"/><method access="public"/></keep>

			<keep name="org.jetel.graph.runtime.jmx.CloverJMXMBean"></keep>
			<keep name="org.jetel.graph.runtime.jmx.CloverJMX"></keep>
			<keep name="org.jetel.graph.runtime.jmx.GraphTrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.PhaseTrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.NodeTrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.PortTrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.InputPortTrackingDetail"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.jmx.OutputPortTrackingDetail"><field access="public"/><method access="public"/></keep>			
			<keep name="org.jetel.graph.runtime.WatchDog"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.runtime.IThreadManager"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.dictionary.StringDictionaryEntryProvider"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.parser.TypeSelector"><field access="protected public"/><method access="protected public"/></keep>
			<keep name="org.jetel.graph.runtime.GraphRuntimeContext"><field access="protected public"/><method access="protected public"/></keep>
			
			<!-- keep classes usualy used in trasformation -->
			<keep name="java.util.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.metadata.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.exception.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.data.sequence.*"><field access="public"/><method access="public"/></keep>
			<keep name="org.jetel.graph.dictionary.*"><field access="public"/><method access="public"/></keep>
			
		</proguard>
	</target>
	

	<target name="plugin.xml" depends="init">
		<mkdir dir="${dir.manifest}"/>
		<copy file="plugin.xml" tofile="${dir.manifest}/plugin.xml" encoding="UTF-8" />
		<replace file="${dir.manifest}/plugin.xml" encoding="UTF-8">
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
	</target>
	
	<!-- pack binary result of compile to jar file -->
	<target name="package" depends="compile,obfuscate,plugin.xml">
		<!-- Create directory for dist. -->
		<mkdir dir="${dir.package}/lib"/>
		
		<jar destfile="${dir.package}/lib/cloveretl.engine.jar" basedir="${dir.bin}">
			<include name="**/*"/>
			<exclude name="test/**/*"/>
		</jar>

		<!-- copy all libraries from lib directory -->
		<copy todir="${dir.package}/lib">
			<fileset dir="${dir.lib}"/>
		</copy>

		<!-- copy engine's plugin.xml to the plugins directory -->
		<copy file="${dir.manifest}/plugin.xml" todir="${dir.package}/plugins/org.jetel.engine" encoding="UTF-8"/>
		
		<!-- copy all documents from docs directory -->
		<copy todir="${dir.package}/docs">
			<fileset dir="${dir.docs}"/>
		</copy>

		<!-- copy the generated documentation of components from other plugins -->
		<!-- Commented out until the component documentation has correct content
		<copy todir="${dir.package}/docs/components" overwrite="true">
			<fileset dir="${cloveretl.engine}/src-doc/components/html" includes="**"/>
		</copy>
		-->

		<!-- copy all run scripts -->
		<copy todir="${dir.package}/bin">
			<fileset file="${basedir}/scripts/*"/>
		</copy>

		<!-- copy readme.txt -->
		<copy file="readme.bin.txt" tofile="${dir.package}/readme.txt" />
		<replace file="${dir.package}/readme.txt" encoding="UTF-8" >
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
		
	</target>
	
	<!-- make a temp copy of source - necessary to substitute release number constants in the source code -->
	<target name="improve-java-sources">
		<echo message="Copying source code.." />
		<copy todir="${dir.src.improved}" encoding="UTF-8">
			<fileset dir="${dir.src}" />
		</copy>
		<replace file="${dir.src.improved}/org/jetel/util/JetelVersion.java" encoding="UTF-8">
			<replacefilter token="MAJOR_VERSION = &quot;0&quot;" value="MAJOR_VERSION = &quot;${version.major}&quot;"/>
			<replacefilter token="MINOR_VERSION = &quot;0&quot;" value="MINOR_VERSION = &quot;${version.minor}&quot;"/>
			<replacefilter token="REVISION_VERSION = &quot;0&quot;" value="REVISION_VERSION = &quot;${version.revision}&quot;"/>
			<replacefilter token="VERSION_SUFFIX = &quot;devel&quot;" value="VERSION_SUFFIX = &quot;${version.suffix}&quot;"/>
			<replacefilter token="BUILD_NUMBER = &quot;0&quot;" value="BUILD_NUMBER = &quot;${build.number}&quot;"/>
			<replacefilter token="LIBRARY_BUILD_DATETIME = &quot;&quot;" value="LIBRARY_BUILD_DATETIME = &quot;${build.time}&quot;"/>
			<replacefilter token="LIBRARY_BUILD_YEAR = &quot;&quot;" value="LIBRARY_BUILD_YEAR = &quot;${build.year}&quot;"/>
		</replace>
	</target>
	
	<target name="generate-java-sources" depends="generate-ctl-parser,generate-jaxb-dictionary" description="Generate some java sources"/>

	<target name="generate-ctl-parser" description="Generate ctl parser sources by javaCC">
		
		<jjtree javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jjt" 
			outputdirectory="${dir.src}/org/jetel/interpreter/"/>
		
		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jj"/>
		
		<delete file="${dir.src}/org/jetel/interpreter/Node.java"/>
		
		<replace file="${dir.src}/org/jetel/interpreter/TransformLangParserVisitor.java" encoding="UTF-8">
			  <replacetoken><![CDATA[package org.jetel.interpreter;]]></replacetoken>
			  <replacevalue><![CDATA[package org.jetel.interpreter;

import org.jetel.interpreter.ASTnode.*;]]></replacevalue>
		</replace>
		
		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/util/ddl2clover/DDL2Clover.jj"/>
	
	</target>
	
	<target name="generate-jaxb-dictionary">
		<delete>
			<fileset dir="src/org/jetel/graph/dictionary/jaxb">
				<include name="*.java"/>
			</fileset>
		</delete>
		<xjc schema="src/org/jetel/graph/dictionary/dictionary.xsd" destdir="src" package="org.jetel.graph.dictionary.jaxb"/>
	</target>
	
	
	<target name="javadoc" depends="init,collect-javadoc-src" description="Create Javadoc API documentation">
		<echo message="Building code documentation..." />
		<property name="dist.subdir" value="cloverETL/javadoc"/>
		<mkdir dir="${dir.doc}/${dist.subdir}" />
		<javadoc 
				destdir="${dir.doc}/${dist.subdir}" 
				packagenames="*"
				author="true"
				failonerror="true"
				private="false"
				>
			<fileset dir="${dir.src.javadoc}">
				<include name="**/*.java"/>
			</fileset>
			<classpath>
				<fileset dir="${dir.lib.javadoc}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<doclet name="com.sun.tools.doclets.standard.Standard">
				<param name="-breakiterator" value="on" />
				<!-- Following tag definition is here to get rid of complains produced by standard doclet-->
				<param name="-tag" value="revision" />
			</doclet>
			<doctitle><![CDATA[<h1>CloverETL: Java ETL framework</h1><h3>version: ]]>${version.major}.${version.minor}<![CDATA[</h3>]]></doctitle>
			<bottom>
				<![CDATA[<address>Copyright &#169; 2002-${build.year} Javlin a.s.</address>]]>
			</bottom>
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		</javadoc>
	</target>
	
	<target name="collect-javadoc-src" depends="init">
		<mkdir dir="${dir.src.javadoc}"/>
		<copy todir="${dir.src.javadoc}">
			<fileset dir="${dir.src}">
			</fileset>
		</copy>
		
		<mkdir dir="${dir.lib.javadoc}"/>
		<copy todir="${dir.lib.javadoc}">
			<fileset refid="engine-libs"/>
			<fileset refid="engine-tools"/>
			<flattenmapper/>
			<filterset endtoken=".jar"/>
		</copy>
		
		<foreach list="${plugin.list}" inheritall="true" target="plugin-collect-javadoc-src" param="plugin.dir"/>
	</target>
	<target name="plugin-collect-javadoc-src">
		<echo message="Collect plugin javadoc sources - ${plugin.dir}"/>
		<ant target="collect-javadoc-src" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.src.javadoc" value="${dir.src.javadoc}"/>
			<property name="dir.lib.javadoc" value="${dir.lib.javadoc}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="javadoc.limited" value="${javadoc.limited}"/>
		</ant>
	</target>
	
		
	<target name="generateDocContainer" description="Generates container XML, which contains docs from all components from all plugins">
		<delete file="${dir.component.doc.default}/components/ComponentDoc.xml"/>
		<xslt in="${dir.component.doc.default}/components/xsl/null.xml" out="${dir.component.doc.default}/components/ComponentDoc.xml"
			style="${dir.component.doc.default}/components/xsl/componentsContainer.xsl"/>
	</target>

	<target name="transformXMLDocs" depends="generateDocContainer" description="Convert the documentation of component from xml to html. 
		Display a warning if some of the sources is more recent than the XML description">
		
		<xslt in="${dir.component.doc.default}/components/xsl/TypesDoc.xml" out="${dir.component.doc.default}/components/html/TypesDoc.html"
			style="${dir.component.doc.default}/components/xsl/types.xsl"
		/>
				
		<xslt in="${dir.component.doc.default}/components/ComponentDoc.xml" out="${dir.component.doc.default}/components/html/ComponentsDoc.html"
			style="${dir.component.doc.default}/components/xsl/description.xsl"
		/>

	</target>

	<target name="init-user-property" unless="user">
		<if><isset property="env.USERNAME"/>
			<then><property name="user" value="${env.USERNAME}"/></then>
			<else>
				<if><isset property="env.USER"/>
					<then><property name="user" value="${env.USER}"/></then>
					<else><fail message="no user variable is set"/></else>
				</if>					
			</else>
		</if>
	</target>
	
	<target name="init" depends="init-user-property">
		<if><isset property="defined.version.suffix"/>
			<then>
				<if><equals arg1="${defined.version.suffix}" arg2="release"/>
					<then>
						<property name="version.suffix" value=""/>
						<property name="version.full" value="${version}"/>
					</then>
					<else>
						<property name="version.suffix" value="${defined.version.suffix}"/>
						<property name="version.full" value="${version}.${version.suffix}"/>
					</else>
				</if>
			</then>
			<else>
				<property name="version.suffix" value="devel${build.time.compact}${user}"/>
				<property name="version.full" value="${version}.${version.suffix}"/>
			</else>
		</if>
		
		<propertyregex property="engine.obfuscate" input="cloveretl.engine" regexp="${obfuscate.plugin.pattern}" replace="true" defaultvalue="false"/>
		<if><equals arg1="${engine.obfuscate}" arg2="true"/>
			<then>
				<property name="engine.obfuscate.run" value="true"/>
				<property name="dir.package.classes" value="${dir.obfuscate.classes}"/>
				<property name="dir.package.manifest" value="${dir.obfuscate.manifest}"/>
			</then>
			<else>
				<property name="dir.package.classes" value="${dir.bin}"/>
				<property name="dir.package.manifest" value="${dir.manifest}"/>
			</else>
		</if>
		
		<echo>
			version.full=${version.full}
			
			version.major=${version.major}
			version.minor=${version.minor}
			version.revision=${version.revision}
			version.suffix=${version.suffix}
			build.number=${build.number}
			build.time=${build.time}
			build.year=${build.year}
		</echo>
		
		<echo message="Using directory for classes: ${dir.bin}"/> 
		<echo message="Using directory for javadoc: ${dir.doc}"/>
		<echo message="Using directory for package: ${dir.package}"/>
		
		<mkdir dir="${dir.build}"/>
	</target>
	
	<target name="reports" depends="reporttests,findbugs-html,coverage-html">
	</target>
	
	<target name="reports-hudson" depends="runtests-with-testdb,javadoc">
	</target>

	<target name="reports-hudson-detail" depends="runtests-with-testdb-coverage,coverage-html,coverage-xml,findbugs-xml,findbugs-xml-plugins">		
	</target>

	<target name="night-hudson" depends="runtests-scenario-night">		
	</target>

	<target name="compile-tests" depends="compile">
		<mkdir dir="${dir.classestest}"/>
		<javac debug="true" destdir="${dir.classestest}" target="1.5" source="1.5" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<fileset refid="engine-libs"/>
				<pathelement path="${dir.bin}"/>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
			</classpath>
			<src path="${dir.src.test}"/>
		</javac>
		<copy todir="${dir.classestest}">
			<fileset dir="${dir.src.test}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target name="coverage-instrument" depends="coverage-instrument-engine,coverage-instrument-plugins">
	</target>
		
	<target name="coverage-instrument-engine" depends="compile">
		<cobertura-instrument todir="${dir.coverage.bin}" datafile="${cobertura.ser}">
            <fileset dir="${dir.bin}">
				<include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
	</target>
	
	<target name="coverage-instrument-plugins" depends="init">
		<mkdir dir="${dir.coverage.plugins}"/>
		<foreach list="${plugin.list}" inheritall="true" target="plugin-coverage-instrument" param="plugin.dir"/>
	</target>
	
	<target name="plugin-coverage-instrument">
		<echo message="Coverage instrument plugin - ${plugin.dir}"/>
		<ant target="coverage-instrument" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="dir.coverage.dist" value="${dir.coverage.plugins}"/>
			<property name="cobertura.ser" value="${cobertura.ser}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>

	<target name="runtests" depends="" description="Runs engine and plugins JUnit tests">
		<property name="test.cloveretl.plugins" value="${dir.package}/plugins"/>
		<property name="dir.test.additional.classpath" value=""/>
		<antcall target="runtests-engine" inheritall="true" inheritrefs="true"/>
		<antcall target="runtests-plugins" inheritall="true" inheritrefs="true"/>
	</target>
	
	<target name="runtests-coverage" depends="coverage-instrument" description="Runs engine and plugins JUnit tests with test coverage report">
		<property name="test.cloveretl.plugins" value="${dir.coverage.plugins}/plugins"/>
		<property name="dir.test.additional.classpath" value="${dir.coverage.bin}"/>
		<antcall target="runtests-engine" inheritall="true" inheritrefs="true"/>
		<antcall target="runtests-plugins-coverage" inheritall="true" inheritrefs="true"/>
	</target>
			
	<target name="runtests-engine" depends="init,compile,compile-tests" description="Runs Clover engine JUnit tests">
		<mkdir dir="${dir.testsresult}"/>
		<junit 
				haltonerror="false" 
				haltonfailure="false" 
				printsummary="true"
				fork="true"
				forkmode="once" 
				>
    		<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser}" />
    		<sysproperty key="file.encoding" value="UTF-8" />
        	<jvmarg value="-Xmx2048m"/>
        	<jvmarg value="-XX:MaxPermSize=256m"/> 
        	<jvmarg value="-Dderby.system.home=${dir.examples}/extExamples"/> 
			<env key="cloveretl.plugins" value="${test.cloveretl.plugins}"/>
			<classpath>
			    <pathelement path="${dir.classestest}"/>
			    <pathelement path="${dir.test.additional.classpath}"/>
			    <pathelement path="${dir.bin}"/>
				<fileset dir="${dir.lib}">
					<include name="*.jar"/>
				</fileset>
                <pathelement path="${dir.examples}/extExamples/lib/derby/lib/derby.jar"/>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
    			<path refid="cp.cobertura"/>
			</classpath>
			<batchtest todir="${dir.testsresult}">
				<fileset dir="${dir.src.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
			<formatter type="plain"/>
			<formatter type="xml"/>
		</junit>
	</target>
	
	<target name="runtests-plugins" depends="compile-tests,build-plugins">
		<mkdir dir="${dir.coverage.plugins}"/>
		<foreach list="${plugin.list}" inheritall="true" target="runtests-plugin" param="plugin.dir"/>
	</target>
	
	<target name="runtests-plugin">
		<echo message="Runtests plugin - ${plugin.dir}"/>
		<ant target="runtests" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="dir.engine.classestest" value="${dir.classestest}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="test.cloveretl.plugins" value="${test.cloveretl.plugins}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>			
		</ant>
	</target>
	
	<target name="runtests-plugins-coverage" depends="compile-tests">
		<mkdir dir="${dir.coverage.plugins}"/>
		<foreach list="${plugin.list}" inheritall="true" target="runtests-plugin-coverage" param="plugin.dir"/>
	</target>
	
	<target name="runtests-plugin-coverage">
		<echo message="Runtests plugin - ${plugin.dir}"/>
		<ant target="runtests" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.package}"/>
			<property name="dir.coverage.dist" value="${dir.coverage.plugins}"/>
			<property name="dir.engine.classestest" value="${dir.classestest}"/>
			<property name="cobertura.ser" value="${cobertura.ser}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="test.cloveretl.plugins" value="${test.cloveretl.plugins}"/>
			<property name="java.src.header.file" value="${java.src.header.file}"/>
			<property name="java.src.exclude" value="${java.src.exclude}"/>
			<property name="plugin.xml.xslt" value="${plugin.xml.xslt}"/>
		</ant>
	</target>
	
	<target name="runtests-scenario-after-commit" depends="build">
		<echo message="Executing Clover Test Environment environment - after commit"/>
		<ant target="runscenarios" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="after-commit.ts" />
			<property name="dir.engine.classes" value="${dir.bin}"/>
			<property name="dir.plugins" value="${dir.dist}/plugins"/>
			<property name="version.full" value="${version.full}"/> 
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="logpath" value="${cte.logpath}"/>
		</ant>
	</target>
	
	<target name="runtests-scenario-night" depends="build">
		<echo message="Executing Clover Test Environment environment - night"/>
		<ant target="runscenarios" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="night.ts" />
			<property name="dir.engine.classes" value="${dir.bin}"/>
			<property name="dir.plugins" value="${dir.dist}/plugins"/>
			<property name="version.full" value="${version.full}"/>
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="logpath" value="${cte.logpath}"/>
		</ant>
	</target>
	
	<target name="runtests-scenario-coverage" depends="build,coverage-instrument">
		<echo message="Executing Clover Test Environment environment - coverage"/>
		<ant target="runscenarios" dir="../cloveretl.test.environment" inheritAll="false" inheritrefs="false">
			<property name="environment.config" value="${cte.environment.config}"/>
			<property name="scenarios" value="after-commit.ts" />
			<property name="dir.engine.classes" value="${dir.coverage.bin}:${dir.bin}"/>
			<property name="dir.plugins" value="${dir.coverage.plugins}/plugins"/>
			<property name="cobertura.ser" value="${cobertura.ser}"/>
			<property name="version.full" value="${version.full}"/>
			<property name="hudson.link" value="${cte.hudson.link}"/>
			<property name="logpath" value="${cte.logpath}"/>
		</ant>
	</target>

    <target name="reporttests" depends="runtests">
    	<mkdir dir="${dir.testsreport}"/>
    	<junitreport>
    		<fileset dir="${dir.testsresult}">
    			<include name="*.xml"/>
    		</fileset>
    		<report format="noframes" todir="${dir.testsreport}"/>
    	</junitreport>    	
    </target>

    <target name="runtests-with-testdb">
        <parallel>
            <daemons>
                <antcall target="start-testdb" />
            </daemons>
            <sequential>
                <sleep seconds="5" />
                <antcall target="runtests-scenario-after-commit" />
                <antcall target="runtests" />
            </sequential>
        </parallel>
    </target>
	
    <target name="runtests-with-testdb-coverage">
        <parallel>
            <daemons>
                <antcall target="start-testdb" />
            </daemons>
            <sequential>
                <sleep seconds="5" />
                <antcall target="runtests-scenario-coverage" />
                <antcall target="runtests-coverage" />
            </sequential>
        </parallel>
    </target>
	
    <target name="start-testdb">
        <property name="derby.home" value="${dir.examples}/extExamples/lib/derby"/>
    	<echo message="Starting test db Derby with DERBY_HOME=${derby.home}" />
    	<exec executable="${dir.examples}/extExamples/lib/derby/bin/startNetworkServer">
    		<env key="DERBY_HOME" value="${derby.home}"/>
    	</exec>
    </target>
	
	<target name="findbugs-init">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		  <classpath>
		    <pathelement location="${dir.findbugs}/lib/findbugs-ant.jar"/>
		  </classpath>
		</taskdef>
	</target>
	
	<target name="findbugs-html" depends="init,findbugs-init,compile,compile-tests">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="html"
				outputfile="${dir.findbugsreport}/bugreport.html" 
				stylesheet="fancy-hist.xsl"
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max"
				reportlevel="low"
				jvmargs="-Xmx500m">
			<class location="${dir.bin}"/>
			<class location="${dir.classestest}"/>
			<sourcePath path="${dir.src}" />
			<sourcePath path="${dir.src.test}" />
			<auxclasspath path="${tools}"/>
			<auxClasspath>
				<fileset refid="engine-libs"/>
				<fileset refid="engine-tools"/>
			</auxClasspath>
		</findbugs>
	</target>
	
	<target name="findbugs-xml" depends="init,findbugs-init,compile">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="xml"
				outputfile="${dir.findbugsreport}/bugreport.xml" 
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max"
				reportlevel="low"
				jvmargs="-Xmx500m">
			<class location="${dir.bin}"/>
			<class location="${dir.classestest}"/>
			<sourcePath path="${dir.src}" />
			<sourcePath path="${dir.src.test}" />
			<auxclasspath path="${tools}"/>
			<auxClasspath>
				<fileset refid="engine-libs"/>
				<fileset refid="engine-tools"/>
			</auxClasspath>
		</findbugs>
	</target>
	
	<target name="findbugs-xml-plugins" depends="build-engine,build-plugins,compile-tests">
		<foreach list="${plugin.list}" inheritall="true" target="findbugs-xml-plugin" param="plugin.dir"/>
	</target>
	<target name="findbugs-xml-plugin">
		<echo message="Findbugs plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" target="findbugs-xml" inheritAll="false" inheritrefs="false">
			<property name="dir.findbugs" value="${dir.findbugs}"/>
			<property name="dir.dist" value="${dir.package}"/>
			<property name="dir.engine.classestest" value="${dir.classestest}"/>
		</ant>
	</target>

	<target name="coverage-html" depends="runtests">
   		<cobertura-report datafile="${cobertura.ser}" format="html" destdir="${dir.coverage.html}" srcdir="${dir.src}" />
	</target>
		
	<target name="coverage-xml" depends="runtests">
   		<cobertura-report datafile="${cobertura.ser}" format="xml" destdir="${dir.coverage.xml}" srcdir="${dir.src}" />
	</target>
		

	<macrodef name="customproperty">
		<attribute name="name"/>
		<attribute name="value"/>
		<attribute name="prefix"/>
		<attribute name="suffix"/>
		<sequential>
			<if><isset property="@{prefix}@{value}@{suffix}"/>
				<then><property name="@{name}" value="${@{prefix}@{value}@{suffix}}"/></then>
				<else><property name="@{name}" value="@{value}"/></else>
			</if>
		</sequential>
	</macrodef>
</project>