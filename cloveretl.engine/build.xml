<?xml version="1.0" encoding="us-ascii"?>
<project name="cloveretl.engine" default="build" basedir=".">
	
	<property environment="env"/>
	
	<property name="dir.tools" value="${basedir}/tools"/>		
	<property name="dir.findbugs" value="/opt/findbugs"/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="${dir.tools}/ant-contrib.jar"/>
	  </classpath>
	</taskdef>
	    	
	<!-- =========================== VERSIONs =========================== -->
	<property name="major_version" value="2"/>
	<property name="minor_version" value="4"/>
	<property name="revision_version" value="7"/>
	<tstamp>
		<format property="TODAY" pattern="dd/MM/yyyy HH:mm:ss" locale="en" />
	</tstamp>
	<property name="build.number" value="devel"/>
	
	<!-- =========================== DEFAULT DIRECTORIES =========================== -->
	<property name="dir.build-scripts" value="${basedir}/build-scripts"/>
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.test" value="${basedir}/test"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.docs" value="${basedir}/docs"/>
	<property name="dir.component.doc.default" value="${basedir}/src-doc"/>
	<property name="dir.examples" value="${basedir}examples"/>
		
	<property name="dir.build" value="${basedir}/build"/>
	<property name="dir.tmp" value="${dir.build}/__tmp"/>
	<property name="dir.bin" value="${dir.build}/classes"/>
	<property name="dir.classestest" value="${dir.build}/classes-test"/>
	<property name="dir.dist" value="${dir.build}/package"/>
	<property name="dir.doc" value="${dir.build}/javadoc"/>
	<property name="dir.distribution" value="${basedir}/dist"/>
	<property name="dir.src.improved" value="${dir.build}/src"/>
	<property name="dir.testsresult" value="${dir.build}/testsresult"/>
	<property name="dir.testsreport" value="${dir.build}/testsreport"/>
	<property name="dir.findbugsreport" value="${dir.build}/findbugsreport"/>
	<property name="dir.cobertura" value="${dir.tools}/cobertura" />
	<property name="dir.coverage.bin" value="${dir.build}/classes-coverage" />
	<property name="dir.coverage.plugins" value="${dir.build}/plugins-coverage" />
	<property name="dir.coverage.xml" value="${dir.build}/coveragereport/xml" />
	<property name="dir.coverage.html" value="${dir.build}/coveragereport/html" />
	<property name="cobertura.ser" value="${dir.build}/cobertura.ser"/>

	<!--load external properties-->
	<property file="build.properties"/>
		
	<path id="all.sources">
		<pathelement path="${dir.src}" />
		<pathelement path="../cloveretl.component/src" />
		<pathelement path="../cloveretl.connection/src" />
		<pathelement path="../cloveretl.sequence/src" />
		<pathelement path="../cloveretl.lookup/src" />
		<pathelement path="../cloveretl.thirdparty/src" />
		<pathelement path="../cloveretl.bulkloader/src" />
		<pathelement path="../cloveretl.tlfunction/src" />
	</path>
	
	<!-- =========================== LIBRARIES ============================= -->
	<fileset id="engine-libs" dir="${dir.lib}">
		<include name="**/*.jar"/>
	</fileset>

	<filterset id="versionFilter">
		<filter token="MAJOR_VERSION" value="${major_version}" />
		<filter token="MINOR_VERSION" value="${minor_version}" />
		<filter token="REVISION_VERSION" value="${revision_version}" />
		<filter token="BUILD_NUMBER" value="${build.number}" />
		<filter token="BUILD_TIME" value="${TODAY}" />
	</filterset>
		
	<path id="cp.cobertura">
	    <fileset dir="${dir.cobertura}">
	        <include name="*.jar" />
	    </fileset>
	</path>

	<taskdef classpathref="cp.cobertura" resource="tasks.properties" />	
	
		<!-- =========================== PUBLIC TARGETS ============================== -->
	<target name="build" depends="build-engine,build-plugins" description="Compiles sources and creates a JAR file">
	</target>
	
	<target name="clean" depends="clean-engine,clean-plugins" description="Delete old compiled files">
	</target>

	
	
	<!-- =========================== PRIVATE TARGETS ============================== -->
	
	<target name="build-engine" depends="compile,package">
	</target>
	
	<target name="build-plugins" depends="build-engine">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-build" param="plugin.dir"/>
	</target>
	
	<target name="plugin-build">
		<echo message="Building plugin - ${plugin.dir}"/>
		<ant dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="major_version" value="${major_version}"/>
			<property name="minor_version" value="${minor_version}"/>
			<property name="revision_version" value="${revision_version}"/>
		</ant>
	</target>

	<target name="clean-plugins">
		<foreach list="${plugin.list}" inheritall="true" target="plugin-clean" param="plugin.dir"/>
	</target>
	
	<target name="plugin-clean">
		<echo message="Cleaning plugin - ${plugin.dir}"/>
		<ant target="clean" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="major_version" value="${major_version}"/>
			<property name="minor_version" value="${minor_version}"/>
			<property name="revision_version" value="${revision_version}"/>
		</ant>
	</target>
				
	<target name="dist.src" description="Creates source distribution">
		<delete dir="${dir.tmp}"/>
		<mkdir dir="${dir.tmp}/cloverETL"/>
		
		<!-- call source target for all plugins -->
		<foreach list="${plugin.list}" inheritall="true" target="plugin.src" param="plugin.dir"/>

		<!-- copy source for engine itself -->
		<property name="src.distribution.dir.engine" value="${dir.tmp}/cloverETL/cloveretl.engine"/>

		<copy todir="${src.distribution.dir.engine}/src">
			<fileset dir="${dir.src}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/docs">
			<fileset dir="${dir.docs}" />
		</copy>
		
		<copy todir="${src.distribution.dir.engine}/lib">
			<fileset dir="${dir.lib}" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/plugins">
			<fileset dir="plugins" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/test">
			<fileset dir="test" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/data">
			<fileset dir="data" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/scripts">
			<fileset dir="scripts" />
		</copy>

		<copy todir="${src.distribution.dir.engine}">
			<fileset file="ant-contrib.jar" />
			<fileset file="build.xml" />
			<fileset file="build.properties" />
			<fileset file="plugin.xml" />
			<fileset file="readme.src.txt" />
			<fileset file="readme.bin.txt" />
		</copy>

		<copy todir="${src.distribution.dir.engine}/..">
			<fileset file="readme.src.txt" />
			<filterset refid="versionFilter"/>
		</copy>
		<move file="${src.distribution.dir.engine}/../readme.src.txt" tofile="${src.distribution.dir.engine}/../readme.txt"/>
		
		<!-- create zip package for source distribution -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL.src.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>

	<target name="plugin.src" description="Private target for copy source of plugin. Don't call direct.">
		<echo message="Copy source from plugin - ${plugin.dir}"/>
		<ant dir="${plugin.dir}" target="dist.src" inheritAll="false">
			<property name="dist.src" value="${basedir}/${dir.tmp}/cloverETL"/>
		</ant>
	</target>

	<target name="dist.bin" depends="build" description="Creates binary distribution">
		<delete dir="${dir.tmp}"/>
		
		<!-- binary distribution -->
		<mkdir dir="${dir.tmp}/cloverETL"/>

		<copy todir="${dir.tmp}/cloverETL">
			<fileset dir="${dir.dist}" />
		</copy>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>

	<target name="dist.examples" description="Creates examples distribution">
		<delete dir="${dir.tmp}"/>
		
		<!-- binary distribution -->
		<mkdir dir="${dir.tmp}/examples"/>

		<copy todir="${dir.tmp}/examples">
			<fileset dir="${dir.examples}" />
		</copy>

		<!-- create zip distribution package -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverExamples.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.tmp}"/>

		<delete dir="${dir.tmp}"/>
	</target>


	<!-- The "clean" target deletes previously compiled files. -->
	<target name="clean-engine">
		<delete dir="${dir.bin}"/>
		<delete dir="${dir.build}"/>
		<delete dir="${dir.dist}"/>
		<delete dir="${dir.distribution}"/>
		<delete dir="${dir.doc}"/>
		<delete dir="${dir.tmp}"/>
	</target>

	
	<!-- compile temp copy of source -->
	<target name="compile" depends="init,improve-java-sources" description="Compile sources">
		<!-- Create directory for binaries. -->
		<mkdir dir="${dir.bin}"/>
		
		<!-- Compile sources -->
		<javac debug="true" destdir="${dir.bin}" target="1.5" source="1.5" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<!--pathelement path="${commons-logging}"/>
				<pathelement path="${log4j}"/-->
				<fileset refid="engine-libs"/>			
			</classpath>
			<src path="${dir.src.improved}"/>
			<exclude name="test/**/*"/>
		</javac>
		
		<!-- copy resources -->
		<copy todir="${dir.bin}">
		    <fileset dir="${dir.src}">
			      <exclude name="**/*.java"/>
			      <exclude name="**/svn/**"/>
		    </fileset>
		  </copy>
		
	</target>

	<!-- pack binary result of compile to jar file -->
	<target name="package" depends="compile">
		<!-- Create directory for dist. -->
		<mkdir dir="${dir.dist}/lib"/>
		
		<jar destfile="${dir.dist}/lib/cloveretl.engine.jar" basedir="${dir.bin}">
			<include name="**/*"/>
			<exclude name="test/**/*"/>
		</jar>

		<!-- copy all libraries from lib directory -->
		<copy todir="${dir.dist}/lib">
			<fileset dir="${dir.lib}"/>
		</copy>

		<!-- copy engine's plugin.xml to the plugins directory -->
		<copy todir="${dir.dist}/plugins/org.jetel.engine">
			<fileset file="plugin.xml"/>
		</copy>

		<!-- copy all documents from docs directory -->
		<copy todir="${dir.dist}/docs">
			<fileset dir="${dir.docs}"/>
		</copy>

		<!-- copy the generated documentation of components from other plugins -->
		<!-- Commented out until the component documentation has correct content
		<copy todir="${dir.dist}/docs/components" overwrite="true">
			<fileset dir="${cloveretl.engine}/src-doc/components/html" includes="**"/>
		</copy>
		-->

		<!-- copy all run scripts -->
		<copy todir="${dir.dist}/bin">
			<fileset file="${basedir}/scripts/*"/>
		</copy>

		<!-- copy readme.txt -->
		<copy todir="${dir.dist}">
			<fileset file="${basedir}/readme.bin.txt"/>
			<filterset refid="versionFilter"/>
		</copy>
		<move file="${dir.dist}/readme.bin.txt" tofile="${dir.dist}/readme.txt"/>
		
	</target>
	
	<!-- make a temp copy of source - necessary to substitute release number constants in the source code -->
	<target name="improve-java-sources">
		<echo message="Copying source code.." />
		<copy todir="${dir.src.improved}">
			<fileset dir="${dir.src}" />
			<filterset refid="versionFilter"/>
		</copy>
	</target>
	
	
	<target name="generate-java-sources" description="Generate java sources by javaCC">
		<jjtree javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jjt" 
			outputdirectory="${dir.src}/org/jetel/interpreter/"/>
		
		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/interpreter/TransformLangParser.jj"/>
		
		<delete file="${dir.src}/org/jetel/interpreter/Node.java"/>
		
		<replace file="${dir.src}/org/jetel/interpreter/TransformLangParserVisitor.java">
			  <replacetoken><![CDATA[package org.jetel.interpreter;]]></replacetoken>
			  <replacevalue><![CDATA[package org.jetel.interpreter;

import org.jetel.interpreter.ASTnode.*;]]></replacevalue>
		</replace>
		
		<javacc javacchome="${dir.tools}" 
			target="${dir.src}/org/jetel/util/ddl2clover/DDL2Clover.jj"/>
	</target>
	
	<target name="javadoc" depends="init" description="Create Javadoc API documentation">
		<echo message="Building code documentation..." />
		<property name="dist.subdir" value="cloverETL/javadoc"/>
		<mkdir dir="${dir.doc}/${dist.subdir}" />
		<javadoc 
				destdir="${dir.doc}/${dist.subdir}" 
				packagenames="*"
				author="true" >
			<sourcepath refid="all.sources"/>
			<classpath>
				<fileset refid="engine-libs"/>
			</classpath>
			<doclet name="com.sun.tools.doclets.standard.Standard">
				<param name="-breakiterator" value="on" />
				<!-- Following tag definition is here to get rid of complains produced by standard doclet-->
				<param name="-tag" value="revision" />
			</doclet>
			<doctitle><![CDATA[<h1>CloverETL: Java ETL framework</h1><h3>version: ]]>${major_version}.${minor_version}<![CDATA[</h3>]]></doctitle>
			<bottom>
				<![CDATA[<address>Copyright &#169; 2002-2006 Javlin consulting s.r.o</address>]]>
			</bottom>
		</javadoc>

		<!-- create zip package for javadoc -->
		<mkdir dir="${dir.distribution}"/>
		<zip destfile="${dir.distribution}/cloverETL.javadoc.rel-${major_version}-${minor_version}-${revision_version}.zip" basedir="${dir.doc}"/>
	</target>
		
	<target name="generateDocContainer" description="Generates container XML, which contains docs from all components from all plugins">
		<delete file="${dir.component.doc.default}/components/ComponentDoc.xml"/>
		<xslt in="${dir.component.doc.default}/components/xsl/null.xml" out="${dir.component.doc.default}/components/ComponentDoc.xml"
			style="${dir.component.doc.default}/components/xsl/componentsContainer.xsl"/>
	</target>

	<target name="transformXMLDocs" depends="generateDocContainer" description="Convert the documentation of component from xml to html. 
		Display a warning if some of the sources is more recent than the XML description">
		
		<xslt in="${dir.component.doc.default}/components/xsl/TypesDoc.xml" out="${dir.component.doc.default}/components/html/TypesDoc.html"
			style="${dir.component.doc.default}/components/xsl/types.xsl"
		/>
				
		<xslt in="${dir.component.doc.default}/components/ComponentDoc.xml" out="${dir.component.doc.default}/components/html/ComponentsDoc.html"
			style="${dir.component.doc.default}/components/xsl/description.xsl"
		/>

	</target>

	<target name="init">
		<mkdir dir="${dir.build}"/>

		<echo message="Using directory for classes: ${dir.bin}"/> 
		<echo message="Using directory for javadoc: ${dir.doc}"/>
		<echo message="Using directory for dist: ${dir.dist}"/>
	</target>
	
	<target name="reports" depends="reporttests,findbugs-html,coverage-html">
	</target>
	
	<target name="reports-hudson" depends="reporttests,findbugs-xml,findbugs-html,coverage-html,coverage-xml,javadoc">
	</target>
	
	<target name="compile-tests" depends="init">
		<mkdir dir="${dir.classestest}"/>
		<javac debug="true" destdir="${dir.classestest}" target="1.5" source="1.5" encoding="UTF-8">
			<classpath>
				<pathelement path="${tools}"/>
				<fileset refid="engine-libs"/>
				<pathelement path="${dir.bin}"/>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
			</classpath>
			<src path="${dir.src.test}"/>
		</javac>
	</target>
	
	<target name="coverage-instrument" depends="coverage-instrument-engine,coverage-instrument-plugins">
	</target>
		
	<target name="coverage-instrument-engine" depends="compile">
		<cobertura-instrument todir="${dir.coverage.bin}" datafile="${cobertura.ser}">
            <fileset dir="${dir.bin}">
				<include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
	</target>
	
	<target name="coverage-instrument-plugins" depends="init">
		<mkdir dir="${dir.coverage.plugins}"/>
		<foreach list="${plugin.list}" inheritall="true" target="plugin-coverage-instrument" param="plugin.dir"/>
	</target>
	
	<target name="plugin-coverage-instrument">
		<echo message="Coverage instrument plugin - ${plugin.dir}"/>
		<ant target="coverage-instrument" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="dir.coverage.dist" value="${dir.coverage.plugins}"/>
			<property name="cobertura.ser" value="${cobertura.ser}"/>
			<property name="major_version" value="${major_version}"/>
			<property name="minor_version" value="${minor_version}"/>
			<property name="revision_version" value="${revision_version}"/>
		</ant>
	</target>

	<target name="runtests" depends="runtests-engine,runtests-plugins">
	</target>
	
	<target name="runtests-engine" depends="init,compile,compile-tests,coverage-instrument">
		<mkdir dir="${dir.testsresult}"/>
		<junit 
				haltonerror="false" 
				haltonfailure="false" 
				printsummary="true"
				fork="true"
				forkmode="once" 
				>
    		<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser}" />
    		<sysproperty key="file.encoding" value="UTF-8" />
			<env key="cloveretl.plugins" value="${dir.coverage.plugins}/plugins"/>
			<classpath>
			    <pathelement path="${dir.classestest}"/>
			    <pathelement path="${dir.coverage.bin}"/>
			    <pathelement path="${dir.bin}"/>
				<fileset dir="${dir.lib}">
					<include name="*.jar"/>
				</fileset>
			    <pathelement path="${dir.tools}/junit-4.4.jar"/>
    			<path refid="cp.cobertura"/>
			</classpath>
			<batchtest todir="${dir.testsresult}">
				<fileset dir="${dir.src.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
			<formatter type="plain"/>
			<formatter type="xml"/>
		</junit>
	</target>
	
	<target name="runtests-plugins" depends="compile-tests,coverage-instrument">
		<mkdir dir="${dir.coverage.plugins}"/>
		<foreach list="${plugin.list}" inheritall="true" target="runtests-plugin" param="plugin.dir"/>
	</target>
	
	<target name="runtests-plugin">
		<echo message="Runtests plugin - ${plugin.dir}"/>
		<ant target="runtests" dir="../${plugin.dir}" inheritAll="false" inheritrefs="false">
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="dir.coverage.dist" value="${dir.coverage.plugins}"/>
			<property name="dir.engine.classestest" value="${dir.classestest}"/>
			<property name="cobertura.ser" value="${cobertura.ser}"/>
			<property name="major_version" value="${major_version}"/>
			<property name="minor_version" value="${minor_version}"/>
			<property name="revision_version" value="${revision_version}"/>
		</ant>
	</target>
	
    <target name="reporttests" depends="runtests">
    	<mkdir dir="${dir.testsreport}"/>
    	<junitreport>
    		<fileset dir="${dir.testsresult}">
    			<include name="*.xml"/>
    		</fileset>
    		<report format="noframes" todir="${dir.testsreport}"/>
    	</junitreport>    	
    </target>
	
	<target name="findbugs-init">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		  <classpath>
		    <pathelement location="${dir.findbugs}/lib/findbugs-ant.jar"/>
		  </classpath>
		</taskdef>
	</target>
	
	<target name="findbugs-html" depends="init,findbugs-init,compile,compile-tests">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="html"
				outputfile="${dir.findbugsreport}/bugreport.html" 
				stylesheet="fancy-hist.xsl"
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max"
				reportlevel="low">
			<class location="${dir.bin}"/>
			<class location="${dir.classestest}"/>
			<sourcePath path="${dir.src}" />
			<sourcePath path="${dir.src.test}" />
		</findbugs>
	</target>
	
	<target name="findbugs-xml" depends="init,findbugs-init,compile">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="xml"
				outputfile="${dir.findbugsreport}/bugreport.xml" 
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max"
				reportlevel="low"
				jvmargs="-Xmx500m">
			<class location="${dir.bin}"/>
			<class location="${dir.classestest}"/>
			<sourcePath path="${dir.src}" />
			<sourcePath path="${dir.src.test}" />
		</findbugs>
	</target>
	
	<target name="coverage-html" depends="runtests">
   		<cobertura-report datafile="${cobertura.ser}" format="html" destdir="${dir.coverage.html}" srcdir="${dir.src}" />
	</target>
		
	<target name="coverage-xml" depends="runtests">
   		<cobertura-report datafile="${cobertura.ser}" format="xml" destdir="${dir.coverage.xml}" srcdir="${dir.src}" />
	</target>
		
</project>