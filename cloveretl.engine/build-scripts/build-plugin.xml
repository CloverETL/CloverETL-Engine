<?xml version="1.0" encoding="us-ascii"?>
<project name="cloveretl plugin" default="build" basedir=".">

	<!-- =========================== DEFAULT DIRECTORIES =========================== -->
	<basename property="plugin.name" file="${basedir}" />
	<propertyregex property="plugin.dir.name"
		input="${plugin.name}"
		regexp="cloveretl\.(.*)"
		select="org.jetel.\1" />

	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.test" value="${basedir}/test"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.doc" value="${basedir}/doc"/>
	<property name="dir.dist" value="${basedir}/dist"/>

	<property name="dir.engine" value="${basedir}/../cloveretl.engine"/>
	<property file="${dir.engine}/build.properties"/>		
	<property name="dir.engine.lib" value="${dir.engine}/lib"/>
	<property name="dir.engine.tools" value="${dir.engine}/tools"/>
	<property name="dir.cobertura" value="${dir.engine.tools}/cobertura" />
	<property name="dir.build-scripts" value="${dir.engine}/build-scripts"/>
	
	<property name="dir.build" value="${basedir}/build"/>
	<property name="dir.testsresult" value="${dir.build}/testsresult"/>
	<property name="dir.classes" value="${dir.build}/classes"/>
	<property name="dir.classestest" value="${dir.build}/classes-test"/>
	<property name="dir.coverage.classes" value="${dir.build}/classes-coverage"/>
	<property name="dir.src.improved" value="${dir.build}/src-improved"/>
	<property name="dir.findbugsreport" value="${dir.build}/findbugsreport"/>
	<property name="required.plugins.file" value="${dir.build}/required-plugins.txt"/>
	<property name="cobertura.ser" value="${dir.build}/plugin-cobertura.ser"/>

	<!--load external properties-->

	<!-- =========================== LIBRARIES ============================= -->
	<fileset id="engine-libs" dir="${dir.engine.lib}">
		<include name="**/*.jar"/>
	</fileset>

	<fileset id="engine-tools" dir="${dir.engine.tools}">
		<include name="**/*.jar"/>
	</fileset>

	<path id="cp.cobertura">
	    <fileset dir="${dir.cobertura}">
	        <include name="*.jar" />
	    </fileset>
	</path>

	<!-- =========================== TARGETS ============================== -->
	<target name="build" depends="compile,package" description="Compiles sources and creates a JAR file"/>

	<target name="init">

		<echo message="Using directory for classes: ${dir.classes}"/>
		<echo message="Using directory for javadoc: ${dir.doc}"/>
		<echo message="Using directory for dist: ${dir.dist}"/>

		<mkdir dir="${dir.build}"/>

		<if><available file="${dir.lib}"/>
			<then>
				<echo message="Plugin has own libraries in ${dir.engine.lib}"/>
				<!-- fileset plugin-libs contains all jar files in plugin lib directory, used while compile plugin -->
				<fileset id="plugin-libs" dir="${dir.lib}">
					<include name="**/*.jar"/>
				</fileset>
				<!-- fileset plugin-lib-files contains all files in plugin lib directory, may contain executables (e.g. cloveretl.bulkloader), used while package plugin -->
				<fileset id="plugin-lib-files" dir="${dir.lib}">
					<include name="**"/> 
				</fileset>
			</then>
			<else>
				<echo message="Plugin has no own library"/>
				<!-- define empty fileset -->
				<fileset id="plugin-libs" dir="${basedir}">
					<include name=""/>
				</fileset>
				<fileset id="plugin-lib-files" dir="${basedir}">
					<include name=""/>
				</fileset>
			</else>
		</if>
		
		<if><available file="${dir.src.test}"/>
			<then>
				<echo message="Plugin has tests in ${dir.src.test}"/>
				<property name="tests-available" value="true"/>
			</then>
			<else>
				<echo message="Plugin has no test"/>
			</else>
		</if>
	</target>

	<!-- make a temp copy of source - necessary for substitute release number constants in source code -->
	<target name="improve-java-sources" depends="">
		<copy todir="${dir.src.improved}" encoding="UTF-8">
			<fileset dir="${dir.src}" />
		</copy>
	</target>

	<target name="find-required-plugins" depends="init">
		<xslt 
			style="${dir.engine}/build-scripts/required-plugins.xsl"
			in="${basedir}/plugin.xml"
			out="${required.plugins.file}"
			>
			<param name="separator" expression=","/>
			<param name="dist" expression="${dir.dist}"/>
		</xslt>
		<property file="${required.plugins.file}"/>
		
		<property name="cp.compile" value="${dir.dist}${engine.dist}${required.plugins.dist}" />
		
		<echo>required.plugins=${required.plugins}</echo>
	</target>
	
	<target name="compile" depends="init,improve-java-sources,find-required-plugins" description="Compile sources">
		<!-- Create directory for binaries. -->
		<mkdir dir="${dir.classes}"/>

		<echo message="Compile classes from ${dir.src.improved} with classpath ${cp.compile}"/>
		<!-- Compile sources -->
		<javac 
				debug="true" 
				destdir="${dir.classes}"
				source="1.5"
				target="1.5"  
				encoding="UTF-8"
				classpath="${cp.compile}">
			<classpath>
				<fileset refid="plugin-libs"/>
				<fileset refid="engine-libs"/>
			</classpath>
			<src path="${dir.src.improved}"/>
		</javac>

		<!-- copy resources -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.src}">
				<exclude name="**/*.java" />
				<exclude name="**/svn/**" />
			</fileset>
		</copy>

	</target>

	<target name="plugin.xml" depends="init">
		<copy file="plugin.xml" tofile="${dir.build}/plugin.xml" encoding="UTF-8" />
		<replace file="${dir.build}/plugin.xml" encoding="UTF-8">
			<replacefilter token="0.0.0.devel" value="${version.full}"/>
		</replace>
	</target>
	
	<!-- pack binary result of compile to jar file -->
	<target name="package" depends="compile,plugin.xml">
		<!-- Create plugin directory. -->
		<mkdir dir="${dir.dist}/plugins/${plugin.dir.name}"/>

		<jar destfile="${dir.dist}/plugins/${plugin.dir.name}/${plugin.name}.jar" basedir="${dir.classes}">
			<include name="**/*"/>
		</jar>
		<!-- copy plugin manifest -->
		<copy file="${dir.build}/plugin.xml" todir="${dir.dist}/plugins/${plugin.dir.name}" />
		<replace file="${dir.dist}/plugins/${plugin.dir.name}/plugin.xml" token="&lt;library path=&quot;bin/&quot;/&gt;" value="&lt;library path=&quot;${plugin.name}.jar&quot;/&gt;" encoding="UTF-8"/>
		
		<!-- copy all libraries from lib directory -->
		<if><available file="${dir.lib}"/>
			<then>
				<copy todir="${dir.dist}/plugins/${plugin.dir.name}/lib">
					<fileset dir="${dir.lib}">
						<include name="**/*"/>
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="dist.src" depends="init" description="Creates source distribution">

		<copy todir="${dist.src}/${plugin.name}/src">
			<fileset dir="${dir.src}" />
		</copy>

		<copy todir="${dist.src}/${plugin.name}/lib">
			<fileset refid="plugin-lib-files"/>
		</copy>

		<copy todir="${dist.src}/${plugin.name}">
			<fileset file="build.xml" />
			<fileset file="plugin.xml" />
		</copy>
	</target>

	<target name="clean" depends="init" description="Delete previously build files">
		<delete dir="${dir.build}"/>
	</target>
	
	<target name="coverage-instrument" depends="package">
		<mkdir dir="${dir.coverage.classes}"/>

		<cobertura-instrument todir="${dir.coverage.classes}" datafile="${cobertura.ser}">
            <fileset dir="${dir.classes}">
				<include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
		
		<copy todir="${dir.coverage.dist}/plugins/${plugin.dir.name}/">
			<fileset dir="${dir.dist}/plugins/${plugin.dir.name}/"/>
		</copy>
		
		<jar destfile="${dir.coverage.dist}/plugins/${plugin.dir.name}/${plugin.name}.jar" basedir="${dir.coverage.classes}" update="true">
			<include name="**/*"/>
		</jar>

	</target>

	
	<target name="compile-tests" depends="find-required-plugins">
		<mkdir dir="${dir.classestest}"/>
		<if><isset property="tests-available"/><then>
			<echo>fileset dir="${dir.engine.classestest}"</echo>
			<javac 
					debug="true" 
					destdir="${dir.classestest}" 
					target="1.5" 
					source="1.5" 
					encoding="UTF-8"
					classpath="${cp.compile}">
				<classpath>
					<fileset refid="plugin-libs"/>
					<fileset refid="engine-libs"/>
					<fileset refid="engine-tools"/>
					<pathelement path="${dir.engine.classestest}"/>
					<pathelement path="${dir.classes}"/>
				</classpath>
				<src path="${dir.src.test}"/>
			</javac>
		</then></if>
	</target>
	
	<target name="runtests" depends="init,compile-tests" if="tests-available">
		<mkdir dir="${dir.testsresult}"/>
		<junit 
				haltonerror="false" 
				haltonfailure="false" 
				printsummary="true" 
				fork="true" 
				forkmode="once"
				dir="${basedir}"
				>
    		<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.ser}" />
    		<sysproperty key="file.encoding" value="UTF-8" />
			<env key="cloveretl.plugins" value="${dir.coverage.dist}/plugins"/>
			<classpath path="${cp.compile}">
				<pathelement path="${dir.classestest}"/>
				<pathelement path="${dir.engine.classestest}"/>
				<fileset dir="${dir.coverage.dist}/plugins/${plugin.dir.name}/">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${dir.engine.classestest}">
				</fileset>
				<fileset refid="plugin-libs"/>
				<fileset refid="engine-libs"/>
				<fileset refid="engine-tools"/>
    			<path refid="cp.cobertura"/>
			</classpath>
			<batchtest todir="${dir.testsresult}">
				<fileset dir="${dir.src.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
			<formatter type="plain"/>
			<formatter type="xml"/>
		</junit>

		<!--
		<cobertura-merge datafile="${all.cobertura.ser}">
		    <fileset dir="${dir.build}">
		        <include name="*cobertura.ser" />
		    </fileset>
		</cobertura-merge>
		-->
	</target>

	
	<target name="findbugs-init">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		  <classpath>
		    <pathelement location="${dir.findbugs}/lib/findbugs-ant.jar"/>
		  </classpath>
		</taskdef>
	</target>
	
	<target name="findbugs-xml" depends="init,findbugs-init,compile,compile-tests">
		<mkdir dir="${dir.findbugsreport}"/>
		<findbugs 
				home="${dir.findbugs}" 
				output="xml"
				outputfile="${dir.findbugsreport}/bugreport.xml" 
				excludeFilter="${dir.build-scripts}/findbugs-exclude.xml"
				effort="max"
				reportlevel="low"
				jvmargs="-Xmx500m">
			<class location="${dir.classes}"/>
			<class location="${dir.classestest}"/>
			<sourcePath path="${dir.src}" />
			<sourcePath path="${dir.src.test}" />
			<auxClasspath path="${cp.compile} "/>
			<auxClasspath path="${dir.engine.classestest}"/>
			<auxClasspath>
				<fileset refid="engine-libs"/>
				<fileset refid="plugin-libs"/>
				<fileset refid="engine-tools"/>
			</auxClasspath>
		</findbugs>
	</target>
	
</project>