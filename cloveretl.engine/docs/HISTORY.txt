*******************************************************************************
                          CLOVER ETL - HISTORY of RELEASES
*******************************************************************************

REL 2-4-0
---------
Changes/bug fixes:
+ sftp protocol support for readers which uses multifile reader
+ possibility of coping ByteDataField as BLOB
+ new implementation of "partition by range" feature with range lookup table usage 
+ field's unquoting before setting value by delimited and universal data parsers
+ the set of available functions in the Clover transformation language was extended
	 - string remove_blank_space(string );
	 - string get_alphanumeric_chars(string,boolean,boolean);
	 - string translate(string, string,string );
	 - string join(anytype,....);
	 - boolean is_long(string)
	 - integer index_of(string, string, integer)
+ some components have optional "rejected port(s)" (AproxMergeJoin, CheckForeignKey, DBJoin, 
	LookupJoin)
+ DBOutputTable can accept more query at once. New jetel-sql query syntax introduced.

REL 2-3-1 
---------
Release in particular repairing bugs from 2.3.0 version.

Changes/bug fixes:
+ fixed race condition occuring during multiple concurrent accesses to one lookup table.

REL 2-3-0 commercial purpose release
---------
+ new extension point for build-in JDBC drivers - a JDBC connection now can be defined also via
	identifier of a build-in JDBC driver instead direct parameters 'dbDriver' and 'driverLibrary'
+ new engine plugin - 'org.jetel.jdbc', which now contains only MySQL build-in JDBC driver
+ the Dedup compoment has new rejected port, where all duplicated records are resent
+ the set of available functions in the Clover transformation language was extended
	- boolean is_blank(string)
	- boolean is_ascii(string)
	- boolean is_number(string)
	- boolean is_integer(string)
	- boolean is_date(string)
	- boolean remove_diacritic(string)
+ the javolution library was updated to the version 5.1
+ the commons-logging library was updated to the version 1.1
+ the DBLookupTable has new parameter "storeNulls", which determines whether the internal cache will
	store also a 'null' database response
+ method DataField.copyFrom() is now deprecated - developers should use setValue(DataField) instead
+ added new component "DB2 Data Writer" - DB2 bulk loader
+ added new component "Informix Data Writer" - Informix bulk loader
+ added new component "MSSQL Data Writer" - SQL Server bulk loader
+ most of the readers are able to read direct from STDIN - use '-' character in fileURL parameter for this purpose
+ most of the writers are able to write direct to STDOUT - use '-' character in fileURL parameter for this purpose
+ usage of the 'Check foreign key' component was slightly changed - check documentation
+ DateDataField corresponds with three database types (DATE,TIME,TIMESTAMP) depending on format string:
	- format contains only date (GyMwWDdFE) symbols - DATE
	- format contains only time (aHhKkmsSzZ) symbols - TIME
	- format contains date and time symbols - TIMESTAMP
	- format is empty - TIMESTAMP

REL 2-2-1
---------
Release in particular repairing bugs from 2.2.0 version.

Changes/bug fixes:
+ the running scripts were renamed from 'run[.bat]' to 'clover[.bat]'
+ the default tracking interval was shorted to two seconds
+ in the DataGenerator component randomFields attribute can have inside minimal and maximal values these characters :;|
  a value has to be quated
+ the StringUtils class has new split method
+ the OracleDataWriter better handles a directory path with whitespaces
+ few other small fixes

REL 2-2-0
---------
Changes/bug fixes:
+ all read/write components have an uniform set of available attributes 
  (i.e. dataPolicy, skipFirstLine, skipRows, numRecords, ...)
+ The examples package - example graphs are now distributed as an 'easy to use' eclipse project
+ engine binary release has this slightly different directory structure
  - [cloverETL]
    - [bin]      run scripts
    - [docs]     documentation, licenses
    - [lib]      clover engine and other dependant libraries
    - [plugins]  clover engine plugins
+ new shell/bat scripts for easy clover execution are present in the [bin] directory
+ the documentation was moved to wiki page
+ new implementation of Aggregate component
+ new range lookup table was added to the lookup engine plugin
+ the DBOutputTable component now supports new output port for auto-generated keys from database;
  only MySQL and Oracle databases are supported
+ new XML reader based on xPath technology was added - XPathReader
+ the clover engine plugin framework was extended by new extension point for TL functions
  - most of the TL functions were externalized to the new engine plugin tlfunction
+ the field metadata has new attribute auto_filling
+ the clover transformation language increases usability - supports sequences, lookup tables, lists, maps ...

REL 2-1-3
---------
Release in particular repairing bugs from 2.1.2 version.

Changes/bug fixes:
+ fixes mainly in internal transformation language - isnull() method now process also numeric fields
  and switch command does not ignore last default branch

REL 2-1-2
---------
Release in particular repairing bugs from 2.1.1 version.

Changes/bug fixes:
+ DBOutputTable component now properly recognizes empty cloverField parameter
+ DataGenerator component publics its parameter setters
+ support for sequences and lookup tables was introduced into clover transformation language
+ simple sequence now returns valid current value

REL 2-1-1
---------
Release in particular repairing bugs from 2.1.0 version.

Changes/bug fixes:
+ fix in Clover Data Reader and Clover Data Writer components
+ phase edges now correctly clean up temporary files

REL 2-1-0
---------
Changes/bug fixes:
+ Added new component "Data Generator" - generator of synthetic/random data
+ Added new component "Lookup Table Reader/Writer" - reader/writer of records from/to lookup table
+ Added new component "Lookup Join" - joins incoming data with selected lookup table
+ Added new component "JMS Reader" - receives JMS-messages
+ Added new component "JMS Writer" - sends JMS-messages
+ Added new component "Normalizer" - normalizes input records
+ Added new component "Denormalizer" - denormalizes input records
+ Added new component "Structure writer" - record mask formatter
+ Added new connection "JMS connection" - connection related with JSMReader and JMSWriter
+ developers can use new method for engine initialization - runGraph.initEngine()
+ new approach in DataField.setToDefaultValue() method;
  in case the default value is not preset, engine tries to set the field value to null
+ DBConnection has new calling method order;
  new DBConnection(), init(), getConnection()/getStatement(), free() 
  (connect() method is now private - call init() method instead)
+ Extended LookupTable interface by put() and remove() methods
+ all GraphElement(s) should implement checkConfig() method; this method is used for
  checking engine element configuration; related changes of transformation graph startup
  are described in runGraph class comments
+ components (Node descendants) should not override direct run() method, instead 
  for this purpose was introduced new execute() method
+ WatchDog thread has new wide logging and inter-component communication facilities
+ Added new data field type cbyte (compressed byte array)
+ All join components are ready to satisfy more slave input data streams

REL 2-0-4
---------
Release in particular repairing bugs from 2.0.3 version.

Changes/bug fixes:
+ fix in transform language for optional assigning 
+ Clover data writer was fixed for incoming empty record set

REL 2-0-3
---------
Release in particular repairing bugs from 2.0.2 version.

Changes/bug fixes:
+ all factories for pluginable graph elements (ComponentFactory, ConnectionFactory, ...)
  now are able to create instances by passing constructor parameters
+ all components with record transformation class (Reformat, HashJoin, ...)
  have a new contructor for direct supplying RecordTransform class

REL 2-0-2
---------
Release in particular repairing bugs from 2.0.1 version.

Changes/bug fixes:
+ SQL utils/library better cooperate with ByteDataField
+ All <GraphElement>Factories can recognize type attribute as full class specification
+ Added new attribute sqlStatementDelimiter in DBExecute component
+ Extended LookupTable interface by put() and remove() methods

REL 2-0-1
---------
Changes/bug fixes:
+ Added new component "Oracle Data Writer" - oracle bulk loader
+ Added new component "MySQL Data Writer" - mysql bulk loader
+ Added new component "Clover Data Reader" - data reader for Clover internal format
+ Added new component "Clover Data Writer" - data writer for Clover internal format
+ Added new component "LDAP Reader" - data extractor from LDAP directory
+ Added new component "LDAP Writer" - data loader to LDAP directory
+ Added new component "XLS Reader" - excel sheets reader
+ Added new component "XLS Writer" - excel sheets writer
+ DelimitedDataReader and FixLenDataReader can read from multifile specified by wildcard patterns
+ FixLenDataParser has two different reading mode - byte and char mode
+ XMLExtract now operates with multifield keys and generated key by sequence

REL 2-0-0
---------
Changes/bug fixes:
+ CloverETL now requires Java 1.5 (or higher) to run
+ New plugging system introduced (see CloverETL web site, documentation section) - all components,
connections, lookups, sequences are now implemented as independent plug-ins of CloverETL
+ Behaviour of setNull() method on DataField(s) is changed - may result in calling setDefault()
depending on nullability flag
+ ByteDataField should now be working (many bugs have been fixed)
+ Transformation language has been greatly extended and thoroughly tested
+ Aggregate component now supports two more "aggregation functions" (CRC32 and MD5)
+ CloverETL now distingushes between "core" components developed by CloverETL team and third
party contributions - they are kept in separate "project"
+ BadDataFormatException hangling has been reworked - see the source code for more info 
+ Encryption of passwords in db connections has been reworked - see org.jetel.main.runGraph JavaDoc
for new command-line option
+ StringDataField now uses StringBuilder class to store its value
+ "old" FixLenDataParser has been replaced by two new parsers - FixLenCharDataParser/FixLenByteDataParser

Note: for additional changes between "old" 1.x and "new" 2.x versions see documentation
bundled with source code package.

REL 1-9-0
-------------
Changes/bug fixes:
+ Removed Singleton pattern from TransformationGraph class - Clover now supports unlimited
graphs within single JVM instance
+ Added DataReader/DataWriter - universal readers/writers of text files - support
mixture of delimtied&fix-len fields, able to survive errors in data
+ Added Transformation language - full-fledge programming language focused on creating
data transformations (supported by Reformat, all joiners, DataIntersection components) -
warning - this is still very untested. Examples will follow. 
+ Added option "fastPropagate" to Edge - allows fast propagation of records between
components connected by such edge - different kind of buffering involved when reader
can read data just after they are sent by writer. Normally, reader waits till writer
fills-in the buffer fully.


REL 1-8-3
---------
Changes/bug fixes:

+ loading definition of custom transformaton components in org.jetel.main.runGraph()
  (added option to load/register additional transformation components)
+ fixed bug in fromXML() method which caused "Can't find <SQLCode> node !" error in graphs developed in GUI
+ set equalNulls parameter of dedup component to be true as default.
+ DBConnection now supports drivers consisting of multiple Java libraries
  (added option to specify more than one library when loading JDBC driver  - in connection definitions (driverLibrary) )
+ re-tested and fixed many problems in org.jetel.data.DecimalDataField and related classes
+ fixed hasData() method in DirectEdge implementation which sometimes caused component hang-on
+ fixed missing close() call on output stream in Trash component when output was directed to file


REL 1-8-2
---------
Changes/bug fixes:
+ fixed FixLenDataParser2 which was discarding all records
+ fixed CopySQLData.CopyDate when used with Oracle 10 driver (DBOutputTable component) 
+ fixed	DBInputTable when used with DB2 JDBC driver - now calling commit() on result set (applies to all DBs)


REL 1-8-1
---------
Changes/bug fixes:
+ fixed DirectEdge problem which caused component hang-up
+ fixed DelimitedReaderNIO problem when reading UTF-8 encoding (and other multi-byte character encodings)
+ improved reporting of parsing errors for DelimitedDataReaderNIO and FixLenDataReader


REL 1-8-0
---------
The version numbering has changed. Starting with this version (1.8.0), the third part of version
number will be used to distinguish bug-fixes between regular versions - if such release is needed.
Second part is used to distinguish regular releases. First part of the number (e.g. 1) is changed when
substantial architecture change was made.

New features:
+new implementation of DirectEdge (the most common connection between components)
brings substantial improvement in performance - especially on SMP systems
+new data type - Decimal - implemented. It brings really big numbers to Clover.
+Clover implements its own  "primitive" numeric data types - Integer, Long, Double
which allow (in contrary to Java's own) modifications of stored values
+Reformat,HashJoin and MergeJoin components now support definition of mappings
written in form of enhanced Java syntax  

Changes:
+CodeParser has been updated to handle preprocessing of embedded "Clover" code in Java
source code

REL 1-1-7
---------
New features:
+added NVL() function to internal language used by filter component
+added JetelVersion class (in org.jetel.util) with several
static methods (and vars) which can be used to get info about library
version, build number, time of assembly, etc.
+added option to use encrypted passwords in JDBC config files
+all components now accept XML definition of parameters as XML attributes
or inner XML nodes
+framework Defaults (org.jetel.data.Defaults) are now set/configured through
defaultProperties file (in org/jetel/ directory of the binary package). It is no more
needed to recompile the whole package if (for example) the maximum size of data record
needs to be changed. Just edit the "defaultProperties" file.
+component factory is now configured through "components.xml" definition file. User
components can now easily be added through modifying this file and specifying component's
ID and class name.
+when defining graph layout and parameters for components in form of XML file, component parametes
previously accepted only as XML nodes' attributes can be now defined in form of "child" nodes too.
This is useful for long definitions or multiline parameters.


Changes:
+information messages & debugging messages are now output through
Jakarta's CommonsLogging means - they are not sent directly to console any more.
+fixed DelimitedDataFormatter - to properly handle OneRecordPerLine policy on differnet
OS (CR&LF issue on Windows, Unix)
+fixed skipLeadingBlanks at FixLenDataParser
+refactored interface org.jetel.data.Number to org.jetel.data.Numeric - Number collided with
java.lang.Number class
+Reformat component now supports multiple output ports connected. Appropriate transformation
class has to be provided by user.
+Dedup component now offers selecting unique only data records - those records for which
there were no duplicates found.


REL 1-1-6
---------
New features:
+Sequences - definition of interface and implementation of simple sequence with
persistent value.
+Parameters defined (parameter files referenced) from within graph's XML definition 
+Long datatype - represents signed 64bit integer
+Number interface - interface with methods to get/set/compare int,double,long values of
data fields representing numeric value
+XML definition of graph's layout can now contain definition of properties (parameters).
They may be defined directly in graph or loaded-in from external files - see JavaDoc
for TransformationGraphXMLReaderWriter class.

Changes:
+DBInputTable now allows to specify fetchSize when reading data from database
+Filter now accepts (copies to output port 0) all records for which the filterExpression evaluates TRUE
(the same behaviour as ExtFilter)
+DBOutputTable - if maxErrors parameter is set to -1, all SQL errors are ignored.
+DataRecord now implements Comparable interface. However, compareTo() method can be used
only to compare records based on the same metadata object
+Removed package org.jetel.test from clover's engine and put into clover examples package
+Removed clover org.jetel.gui - long abandoned code
+runGraph() method is now covered by LGPL license

REL 1-1-5
---------
New features:
+DBInputTable,DBOutputTable,DBExecute now support loading SQL queries
from external file - use "url" attribute. File can be accessed locally or
through FTP or HTTP protocol - whatever is specified in "url".
+RecordTransform interface now includes "finished()" method. Called
when particual Node (e.g. Reformat, MergeJoin,..)finishes transforming data.
+DataRecordTransform class has been updated to reflect changes in RecordTransform
interface.

REL 1-1-5pre
----------
New features:
+Partition component - partition data using one of following algorithms -
(Round-Robin,Hash,Range)
+DataIntersect component - joins two data flows (A & B) and outputs records only
in A to port 0, records both in A&B to port 1 and records in B only to port 2.
+extra XML attributes defined for components performing reformats (Reformat, HasJoin, MergeJoin)
are now passed into transformation function as properties - can be used for parameterizing
transformation functions


Changes:
+enhanced MERGE_JOIN component to support full outer join.
+introduced code which detect potential deadlocks between components in graph and changes
direct-edge to buffered-edge.
+transformation graph now registeres all DataRecord metadata defined (by their IDs) and offers
later retrieval of such metadata - good when using lookups which require metadata.
+SQLDataParser supports (again) setting of fetch size, also improved reporting of possible
parsing errors
+changed definition of LookupTable interface, also updated SimpleLookupTable & DBLookupTable
+changed RecordTransform interface
+DataRecordTransform helper class has been updated to reflect changes in RecordTransform interface

REL 1-1-4
------------
The same functionality as 1-1-4pre1.

REL 1-1-4pre1
-------------
New features:
+ new ExtSort component has been added. It performs external sorting (on-disk sorting)
if input data file is too big to fit into available memory.
Changes:
+ added/extended toString() methods to DataRecord,DataRecordMetadata
+ changed size specifier when (de)serializing StringDataField from
int to short -> saves two bytes on each serialized field which speeds up
processing. However, poses the limit that string can be max 32K chars long.
+ added duplicate() method to DataRecord and all field classes. It
makes duplicating (making copies) of existing records easier and much faster
(it doesn't perform several checkings which are not neccessary in this context).
Creates new object.
+ added copyFrom() method to DataRecord and all field classes. Enables faster
copying of content of one record into another. Does not create new object.


REL 1-1-3a
----------
Changes:
+ BufferedEdge has been rolled back to version 1.1.1 since the version
from rel 1.1.3 turned out to be buggy.
+ DirectEdge has been reworked and tuned. It should be also better tested now.

REL 1-1-3
---------
New features:
+ extended metadata of locale support. Data & Numeric fields
now can have locale specified. It can be used alone or combined
with format string to specify how the value is going to be formated
when printed as String or what is the expected format of the data in text form
(for parsing).
+ DBOutputTable sends records rejected by DB to output port 0 (if connected). This
can be used for capturing rejected records. Does not work well in Batch insert/update
mode.
+ Metadata describing data flows can now be directly embedded into graph definition
file. 
+ When specifying where to look for file containing metadata in XML 
form, fileURL can now reference HTTP or FTP server (previously only FILE was accepted). 
This allows for centralized metadata stored on central server.
+ Metadata can now be extracted directly from database based on SQL query. This
allows for dynamic unloading of database tables without the need to create
metadata definition file upfront.
+ ExtFilter's expression language has been extended by datediff() function.

Changes:
+Updates to fatal error reporting of org.jetel.main.runGraph utility. Unless verbose
mode is specified, only error message is displayed without stack trace info.

REL 1-1-2
---------
New features:
+ extended ExtFilter - org.jetel.interpreter has been
extended, it now supports arithmetic operations and
has several built-in functions.

Changes:
+ added several new "macros" to org.jetel.data.GetVal

REL 1-1-1
---------
New features:
+ added DBF data/database reader. It comes with DBFAnalyze utility
which reads in DBF table and produces Clover metadata describing the
record structure. See examples (graphDBFRead) for illustration how it works.
+ created ExtFilter component which somehow resembles "old" Filter
with several enhancements (supports logical operators AND,OR,NOT,
braces, etc.)
+ created org.jetel.interpreter package - currently, code
supporting ExtFilter is there. This should become base
for Clover's internal transformation language interpreter.
+ for all data fields types, own hashCode() method implemented.

Changes:
+ All components which work on stream of records now contain yield() call (wihin
their main processing loop. This should improve thread scheduling and consequently
help improve data flow throughout the graph.
+ introduced checking of name validity for Nodes (all components), Edges,
Records, Fields. Allowed characters are [A-Za-z0-9_]. This is due to
planned future enhancements. Up to this version, was no particular constraint.
+ rearranged/refactored packages & classes. All data parsers (for textual data)
are now int org.jetel.data.parser. All data formatters (for textual data) are in
org.jetel.data.formatter. Also lookups have been moved to separate package -
org.jetel.data.lookup.
+ Extended interface definition RecordTransform to support variety of transformation
components. Use DataRecordTransform (in org.jetel.component package) class as a base
class for your custom transformations.
It allows you to omit implementation of many methods from RecordTransform interface
which are not used/called most of the time but have to be provided.
+ created new package org.jetel.data.lookup - base for consolidating
lookup tables support (old lookup tables have been put there). New
interface LookupTable has been created.
+ updated compareTo() methods for all data objects (NumericDataField,
StringDataField, etc.) to support comparison with various object types.
+ FixLenDataParser2 has been updated to support line separators (when fix-len
record is delimited by new-line character(s))
+ components FixLenDataReaderNIO,FixLenDataWriterNIO have been enhanced
to allow specifying of which character(s) is used to separate
record on line - if required.


REL 1-1-0
---------
New features:
+ change of lincese from GPL to LGPL
+ enhanced DBOutputTable to allow for hand-written SQL/DML statements - this
should give 100% flexibility when populating target DB table
+ improved CopySQL primitives to cope with basic datatype conversions - integer->decimal,
date->datetime, etc. - it regards to Clover-DB interaction
+ graph layouts (component attributes) can now reference globally defined
properties (through ${...property name...} ). These references are resolved
when materializing componets/metadata.
+ added handling of NULLs when copying data to/from Database 
for fields (String, Date, Integer, Numeric);
+ for components requiring transformation classes to be specified (e.g. Reformat,Joins..),
the possibility to embed the Java source into XML text defining graph layout is possible. The source
code gets automatically compiled. When the graph is executed multiple times, it is
checked whether the source code changed and if not, compilation is skipped.

Bugs corrected:
+ fixed bug in CopyDate class (CopySQLData) when copying/setting DATE filed - thanks to Khelfa Mohamed


REL 1-0-8
---------
New features:
+ updated DBOutputTable component to support selective source2target fields
mapping - attribute cloverFields added.
+ updated DBOutputTable to support batch updates
+ updated Sort component to support lexicographics sorting & normal sorting
+ created new component - HashJoin.
+ created new class HashKey (used for building hash tables of DataRecords)
+ created new class RecordComparator to be used for sorting DataRecords
+ added Java Properties for DataRecordMetadata and DataFieldMetadata
+ new component CheckForeignKey added - contributed by Stewart Jeacocke
+ altered Filter component to send rejected records to second output port
  (if connected)

Bugs corrected:
+ fixed problem in DataRecordMetadataXMLReaderWriter - part writing XML was wrongly
outputting format string for defaultValue attribute.

