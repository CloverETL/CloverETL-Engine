/*
*    jETeL/Clover - Java based ETL application framework.
*    Copyright (C) 2002-04  David Pavlis <david_pavlis@hotmail.com>
*    
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*    
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    
*    Lesser General Public License for more details.
*    
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
*/
package org.jetel.connection.jdbc.specific;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.jetel.connection.jdbc.DBConnection;
import org.jetel.connection.jdbc.driver.JdbcDriver;
import org.jetel.exception.JetelException;
import org.jetel.metadata.DataFieldMetadata;
import org.jetel.util.string.StringUtils;

abstract public class AbstractJdbcSpecific implements JdbcSpecific {

	private final static int DEFAULT_FETCH_SIZE = 50;

	private AutoGeneratedKeysType autoGeneratedKeysType;
	
	public AbstractJdbcSpecific(AutoGeneratedKeysType autoGeneratedKeysType) {
		this.autoGeneratedKeysType = autoGeneratedKeysType;
	}

	protected Connection createDefaultConnection(DBConnection dbConnection) throws JetelException {
		JdbcDriver jdbcDriver = dbConnection.getJdbcDriver();
		Driver driver = jdbcDriver.getDriver();
		Connection connection;
		
        try {
            connection = driver.connect(dbConnection.getDbUrl(), dbConnection.createConnectionProperties());

//TODO move this code to the initiate's project
//            // unlock initiatesystems driver
//            try {
//                Class embeddedConClass;
//                if (classLoader == null) {
//                    embeddedConClass = Class.forName(EMBEDDED_UNLOCK_CLASS);
//                } else {
//                    embeddedConClass = Class.forName(EMBEDDED_UNLOCK_CLASS, true, classLoader);
//                }
//                if (embeddedConClass != null) {
//                    if(embeddedConClass.isInstance(dbConnection)) {
//                            java.lang.reflect.Method unlockMethod = 
//                                embeddedConClass.getMethod("unlock", new Class[] { String.class});
//                            unlockMethod.invoke(dbConnection, new Object[] { "INITIATESYSTEMSINCJDBCPW" });
//                    }
//                }
//            } catch (Exception ex) {
//            }
        } catch (SQLException ex) {
            throw new JetelException("Can't connect to DB.", ex);
        }
        if (dbConnection == null) {
            throw new JetelException("Not suitable driver for specified DB URL (" + driver + " / " + dbConnection.getDbUrl());
        }
//        // try to set Transaction isolation level, it it was specified
//        if (config.containsKey(TRANSACTION_ISOLATION_PROPERTY_NAME)) {
//            int trLevel;
//            String isolationLevel = config.getProperty(TRANSACTION_ISOLATION_PROPERTY_NAME);
//            if (isolationLevel.equalsIgnoreCase("READ_UNCOMMITTED")) {
//                trLevel = Connection.TRANSACTION_READ_UNCOMMITTED;
//            } else if (isolationLevel.equalsIgnoreCase("READ_COMMITTED")) {
//                trLevel = Connection.TRANSACTION_READ_COMMITTED;
//            } else if (isolationLevel.equalsIgnoreCase("REPEATABLE_READ")) {
//                trLevel = Connection.TRANSACTION_REPEATABLE_READ;
//            } else if (isolationLevel.equalsIgnoreCase("SERIALIZABLE")) {
//                trLevel = Connection.TRANSACTION_SERIALIZABLE;
//            } else {
//                trLevel = Connection.TRANSACTION_NONE;
//            }
//            try {
//                connection.setTransactionIsolation(trLevel);
//            } catch (SQLException ex) {
//                // we do nothing, if anything goes wrong, we just
//                // leave whatever was the default
//            }
//        }
        // DEBUG logger.debug("DBConenction (" + getId() +") finishes connect function to the database at " + simpleDateFormat.format(new Date()));
        
        return connection;
	}
	
	abstract public Connection createSQLConnection(OperationType operation, DBConnection dbConnection) throws JetelException;

	public AutoGeneratedKeysType getAutoKeyType() {
		return autoGeneratedKeysType;
	}

	public void optimizeResultSet(ResultSet resultSet, OperationType operationType) {
		switch (operationType){
		case READ:
			try {
				resultSet.setFetchDirection(ResultSet.FETCH_FORWARD);
				resultSet.setFetchSize(DEFAULT_FETCH_SIZE);
			} catch(SQLException ex) {
				//TODO: for now, do nothing
			}
		}
	}

	public int jetelType2sql(DataFieldMetadata field){
		switch (field.getType()) {
		case DataFieldMetadata.INTEGER_FIELD:
			return Types.INTEGER;
		case DataFieldMetadata.NUMERIC_FIELD:
			return Types.NUMERIC;
		case DataFieldMetadata.STRING_FIELD:
			return Types.VARCHAR;
		case DataFieldMetadata.DATE_FIELD:
			boolean isDate = field.isDateFormat();
			boolean isTime = field.isTimeFormat();
			if (isDate && isTime || StringUtils.isEmpty(field.getFormatStr())) 
				return Types.TIMESTAMP;
			if (isDate)
				return Types.DATE;
			if (isTime)
				return Types.TIME;
			return Types.TIMESTAMP;
        case DataFieldMetadata.LONG_FIELD:
            return Types.BIGINT;
        case DataFieldMetadata.DECIMAL_FIELD:
            return Types.DECIMAL;
        case DataFieldMetadata.BYTE_FIELD:
        case DataFieldMetadata.BYTE_FIELD_COMPRESSED:
        	if (!StringUtils.isEmpty(field.getFormatStr())
					&& field.getFormatStr().equalsIgnoreCase(DataFieldMetadata.BLOB_FORMAT_STRING)) {
        		return Types.BLOB;
        	}
            return Types.BINARY;
        case DataFieldMetadata.BOOLEAN_FIELD:
        	return Types.BOOLEAN;
		default:
			throw new IllegalArgumentException("Can't handle Clover's data type :"+field.getTypeAsString());
		}
	}
	
	
	public char sqlType2jetel(int sqlType) {
		switch (sqlType) {
			case Types.INTEGER:
			case Types.SMALLINT:
			case Types.TINYINT:
			    return DataFieldMetadata.INTEGER_FIELD;
			//-------------------
			case Types.BIGINT:
			    return DataFieldMetadata.LONG_FIELD;
			//-------------------
			case Types.DECIMAL:
			case Types.NUMERIC:
				return DataFieldMetadata.DECIMAL_FIELD;
			case Types.DOUBLE:
			case Types.FLOAT:
			case Types.REAL:
				return DataFieldMetadata.NUMERIC_FIELD;
			//------------------
			case Types.CHAR:
			case Types.LONGVARCHAR:
			case Types.VARCHAR:
			case Types.CLOB:
				return DataFieldMetadata.STRING_FIELD;
			//------------------
			case Types.DATE:
			case Types.TIME:
			case Types.TIMESTAMP:
				return DataFieldMetadata.DATE_FIELD;
            //-----------------
            case Types.BINARY:
            case Types.VARBINARY:
            case Types.LONGVARBINARY:
            case Types.BLOB:
			case Types.OTHER:
                return DataFieldMetadata.BYTE_FIELD;
			//-----------------
			case Types.BOOLEAN:
				return DataFieldMetadata.BOOLEAN_FIELD;
			// proximity assignment
			case Types.BIT:
				return DataFieldMetadata.STRING_FIELD;
			default:
				throw new IllegalArgumentException("Can't handle JDBC.Type :"+sqlType);
		}
	}

}
