package org.jetel.connection.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.jetel.connection.jdbc.config.JdbcBaseConfig;
import org.jetel.connection.jdbc.config.JdbcBaseConfig.AutoGeneratedKeysType;
import org.jetel.connection.jdbc.config.JdbcBaseConfig.OperationType;
import org.jetel.data.DataField;
import org.jetel.data.DataRecord;
import org.jetel.data.RecordKey;
import org.jetel.metadata.DataRecordMetadata;
import org.jetel.util.string.StringUtils;

/**
 * Class for filling output record by keys got from database.
 * 
 * @author avackova (agata.vackova@javlinconsulting.cz) ; 
 * (c) JavlinConsulting s.r.o.
 *  www.javlinconsulting.cz
 *
 * @since Jun 13, 2007
 *
 */
public class AutoKeyGenerator{
	
	protected Connection connection;
	protected JdbcBaseConfig connectionConfig;
	protected String sqlQuery;
	protected String[] columns;
	protected String[] fillFields;
	protected Log logger;
	protected AutoGeneratedKeysType autoKeyType = AutoGeneratedKeysType.NONE;
	private DataRecord keyRecord;
	private CopySQLData[] keyTransMap;
	private int[][] fieldMap;

	public final static String AUTOGENERATED_FIELD_NAME = "AUTO_GENERATED";

	private final static int KEY_RECORD_INDEX = 0;
	private final static int IN_RECORD_INDEX = 1;

	/**
	 * @param connection connection to database
	 * @param sqlQuery sql query
	 * @param columns list of columns to return
	 */
	AutoKeyGenerator(Connection connection, JdbcBaseConfig connectionConfig, String sqlQuery, String[] columns) {
		this.connection = connection;
		this.sqlQuery = sqlQuery;
		this.columns = columns;
		this.connectionConfig = connectionConfig;
	} 
	
	/**
	 * Prepares statement from which autogeneratedKeys will be taken.
	 * 
	 * @return
	 * @throws SQLException
	 */
	public PreparedStatement prepareStatement() throws SQLException{
		connectionConfig.optimizeConnection(connection, OperationType.WRITE);
		PreparedStatement statement;
		if (columns != null) {
			statement  = connectionConfig.createPreparedStatement(connection, sqlQuery, columns);
			//autoKeyType will be changed only if statement was prepared successfully and we want back autogenerated columns
			autoKeyType = connectionConfig.getAutoKeyType();
		}else{
			statement = connectionConfig.createPreparedStatement(connection, sqlQuery, OperationType.WRITE);
		}
		connectionConfig.optimizeStatement(statement, OperationType.WRITE);
		return statement;
	}
	
	public PreparedStatement reset() throws SQLException{
		return prepareStatement();
	}
	
	/**
	 * Fills keyRecord by values from input record and result set 
	 * 
	 * @param inRecord input record
	 * @param keyRecord key record to fill
	 * @param autogeneratedKeys result set with autogenerated keys (preparedStatement.getGeneratedKeys())
	 * @return
	 * @throws SQLException
	 */
	public DataRecord fillKeyRecord(DataRecord inRecord, DataRecord keyRecord, 
			ResultSet autogeneratedKeys) throws SQLException{
		if (this.keyRecord == null) {
			this.keyRecord = keyRecord;
			init(inRecord.getMetadata());
		}
		switch (autoKeyType) {
		case MULTI:
			return fillMultiKeyRecord(inRecord, keyRecord, autogeneratedKeys);
		case SINGLE:
			return fillSingleKeyRecord(inRecord, keyRecord, autogeneratedKeys);
		default:
			return keyRecord;
		}
	}
	
	private void init(DataRecordMetadata inRecordMetadata){
		switch (autoKeyType) {
		case MULTI:
			if (fillFields != null) {
				RecordKey tmp = new RecordKey(fillFields, keyRecord.getMetadata());
				tmp.init();
				keyTransMap = CopySQLData.sql2JetelTransMap(SQLUtil.getFieldTypes(tmp.generateKeyRecordMetadata(), connectionConfig), 
						keyRecord.getMetadata(), keyRecord, fillFields);
			}else {
				keyTransMap = CopySQLData.sql2JetelTransMap(SQLUtil.getFieldTypes(keyRecord.getMetadata(), connectionConfig), 
						keyRecord.getMetadata(), keyRecord);
			}
			break;
		case SINGLE:
			fieldMap = fieldMap(inRecordMetadata, keyRecord, columns);
			break;
		default:
			break;
		}
	}
	
	private DataRecord fillMultiKeyRecord(DataRecord inRecord, DataRecord keyRecord, 
			ResultSet autogeneratedKeys) throws SQLException{
		for (int i = 0; i < keyTransMap.length; i++) {
			keyTransMap[i].sql2jetel(autogeneratedKeys);
		}
		return this.keyRecord;
	}
	
	private DataRecord fillSingleKeyRecord(DataRecord inRecord, DataRecord keyRecord, 
			ResultSet autogeneratedKeys) throws SQLException{
		DataField field;
		for (int i=0; i<fieldMap.length; i++) {
			field = keyRecord.getField(fieldMap[i][KEY_RECORD_INDEX]);
			if (fieldMap[i][IN_RECORD_INDEX] == -1){
				field.setValue(autogeneratedKeys.getLong(1));
			}else{
				field.setValue(inRecord.getField(fieldMap[i][IN_RECORD_INDEX]));
			}
		}
		return keyRecord;
		
	}

	/**
	 * Prepares array of integers for mapping input record to key record.
	 * Number greater from -1 is index of input field to get value. 
	 * -1 means that, value will be got from result set.
	 * 
	 * @param inRecord
	 * @param keyRecord
	 * @param autoGeneratedColumns
	 * @return
	 */
	private int[][] fieldMap(DataRecordMetadata inRecordMetadata, DataRecord keyRecord, String[] autoGeneratedColumns) {
		int[][] result = fillFields != null ? new int[fillFields.length][2] : new int[keyRecord.getNumFields()][2];
		
		Map<String, Integer> inFieldsMap = inRecordMetadata.getFieldNames();
		for (int i = 0; i < result.length; i++) {
			result[i][KEY_RECORD_INDEX] = fillFields != null ? 
					keyRecord.getMetadata().getFieldPosition(fillFields[i]) : i;
			if (autoGeneratedColumns[i].equalsIgnoreCase(AUTOGENERATED_FIELD_NAME)) {
				result[i][IN_RECORD_INDEX] = -1;
			}else if (inFieldsMap.containsKey(autoGeneratedColumns[i])){
				result[i][IN_RECORD_INDEX] = inFieldsMap.get(autoGeneratedColumns[i]);
			}else{
				throw new IllegalArgumentException("Field " + StringUtils.quote(autoGeneratedColumns[i]) + " doesn't exist in input metadata");
			}
		}
		return result;
	}

	public Log getLogger() {
		return logger;
	}

	public void setLogger(Log logger) {
		this.logger = logger;
	}

	String[] getFillFields() {
		return fillFields;
	}

	void setFillFields(String[] fillFields) {
		this.fillFields = fillFields;
	}

	public AutoGeneratedKeysType getAutoKeyType() {
		return autoKeyType;
	}

	public JdbcBaseConfig getConnectionConfig() {
		return connectionConfig;
	}

}
