/*
 *    jETeL/Clover - Java based ETL application framework.
 *    Copyright (C) 2004-08 Javlin Consulting <info@javlinconsulting.cz>
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */


package org.jetel.connection.jdbc.config;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import org.jetel.metadata.DataFieldMetadata;
import org.jetel.util.string.StringUtils;

/**
 * @author Agata Vackova (agata.vackova@javlinconsulting.cz) ; 
 * (c) JavlinConsulting s.r.o.
 *  www.javlinconsulting.cz
 *
 * @since Apr 8, 2008
 *
 */

public class JdbcDb2Config  extends JdbcBaseConfig {
	
	private static JdbcDb2Config instance = new JdbcDb2Config(AutoGeneratedKeysType.MULTI);
	
	private JdbcDb2Config(AutoGeneratedKeysType multi) {
		super(multi);
	}

	public static JdbcDb2Config getInstance() {
		return instance;
	} 

	@Override
	public String getTargetDBName() {
		return "DB2";
	}
	
	@Override
	public PreparedStatement createPreparedStatement(Connection connection,
			String sqlQuery, String[] columns) throws SQLException {
		if (columns == null || !sqlQuery.toLowerCase().startsWith("insert")) {
			logger.warn(columns == null ? "Columns are null" : "Not insert statement");
			logger.info("Getting generated keys switched off !");
			return super.createPreparedStatement(connection, sqlQuery, columns);
		}
		//get columns from table from INSERT STATEMENT
		int tableNameStart = StringUtils.findIdentifierBegining(sqlQuery,sqlQuery.toLowerCase().indexOf("into") + 4);
		int tableNameEnd = StringUtils.findIdentifierEnd(sqlQuery, tableNameStart);
		String table = sqlQuery.substring(tableNameStart, tableNameEnd);
		int[] columnIndexes = new int[columns.length];
		ResultSet columnInfo = connection.getMetaData().getColumns(
				null, null, table, "%");
		int index;
		int counter = 0;
		//get columns indexes in table from theirs names
		while (columnInfo.next()){
			index = StringUtils.findString(columnInfo.getString("COLUMN_NAME"), columns);
			if (index != -1) {
				columnIndexes[index] = columnInfo.getInt("ORDINAL_POSITION");
				counter++;
			}
		}
		if (counter < columnIndexes.length) {
			throw new IllegalArgumentException("Not all columns (" + 
					StringUtils.stringArraytoString(columns, ',') + ") found in table " + table);
		}
		return connection.prepareStatement(sqlQuery, columnIndexes);
	}

	public int jetelType2sql(DataFieldMetadata field){
		switch (field.getType()) {
		case DataFieldMetadata.INTEGER_FIELD:
			return Types.INTEGER;
		case DataFieldMetadata.NUMERIC_FIELD:
			return Types.NUMERIC;
		case DataFieldMetadata.STRING_FIELD:
			return Types.VARCHAR;
		case DataFieldMetadata.DATE_FIELD:
			boolean isDate = field.isDateFormat();
			boolean isTime = field.isTimeFormat();
			if (isDate && isTime || StringUtils.isEmpty(field.getFormatStr())) 
				return Types.TIMESTAMP;
			if (isDate)
				return Types.DATE;
			if (isTime)
				return Types.TIME;
			return Types.TIMESTAMP;
        case DataFieldMetadata.LONG_FIELD:
            return Types.BIGINT;
        case DataFieldMetadata.DECIMAL_FIELD:
            return Types.DECIMAL;
        case DataFieldMetadata.BYTE_FIELD:
        case DataFieldMetadata.BYTE_FIELD_COMPRESSED:
        	if (!StringUtils.isEmpty(field.getFormatStr())
					&& field.getFormatStr().equalsIgnoreCase(DataFieldMetadata.BLOB_FORMAT_STRING)) {
        		return Types.BLOB;
        	}
            return Types.BINARY;
        case DataFieldMetadata.BOOLEAN_FIELD:
        	return Types.BIT;
		default:
			throw new IllegalArgumentException("Can't handle Clover's data type :"+field.getTypeAsString());
		}
	}
	
	public char sqlType2jetel(int sqlType) {
		switch (sqlType) {
			case Types.INTEGER:
			case Types.SMALLINT:
			case Types.TINYINT:
			case Types.BIT:
			    return DataFieldMetadata.INTEGER_FIELD;
			//-------------------
			case Types.BIGINT:
			    return DataFieldMetadata.LONG_FIELD;
			//-------------------
			case Types.DECIMAL:
				return DataFieldMetadata.DECIMAL_FIELD;
			case Types.DOUBLE:
			case Types.FLOAT:
			case Types.REAL:
			case Types.NUMERIC:
				return DataFieldMetadata.NUMERIC_FIELD;
			//------------------
			case Types.CHAR:
			case Types.LONGVARCHAR:
			case Types.VARCHAR:
			case Types.CLOB:
			case Types.OTHER:
				return DataFieldMetadata.STRING_FIELD;
			//------------------
			case Types.DATE:
			case Types.TIME:
			case Types.TIMESTAMP:
				return DataFieldMetadata.DATE_FIELD;
            //-----------------
            case Types.BINARY:
            case Types.VARBINARY:
            case Types.LONGVARBINARY:
            case Types.BLOB:
                return DataFieldMetadata.BYTE_FIELD;
			//-----------------
//			case Types.BOOLEAN:
//				return DataFieldMetadata.BOOLEAN_FIELD;
			default:
				throw new IllegalArgumentException("Can't handle JDBC.Type :"+sqlType);
		}
	}

}
